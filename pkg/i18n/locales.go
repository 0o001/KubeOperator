// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcb\x72\xa4\xba\x19\xde\xf3\x14\x32\x5d\xb3\x73\x4e\x65\xed\x1d\xa6\xb1\x4d\x86\x06\x0a\x68\x9f\x38\x1b\x4a\x0d\x7f\x77\x2b\x06\x89\x92\xc4\x38\x7d\x76\x79\xaf\xbc\x53\x5e\x21\xf5\x0b\x71\xe9\x8b\xcf\x78\x2a\xab\x99\x76\xe9\xbf\xe8\xbf\x7c\xdf\x27\x56\x95\x68\x5b\xc1\x9d\xd8\xdb\x04\x65\xf0\xf7\x30\x2f\xf2\x07\xe2\xc6\xb4\x05\x42\x1b\x09\xb4\x3e\x11\xf8\x17\x53\x5a\xb9\x4e\x98\x96\x71\x52\xcc\x87\xd2\x06\xa8\x02\xb2\x67\x4d\x43\x18\x27\xfa\x08\x44\xc2\x81\x29\x2d\x4f\x24\x4c\x89\x18\xfe\xa4\x4e\x4a\x43\x4b\x14\x68\xcd\xf8\x81\x74\xf4\x00\xae\xe3\x38\xab\xaa\xe9\x95\x06\xe9\xf8\xd1\x36\x2f\x82\xac\x5c\x07\x51\x50\x04\xe5\x93\x17\x46\xc1\xfa\x81\xb8\x15\xe5\x84\x0b\x4d\x6a\x68\x40\x03\xb1\xc7\x31\x50\xd5\x4b\x09\x5c\x13\xa5\xa9\x06\x77\x72\x10\xe6\x26\xbd\x6c\x1b\xc7\x61\xfc\xfc\x40\xdc\xe2\xb8\x30\x53\xc6\x99\xec\x39\x67\xfc\x70\x65\x14\x25\xbe\x17\x3d\x10\x37\x6c\x3b\x21\xf5\x64\x55\x51\x8e\x56\x3b\x20\x7d\x77\x90\xb4\x86\xda\xc5\xcc\x25\xd4\xc0\x35\xa3\x8d\x73\x96\x74\x99\x05\x79\xb2\xcd\xfc\xe0\x81\xb8\x4f\x94\x35\x50\x13\x2d\x6c\xfe\x77\xa4\x38\x82\x04\xcc\x83\x72\x42\x95\x12\x15\xa3\x1a\x6a\x72\x14\x4a\x93\x9e\xd7\x20\x89\x3e\x32\x45\xde\xe1\xe4\x7e\xe2\xb6\xfc\x47\x12\xff\x92\xef\x3f\x04\x87\x1b\xbe\x9f\xbc\x6d\x54\x94\x7e\x16\xac\x83\xb8\x08\xbd\xa8\xf4\xbd\xd8\x54\x61\x08\xfb\x40\xdc\x35\xec\x69\xdf\x68\x32\xdf\x74\x51\x8a\x21\x68\xed\x0e\x23\xe3\xbf\x04\xfe\xf7\xb9\x6b\xa6\xe6\xb3\x15\xc7\x39\x9a\x4d\xcd\x3c\x98\xd1\x52\xe6\xff\xbd\x02\x69\xce\xb8\x4e\xea\xe5\xf9\xef\x49\xb6\x9e\x92\x89\xb7\x11\x76\xa4\xa3\x4a\x7d\x08\x59\x93\x71\x1e\x76\x40\x76\x0d\xe5\xef\xff\xfd\xcf\xbf\x5d\x27\xcd\xc2\x57\xaf\x08\xca\xef\xc1\xdb\xa5\x21\x66\xd2\x49\xf6\x83\x6a\xc0\x8b\x2f\xb2\x98\xcd\x9d\x15\x96\xdf\x79\x49\xf2\xa2\xf4\xa2\x2c\xf0\xd6\x6f\xf3\x78\xbf\x60\x67\x2e\x77\xc0\x76\xc6\x58\x4c\x97\xbe\xd9\x90\xa1\xb3\xd8\x13\xeb\x62\xd1\x98\x0f\xa6\x8f\xa6\x00\x76\xd0\x6e\xf9\x2d\x1f\xdf\xca\x34\x4b\xfe\x16\xf8\xc5\xff\x15\xa2\x93\xe2\x9f\x50\x69\xd7\xc9\xdf\xf2\x22\xd8\x94\x76\x8b\x9f\x92\x6d\xbc\xbe\xbd\xc4\x8d\xa8\x68\x83\x1b\xbc\x67\x52\x69\x53\xa8\x38\x41\x3b\xef\xd5\x0b\x23\xef\x31\xc2\x11\x89\x05\x09\x3b\x42\x7f\x50\xd6\xd0\x5d\x03\xae\x13\xe6\xc3\x16\x99\x3b\x2c\xf6\x97\x0d\x2b\x35\x38\xc5\x84\xdd\xa1\xde\xe1\x26\x4d\xb2\xa2\x0c\xb2\x2c\xc9\xc6\x9e\xc5\x82\xd4\x54\x53\xbc\xa6\x35\xfb\xa0\x8a\xec\x45\xcf\xeb\x3b\x62\x33\xad\x8e\x50\xbd\x9b\x3c\xed\x91\x3d\x6b\xe0\xee\xdc\x29\xba\x2b\x5f\xbd\x68\x8b\x99\x06\x6d\xa7\x4f\x83\x5f\xc1\x49\xc3\x38\x90\x6f\xea\xfc\xfc\xef\x59\x12\x3f\x97\x4f\x49\xb6\xf1\x30\xf5\x90\x57\x42\x4a\xa8\x34\x19\x02\x08\xd9\x52\xfd\xa9\xf1\x62\x91\x96\x85\xf5\x17\x5b\x20\xf4\x70\x89\x4f\x7d\xd8\x96\xc7\xdb\xcd\x03\x71\x3d\xa2\x85\xa6\x0d\x11\x7b\xf2\x4d\x11\x29\x3e\x14\xfe\xd7\x5c\x80\x4a\x20\x74\xc7\x31\xa1\xe6\x9e\xa8\x77\xd6\xdd\xf4\x93\x7b\xaf\xe7\x40\xa1\xe8\x0f\x3b\x2d\xdf\xd4\x3d\x91\x40\x95\xe0\x0f\x98\x84\xe3\xac\x70\x09\xe7\xf5\xc3\x2b\x6c\xbc\xc2\x7f\x19\x57\x68\xdc\x3f\xa6\x08\x1b\xeb\xe2\x3a\x49\x16\x3e\x87\xb1\xbd\xf2\xf2\xbc\x90\xec\xc0\x38\x6d\x3e\x33\xdc\xe6\x33\xea\x7a\x7e\x11\x9a\x44\x8b\x11\x0b\x2c\x4c\x03\xc7\x99\x5a\xf4\x5c\x70\x4d\x2b\x6d\xba\x4e\xeb\x96\x71\x24\x19\xaa\x85\xbc\xb3\x0e\x97\x85\x8f\x05\x51\x7d\x75\x34\x0e\xcd\xf0\x7a\xeb\x4d\x18\x5f\x83\x1c\x06\xad\x2d\xd0\x19\xa7\x43\x0a\x57\x40\x77\x77\x9e\x74\x16\x44\x5e\x11\xac\x17\xbb\xb9\x45\xb3\x23\xc5\xd4\x97\x1b\x68\x17\xcf\xa4\x10\xad\xbd\x74\xca\x60\x9b\xae\xbd\x29\x83\xa6\xa6\xdd\x65\x60\xa8\xd9\x10\xf7\x35\xc8\xc2\xa7\xb7\xd2\x4f\xd6\x0b\x62\x7c\x05\xc9\xf6\xac\xa2\x9a\x09\x4e\x2a\x51\x03\x01\x29\x85\x74\x9d\x60\xe3\x85\x51\xb9\x0e\x73\xbb\xa2\x1b\xca\x9a\x91\x77\x95\x19\x9d\x9a\xa9\x2f\x16\x76\xf4\xb6\x6c\x6f\xd0\xa2\xc3\x96\xea\xea\x48\xf6\x66\xb4\x06\x6c\x40\x1a\x98\xe6\x27\xc7\x5f\x53\xae\x58\x9a\x3f\xe1\x80\x71\x46\x2e\x9d\x18\x50\x78\x20\xee\x87\x14\xfc\x30\xb3\x04\x11\x72\x61\x32\x24\x68\xe0\x7a\x4a\xee\x12\xae\x9d\x15\x2a\x12\xc1\x47\x7c\xcd\x82\xe7\x30\x89\xbf\xca\xd7\x64\x30\xfe\x19\xc2\x22\xcd\x62\x28\xfc\x77\x0c\x84\x54\xfd\xe5\x30\x86\xa7\x7f\x06\xe3\x0d\xe5\xe7\xb2\x65\x80\x4c\x7f\x28\xec\x01\xf4\x92\x50\x6e\xa0\x65\x25\xf8\x9e\x1d\x7a\x69\xe6\xc6\x34\x2e\xdc\x78\xcf\xc1\xe7\xae\x58\x4b\x0f\xf0\x35\x47\x69\x99\xbf\x24\xd9\x00\x9d\xaa\xdf\xef\x59\xc5\x50\xa0\x85\x1d\x96\x45\x74\xc0\x95\xa6\xd5\xbb\xf3\x1c\x14\x63\x07\xc6\x0e\xc7\x62\x2c\xb2\x01\x48\x3c\x6f\xf7\x66\x03\xed\x0e\xe4\xb4\x7a\xde\x1a\xe7\xe9\x9b\x22\xd3\xb6\xed\x00\x38\xa1\xb5\x11\x65\xcb\x05\x1d\x71\xe0\x9b\x3a\xc3\x14\xe3\xdf\xb2\xbe\x0d\x31\x69\x21\xbb\xcb\x9f\x0b\x21\x6b\x70\x4b\x05\x8d\xb6\x2f\x5e\x5e\xda\xf6\x20\xad\x5a\x83\x45\x2b\xa7\xd6\xf8\x37\x10\xc6\x59\x71\x51\x83\x13\xe3\xa6\x8f\x4a\xc4\x2a\xd9\xb2\xf0\xf2\xef\x48\x0b\x75\x4d\xf0\x10\x6e\x81\x15\xc5\xe6\xe7\x38\x35\x56\xdb\xde\x77\x43\xc3\x3e\x28\xd3\x84\x69\x52\x0b\x0e\xbf\x61\x80\x1d\xad\xde\xfb\xce\xab\x2a\xd1\x73\xed\xa4\x5e\xe6\x6d\xca\x60\x93\x16\x6f\x97\x6d\xeb\xa8\xa4\x2d\x68\x90\x0a\x89\xbf\x28\xf3\x6d\x9a\x0e\xdd\xdd\x72\xd5\x77\xc8\x89\x38\xc3\xa7\x0e\xc5\xf7\xb9\xfc\x3b\xc3\xa6\x01\x23\x26\x6d\xf3\xe8\xf9\xdf\xb7\x69\xe9\xf9\x7e\xb2\x8d\x7f\x45\xe5\x9c\x25\xfe\x65\xb9\xe3\xac\x70\x65\x2e\xa4\xf4\x17\xa2\xa1\xd5\x2f\x04\xb1\x5d\x7d\x34\x39\x3a\xf6\x8e\x4f\x61\x14\xe4\x4b\x31\x6a\x97\xc8\xb6\x4d\x4f\x97\x32\xe2\x85\xec\x60\x2f\x24\x10\xf5\xc1\x74\x75\xc4\x47\xd2\xe2\x00\x1d\xae\x7d\xb6\xfa\x43\x94\xeb\x17\xce\x0e\xd0\x18\x0d\xa1\x26\x7d\x67\x86\x7d\x61\x96\x05\x79\x91\x64\xc1\xb5\x9d\x04\xa5\x85\x64\xfc\x70\xbe\x1e\x19\x28\xd1\xcb\x0a\xae\x6b\xb8\xb8\xe6\x4f\x2f\x37\x8b\xc8\xdb\x1a\x77\xde\x99\x49\xd1\x8e\xa5\xdf\x41\x23\x90\xba\xb4\x38\xc7\xb6\x02\x1f\x33\xa2\x03\x69\x39\x70\xda\xa7\x0e\x24\x8a\x35\xb3\x51\x83\x2c\xba\x82\x84\x17\x2b\x99\x27\x48\x70\x9d\xe9\x7d\x35\xc0\x4c\x60\x4f\x8e\xd7\x37\xc3\x30\xc0\x4c\x1a\x79\xf1\x0d\x9f\xa9\x1d\x99\x85\xcf\x8b\x61\xbf\xb6\x79\xbc\x1c\xea\x85\xb1\xb3\x42\x55\x30\x88\x86\x09\xd9\x86\x41\xca\x4f\xbc\x3a\x4a\xc1\xd9\x1f\xd8\x62\x05\x72\x20\xf6\xbf\x5a\x89\x11\x25\xcf\x61\x7c\x69\xb3\x5d\x2a\x2b\x24\xc6\x3b\x7b\x7a\x96\x0a\xc5\xfc\x50\xef\xa4\x38\xb2\x1d\xd3\x8a\xe0\x19\x1b\x63\x2f\x45\x4b\x1a\x71\x38\xe0\x80\x31\xfe\xdb\x57\x84\x99\xb3\xaa\x98\x72\xfc\x30\x37\x00\x76\x89\x6a\xf8\x42\x60\x8a\x68\xaa\xde\x2f\x11\x0c\x4d\x7f\xb4\xbe\xa1\x19\xe7\x75\x53\xfa\x49\xfc\x14\x3e\xcf\x0f\x33\x7f\x49\x40\x57\x94\x3f\x1b\x5c\x7e\x51\x28\x2e\xc9\xeb\xb3\x41\xab\xa1\x6b\xc4\xa9\x35\x58\xd8\x50\xfe\xc5\x81\x73\x56\xac\x43\x2a\x9c\xf2\xc4\x78\xc0\x35\x48\xa8\xf1\x35\xa5\xe0\x60\x5c\x62\x0a\x0d\xab\xb4\x9a\xf1\xc4\xe4\x8e\xa5\x9d\x8f\xdd\x93\xee\xfc\x65\x46\x0f\x94\xf1\xe9\x23\xcc\xf2\x29\x16\xa6\xf8\x4e\xc0\x0c\xab\xaa\xef\x18\xd4\x84\xf2\x7a\x91\xa4\x04\xe3\xa9\x1e\x52\xfc\x4b\x27\x44\x83\x6e\xd2\x24\x89\x6e\xd6\x28\x4c\x09\x9e\x59\x90\xec\x0d\x08\x9c\x5e\x7e\x83\x7a\x39\x8f\x38\x91\xe3\xa0\xbf\x94\x96\x27\x07\x89\x3f\x2f\xb2\xb7\xeb\x87\x76\xb1\xfc\x70\x24\xf6\xc3\xb7\x0a\x2a\xab\x23\xd3\x50\xe9\x5e\x82\xe1\x9a\x1b\xda\xce\x02\xc2\x84\x53\x23\xd6\xa5\x59\xf2\x1a\xae\x83\x6c\x52\x19\x4b\xbc\xab\x24\x98\x9b\x60\x49\x7b\x2d\x5a\xaa\x59\x45\x5a\x24\x52\x9b\x7f\x4b\x79\x4f\x9b\xe6\x84\x7f\x64\xfb\xd3\x00\x49\xd2\xc6\x50\x0b\xb8\x28\xde\xd2\xe0\x2c\x84\x41\x89\x21\x59\xbb\x6e\x13\x5d\xde\x91\x84\x37\xa7\xf1\xb7\x22\x88\x4e\xf7\xe4\x1c\x25\x7e\xce\x94\x33\x56\xee\xff\x84\x29\x89\xd9\x41\x38\xdc\xe2\x2e\x64\x89\x33\x62\x99\x79\x83\x56\xda\x7c\x2d\x31\xb3\xfc\xbf\x00\x00\x00\xff\xff\x6d\xb3\x44\x54\x17\x14\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 5143, mode: os.FileMode(420), modTime: time.Unix(1617703460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x4f\x73\xda\x48\x16\xbf\xeb\x53\x50\x50\x73\x9b\xdd\xda\x73\x6e\x0a\xc8\x8e\x36\x42\x52\x49\xc2\xb3\xde\x8b\xca\x43\xd8\x59\xef\xd8\x40\x19\x7b\xab\x76\x4f\x43\xfc\x07\x70\xc0\x78\x13\xdb\x1b\xdb\x4c\x0c\x8e\x49\x18\x7b\x00\xff\x99\x18\x82\xb0\xfd\x65\xd4\xdd\xe2\xe4\xaf\x30\xd5\xdd\x92\x68\x20\x9e\xf8\x88\x78\xbf\xd7\xaf\xdf\x7b\xbf\xdf\x7b\x1d\x8a\xa7\x16\x17\x53\x49\x4e\xe6\xa3\x82\x29\xfc\x4d\xd4\x0d\xfd\x49\x20\x08\xb6\x4b\xe8\xe3\x39\xe8\x5c\x82\xe6\x5b\x50\x69\x04\x39\x51\x35\x65\xc5\x18\x1a\x38\xed\x0e\xa8\x34\xd0\x95\x85\xac\x23\xa7\x75\x8b\x6e\x5a\x83\xda\xa7\xc1\xcf\xc7\xa0\x76\x06\x36\xf6\x6d\xeb\x0d\xe8\xbd\x11\xd5\x20\xc7\x85\xe2\x0b\x2b\x99\xe5\xc4\x12\x17\x96\x62\xba\x21\x68\x66\x44\x90\x04\x43\x30\xa7\x78\x51\x12\x22\x4f\x02\x41\xf8\xff\x2a\xbc\xda\x05\xf9\xea\x60\xff\x04\xdc\xbc\x01\x85\x12\xda\xbc\x86\x3f\x65\xd1\xc1\xda\xe0\x70\x03\xdd\x9e\x04\x7d\xa8\xa8\x93\x20\xb4\x98\x2c\x8b\xf2\xf4\x93\x40\x90\x1a\xd8\xdd\x12\xa8\x34\x9c\xbb\x6d\xa7\x56\xb4\xbb\xcd\xfb\x7e\x76\x02\x22\x29\x61\x5e\xc2\xf7\x6a\xf7\xc1\x7a\x9d\xc2\xdc\x83\x4b\x39\xd4\xfb\x48\x02\x5d\x4a\xbc\x48\x24\x97\xe7\xe7\x16\xb8\x91\x18\x4d\x4d\xd0\x95\x98\x16\x16\x30\x9e\x86\x79\x72\xe1\xfc\x56\xbf\xef\x67\x9d\x76\x1d\x7d\x7c\x3b\x78\x5d\xb7\xbb\xaf\x60\xa5\x00\xd6\xaf\x9c\xec\x8e\xdd\xb5\x60\xa5\x17\x7c\xc0\x89\xf9\x77\x45\x7e\xac\x27\x50\x6e\xa3\x9d\x06\x28\x12\x67\x53\x7c\x4c\x32\xcc\xb0\x26\x44\x04\xd9\x10\x79\xc9\x0c\xf3\x32\xb9\x1b\x3d\x07\x67\xc3\x7a\xeb\xb4\x4e\x40\xae\x09\x4b\x2d\xbb\x5b\x72\x56\x6f\xe8\x21\x24\x21\xa4\xbe\xe1\x67\x42\xf8\xf9\x30\xf5\xf4\x44\x5a\x6b\x0a\xb0\xbb\x5b\x68\xa7\x01\xf3\x1d\xfc\xf1\xb0\x0b\xb6\x8b\x41\x4e\xe5\x75\xfd\x3b\x45\x8b\xf8\x07\xca\x31\x89\xe6\x72\x03\x55\xb3\x1e\xae\x87\x7e\xe9\x91\x83\x54\x4d\x9c\xe1\x0d\xc1\x7c\x2e\xcc\x8e\x23\xbc\x1b\x8e\x21\x38\x2e\xf4\xcf\x54\x66\x99\x7b\xa6\xe8\x86\xc9\x4b\x9a\xc0\x47\x66\x87\x9d\x46\xd3\xc9\xb4\xa2\x9b\x57\x62\xed\x5f\x65\x32\x9d\x3e\x0e\x59\x65\x9a\x4e\xaf\x9d\x26\x1d\x98\x4f\x67\x4d\x55\x53\xfe\x2a\x84\x8d\xc7\xfa\xaa\x7d\x46\x87\x2d\x12\xbe\x3e\xab\x1b\x42\xd4\x74\x19\x32\xa5\xc4\xe4\x88\x4b\x90\xf5\x3c\xa5\x03\xac\xfc\x0a\x2b\x3d\x51\xa5\x85\x50\xb0\x29\x3f\xc3\x8b\x12\xff\x54\xc2\x75\x13\xd5\x80\xf3\x69\x0d\xf6\xb6\x71\x66\xae\xaf\x82\x9c\xa8\xd3\x86\x25\x21\x12\x5f\x6e\x04\x76\x77\x8b\x52\x2b\x20\xaa\x01\xb0\x71\x89\x4e\xb3\xf7\xfd\x22\xac\x9c\x3a\xab\x37\x30\xbf\x0d\x36\x8f\x60\xc7\x02\x9b\xd5\x20\xcd\xa5\x18\x55\x15\xcd\x30\x05\x4d\x53\x34\xaf\x06\xb0\x72\x0a\x0b\xb7\x20\x7f\x0e\xca\x6d\xca\x06\x74\xb0\x06\x77\xcf\x61\xa9\x45\xee\xda\x81\xef\x7f\x82\x47\x75\xfa\x17\xdc\xcb\xd9\xd6\x35\x09\x9b\x75\x88\x5d\x99\x33\xbc\x14\xc3\xd1\x7f\x93\x09\x38\xb5\x22\xac\x14\xd0\x2f\x3d\xea\x67\xd4\xf8\x3b\x4d\x91\xa7\xcd\x29\x45\x8b\xf2\x86\x6f\x8e\xce\xda\xa0\xfc\x1e\x56\xfb\xa0\x5f\xb6\xbb\x25\xd8\x7c\x8f\x6a\x63\x38\xa6\xd3\xd9\xbc\xba\xc7\x15\x6e\x31\xeb\xf3\xe7\xa0\xbd\x31\x78\x5d\x1f\x45\xba\x35\x95\x63\x51\x5c\xcc\xf5\x8b\x80\x8b\x21\xc1\xd1\xd3\x40\xb7\x7b\xdf\x2f\x3a\x9d\x2b\xe7\x2e\xf7\x45\xb0\xce\xcf\x08\x7e\xf3\x61\x07\xf6\xdd\xcf\xb8\x01\xdd\xa6\x28\x82\xad\x23\x70\x58\xbd\xef\x1f\x7c\x93\x21\x0d\xbc\x92\x49\x2c\x0d\x99\x82\x03\x8e\xf2\x46\xf8\x99\x4f\x93\xc1\xce\xbe\xd3\x6e\x07\x39\x45\x13\xa7\x45\xd9\xbd\x93\x6f\xb2\x75\x34\x6a\x15\xd3\x87\xd2\xc5\x87\x0d\x91\xc4\x42\x89\x09\x2b\xa7\x60\x1b\xcb\x02\xad\x96\x93\xdd\xc1\x22\xdc\xaa\xa1\xed\x0d\xf0\xbf\xb7\xa4\x54\x04\xcd\xe6\x0c\x2b\x5d\xf3\x84\xe2\x89\x05\x1f\x89\x8a\xf2\x43\x02\x12\x98\x7b\xb1\x38\x9f\x0c\x50\x73\x4a\x56\xe7\xf8\x8c\x91\x12\x36\x3a\x4d\x90\x78\x43\x88\x30\xec\x71\xc3\xbc\xac\xf9\x32\x46\xb9\x12\xe4\xa4\x08\xaf\xfa\x87\xc6\xd4\x08\x4f\x0e\xc5\x5f\x47\x0e\xb3\xef\x5a\x70\xe7\x33\x39\x69\x46\xd0\xc4\xa9\x59\x33\xac\x44\x98\x81\x31\x38\x2d\x3a\xed\x2c\x93\x2d\x21\xca\x8b\x92\x19\x11\x75\x97\x4f\x83\x97\x2d\xdb\xba\xa6\x53\xc9\x39\x3e\x43\x1f\xb2\x0f\xa5\xcb\xc3\xb2\xc5\xa0\x68\x50\xfc\x3c\x58\x2f\xf9\x1a\xe0\xea\xa7\x5f\x60\x1d\xff\x1a\xea\xa8\x27\x99\xbe\x88\xd2\x72\x7a\x0a\x3a\x8a\x25\x74\x64\x51\x30\xbf\x37\x5a\x7e\x1a\x14\x51\x40\x1a\x10\x6a\x5d\x30\x02\xc8\x71\xa1\xa5\xc4\x0f\xf3\xa9\xa4\xa7\x64\x9a\x30\x2d\x2a\xf2\xa3\xc6\x15\x28\xf6\xc0\xd1\x11\xab\x64\xcc\x90\xe1\x42\xff\x4d\x25\x13\x9e\x57\x3c\xa8\x1e\xe7\xd3\xf3\x30\x22\x90\xab\x0d\x74\x73\xe9\xb4\x6a\x20\xff\x7a\x74\x1c\x53\x1d\x72\xb6\x3a\xa0\xbc\x47\x49\x4c\x85\x99\x95\x9f\xc1\x7a\x09\xdd\x50\x79\x15\xa3\xfc\xb4\xf0\x10\x70\xb7\x02\x56\xcb\x0f\x01\x55\x53\x7f\xa6\x68\x38\x85\x62\x3a\xe0\x69\x2b\xc7\x85\x52\xe9\x44\x32\xb3\x3c\x17\xff\x91\x9b\x16\x0c\x2f\x79\x5e\x55\x86\xca\x42\x32\x85\x93\x92\x5e\x4a\xfd\x2b\x11\x5f\x8e\x26\x16\xbf\x4f\x2c\xf9\xdd\xcf\x47\x5c\x39\x72\xeb\x48\xee\xee\xc9\x2f\x4b\x11\x46\xb9\x7c\x0a\x53\x09\xa6\xd3\xcf\xf3\xef\xcf\x78\x97\x4b\x0f\xf1\x93\xd2\x69\x62\xc0\x7b\xa8\x67\xbc\x6e\xba\xe9\xc6\x10\x62\xcc\xce\xbf\xfb\x7e\x76\x02\xcb\x85\x92\xa9\x17\x09\x4e\xc6\x3c\xf3\x06\xb0\xbb\x65\x99\x06\xaf\x3f\x27\x3a\x7a\x6d\x5b\x7b\xce\xe6\x4b\xf4\xf2\x33\xdc\x3d\x1f\xe4\xca\xf0\x4d\xc9\xbe\xa9\x60\x31\xad\x34\x60\xe1\xa3\x53\x2b\x7e\x1b\x70\xda\x1d\xd4\x2c\x80\xdb\x75\xd0\x5a\xb5\xad\x5f\xe9\x67\xd0\x2a\xc2\xf6\xee\x9f\xf1\x31\xdf\xcf\xc5\x7f\x5c\x49\xf3\xf1\x78\x6a\x25\xb9\xcc\xa9\xbc\xc6\x47\x4d\x21\xaa\x1a\xb3\xf8\x84\xf2\x4b\xb8\x7b\xee\xd5\x09\x5f\x5c\x8f\xa9\x2a\x2d\x20\x56\xed\x9d\x36\x2c\xe2\xad\x10\x5d\x58\xe0\xdd\xab\x20\x37\xb6\xcc\xc0\x6a\x6d\x70\x5a\x64\x18\xeb\xb6\xf1\x53\x3e\xfc\x3c\xa6\x9a\x7c\x38\xac\xc4\xe4\xc7\x0e\x7c\x70\x92\xb3\xad\x1b\xe7\xb7\x0f\xa0\xdc\x79\x60\xec\x73\xa1\xf4\xc2\x5c\x72\x6c\xcb\xfb\x8a\x5b\x96\x14\x93\x6e\x99\x6d\xf9\x29\xc9\x13\xe7\xc6\x3e\x25\x4a\x82\xce\x2e\x52\xee\x72\xe1\xfa\xc7\xa1\xd2\x49\x0d\x36\x4a\x20\x9f\x83\xa5\x63\x36\xfe\x11\xf6\x51\x8f\xfe\xea\x4c\xab\x47\xad\xbf\xb0\x3a\x6b\x82\x6e\x28\x9a\x30\x66\x0e\xb3\xc7\xe0\xa4\xe4\x99\xfb\xfd\xab\x25\x32\xa9\x95\xa5\x78\x62\x32\x25\xcc\x35\xfe\x20\x78\xb6\x68\x63\xbb\xd9\xb0\x9f\x47\x36\xb1\x8b\x77\x76\x6f\x6b\xac\xab\x9d\xbb\x43\x3c\xeb\x9b\x27\xb4\x3d\x99\xdd\x65\x82\x8d\xde\x4e\x55\xf2\x84\xd5\xdf\xd1\x29\xbd\x05\x6f\xdf\x20\xcb\x19\xe8\x5c\x7a\xec\x56\x25\x5e\xfe\x82\x3f\xb6\xba\x8c\xd7\xb1\x06\x9c\xc4\xb1\xc5\x62\x70\x5c\x68\xe1\xc5\x5c\x9a\x4e\x4d\x5f\x4f\xdc\xd5\x7b\xbb\x08\x9b\x75\x90\x3f\xc7\x74\x70\x47\x67\xef\x2f\xee\x84\x95\x94\x69\x51\x1e\x47\xf8\x03\x96\x7a\x27\x69\x21\xd6\xc3\xb1\x49\x1f\x73\xe8\x43\x16\x36\x8f\xf1\x5f\x14\x82\xf6\xad\xc1\xfe\x46\xe0\x81\x55\x83\x0b\xc5\xe7\x33\x5c\x58\xd4\x89\x4c\x8c\x6b\x07\x8e\xd4\x1b\x5b\xb0\x70\x06\xcb\x65\xbb\xdb\x44\x07\x6b\xb6\x65\x81\xcd\x1a\x46\xff\x7b\x31\x9c\x4a\xfe\x63\xfe\x07\x6e\x26\x6a\x86\x15\x79\x4a\x9c\x1e\x2e\xfe\x54\xca\x99\xb9\x37\xb4\x19\x7f\x43\xfa\xa6\xc3\xae\x60\x6a\xf1\x87\xbd\xc1\x85\xe6\xd3\x78\x54\x0c\x9f\xbe\x64\x65\x47\x07\x6b\xa2\x0a\x5b\x9f\xf0\x2c\xef\x5c\xc2\x4a\x81\xfc\xf2\x57\x6e\xa7\xdd\x19\xe4\x4a\x70\xef\x9c\x5a\xfb\xef\xe3\xb1\xb5\x1e\x37\xcf\xf1\x19\x28\x55\xc9\x02\x52\xf4\x97\xa9\x41\x6e\x13\xee\xdc\xd2\xc3\xff\x94\x4e\xa5\x16\x30\x5e\x55\x14\x69\xe2\x66\x62\x3a\x00\x2f\xaa\x5f\x9c\xd7\x78\xf3\x67\xde\xce\x41\x77\x2d\xc8\x2c\x2f\xfd\x87\xc3\x43\x4d\x37\xb4\xd9\xc9\xe7\x94\xd3\xae\xc3\x77\xd7\xf0\x9d\x2b\xa3\xa4\x1a\xf8\x45\xe1\x1e\xe1\xf7\x9e\x2b\x44\x3e\xa9\x3d\x55\x50\x35\x65\x46\x8c\x08\x9a\x3f\x30\x9d\xdc\x29\xd8\x6c\xc0\x46\x0d\xf4\xcb\x20\x7f\x08\xac\x9e\xff\x72\xa7\xf7\x85\x85\x57\x60\xb3\x41\xb7\x3a\x4a\x39\x4a\x28\x86\x6f\xc6\xac\x2a\xf8\x0e\x7d\xad\xa7\x74\xf3\x15\x1f\x97\xd1\x5a\xa7\x7f\x05\x30\xa5\xbf\x1d\x65\xd6\xd7\x15\x7f\x28\x23\x5f\x51\x7c\x92\x68\x74\xb0\x46\x3f\xa2\xe6\x1e\xda\xad\x63\x9d\x24\x8b\xb7\x2f\x7c\xdc\xef\x01\x00\x00\xff\xff\x18\xb0\xeb\x6d\x3c\x11\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 4412, mode: os.FileMode(420), modTime: time.Unix(1617703437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
