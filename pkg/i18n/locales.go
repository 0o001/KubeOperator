// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcb\x6e\xeb\x36\x10\xdd\xeb\x2b\x26\xf2\xb6\xb8\xe8\xda\x3b\x46\x62\x12\xf5\xca\x92\xa1\xc7\x6d\xd3\x8d\x40\x4b\x63\x99\x8d\x4c\x0a\x24\xd5\x34\x77\xd7\xff\xea\x3f\xf5\x17\x0a\x4a\xb4\xac\xc4\x09\xe2\x8b\xae\x02\x23\x3c\xf3\x38\x73\xe6\x8c\x56\xb5\x3c\x1e\xa5\xf0\x12\xb2\xa1\x15\xfd\x2d\xca\x8b\x7c\x0d\x7e\xc2\x8e\x08\xac\x53\xc8\x9a\x17\xc0\xbf\xb8\x36\xda\xf7\xa2\x6d\x95\xa4\xc5\xf9\xd1\xb6\x43\xa6\x11\xf6\xbc\xeb\x80\x0b\x30\x07\x84\x4e\xd6\xac\x83\x68\x0b\x72\xfa\xad\x5f\xb4\xc1\x23\x68\x34\x86\x8b\x16\x7a\xd6\xa2\xef\x79\xab\xba\x1b\xb4\x41\xe5\x05\x71\x99\x17\x34\xab\x42\x1a\xd3\x82\x56\x77\x24\x8a\x69\xb8\x06\xbf\x66\x02\x84\x34\xd0\x60\x87\x06\xc1\x3d\xb7\x49\xea\x41\x29\x14\x06\xb4\x61\x06\xfd\x39\x40\x94\x8f\xa5\x65\x65\x92\x44\xc9\xfd\x1a\xfc\xe2\xb0\x80\xe9\x31\x98\x1a\x84\xe0\xa2\xbd\x00\xc5\x69\x40\xe2\x35\xf8\xd1\xb1\x97\xca\xcc\xa8\x9a\x09\x8b\xda\x21\x0c\x7d\xab\x58\x83\xcd\x58\xb9\xc2\x06\x85\xe1\xac\xf3\x5e\x15\x5d\x65\x34\x4f\xcb\x2c\xa0\x6b\xf0\xef\x18\xef\xb0\x01\x23\x5d\xfd\x37\x50\x1c\x50\xa1\xad\x83\x09\x60\x5a\xcb\x9a\x33\x83\x0d\x1c\xa4\x36\x30\x88\x06\x15\x98\x03\xd7\xf0\x84\x2f\xfe\x07\x61\xab\xdf\xd3\xe4\x87\x62\x7f\x97\x02\xdf\x89\x7d\x47\xca\xb8\xa8\x82\x8c\x86\x34\x29\x22\x12\x57\x01\x49\x46\x16\xa6\xb4\x6b\xf0\x43\xdc\xb3\xa1\x33\x70\xee\x74\x41\xc5\x94\x74\x64\xc2\x16\xef\x3d\xa4\x79\x51\x91\x38\xa3\x24\x7c\x3c\x0b\xe3\xc1\xf6\xf5\x56\x3d\xae\xaf\x11\x31\x0f\xfa\xdd\x76\x26\x5e\x6c\x47\x2e\xc4\xa2\xad\x67\x6e\x0e\xa3\xb2\xdc\x98\xde\x8b\x5b\xdd\x3e\x56\xdb\x2c\xfd\x85\x06\xc5\xff\x4a\xd1\x2b\xf9\x07\xd6\xc6\xf7\xf2\xc7\xbc\xa0\x9b\xca\xe9\xff\x2e\x2d\x93\xf0\x13\xf9\xef\xb9\xd2\xe6\xdf\x7f\xfe\xf6\xbd\x24\xb5\x38\xf2\x8d\x44\x31\xb9\x8d\x2d\xc1\x89\x84\xa8\x07\xf6\x27\xe3\x1d\xdb\x75\xe8\x7b\x51\x3e\x69\x70\xec\x61\xa1\x7e\x3e\x09\x72\x0a\x6a\x0b\xb6\xb4\x0f\x1a\x95\xb7\x25\x79\xfe\x6b\x9a\x85\x63\x3d\x1b\x52\x04\x0f\x4e\xf2\x3d\xd3\xfa\x59\xaa\xc6\xb6\xc6\x45\x2d\x95\x1a\x1b\x48\xb3\xe8\x3e\x4a\x48\x7c\xf1\x5e\x2a\xde\x72\xc1\xba\x8f\x80\x65\x7e\xde\x13\x12\x14\xd1\x37\xea\x80\xb6\x8c\xd3\x62\xa1\xb0\x7d\x34\x37\xe0\x18\xa9\xa5\x30\xac\x36\x23\x23\xac\x39\x72\xc1\xb5\x51\xcc\x48\x75\xe3\x02\x2e\x59\x4c\x24\xe8\xa1\x3e\x8c\x01\x47\xc2\x48\xb8\x89\x92\x4b\x59\xda\xa4\x8d\x93\xe6\x18\x74\x2a\xe1\x42\x9a\x37\xaf\x8b\xce\x68\x4c\x0a\x1a\x2e\xf4\x50\x5a\xd8\x81\xd9\xd2\x97\x53\x77\xc3\x1e\x4b\x88\x43\xb2\x9d\x2b\x28\xb7\x21\x99\x2b\xe8\x1a\xd6\xbf\x4d\x8c\x0d\x9f\xf2\x7a\x2b\x85\x2d\x97\xe2\x24\xc9\x8c\xde\x47\x69\x72\xad\x41\xc0\x04\xfe\x4c\x94\x76\xaf\x6d\x2a\xfb\xf7\x94\xc8\x7a\xc3\xd5\x69\x46\x63\xf8\x4c\xf9\x1d\x13\xaf\x7d\xb2\x8c\xad\x45\x06\x53\xd3\x2d\x9a\xe5\x0e\x9e\x07\x7f\xc0\xfa\x69\xfa\x8f\x14\x7b\xde\x0e\x8a\x19\x2e\xc5\xc8\x69\xb4\x21\xf7\xf4\xe3\x50\xfc\xc8\x5a\xbc\x2a\x90\xe7\xad\x64\x8f\x42\x1b\x56\x3f\x79\xf7\xb4\x38\xd1\x4c\xb3\x2c\xcd\x26\x41\x39\x26\xf7\x72\x10\xa3\x55\xb9\xd9\x6e\xf0\xb8\x43\x35\xcb\x83\x84\xe1\x52\x0e\x3b\x44\x01\xac\x71\x3e\xef\x20\xb3\x63\x3a\xfd\x7c\x6c\x97\x0e\xf0\x9e\x57\x9e\xb0\x0f\x24\xaf\x1c\xa7\xd6\x3e\x1c\x60\xc1\xff\xcc\x67\xf0\x8e\xaa\xbd\x95\x90\x0d\x7a\x49\x1a\xd2\xd9\x71\xdd\xbd\xab\x0a\x92\x7f\x5d\x83\x4f\x9a\x06\xec\x23\x90\xea\x74\x3a\xc7\x9f\xa7\x51\xbb\x0b\xf8\x53\x3f\xb1\xfc\xcc\xb8\x01\x6e\xa0\x91\x02\xbf\xd8\x04\x3b\x56\x3f\x0d\x3d\xa9\x6b\x39\x08\xe3\x6d\x49\x46\x36\x15\xdd\x6c\x8b\x47\x7b\x1d\x85\x1e\xf6\x7b\x5e\x73\x7b\x7d\x7b\xa6\xd8\x11\x0d\x2a\x6d\x0d\xae\xa8\xf2\x72\xbb\x4d\xb3\x71\xbb\x84\x1e\x7a\x6b\x5b\x56\x78\x2f\xbd\x3d\xd1\x0f\x34\xf8\x7a\x76\xfc\x6f\xa8\xf8\x9e\xd7\xe3\x3c\x61\x3f\x2a\x74\xf6\xf0\x5b\x12\x7c\x2d\xb7\x15\x09\x82\xb4\x4c\x7e\xc4\xcd\x5f\x15\x7e\xb5\xad\x7b\x2b\xab\xf3\x37\x07\xf7\x8a\x6c\x16\xf5\x03\x49\xdc\x54\x6f\xc7\x1a\x3d\xd7\xe3\x5d\x14\xd3\xc9\xa1\xdc\x3e\x38\xe5\xbb\xb1\x99\xb9\x29\x7b\x5f\x10\x76\xb8\x97\x0a\x41\x3f\x73\x53\x1f\xec\x97\xd4\xe2\x01\x9b\xda\x7e\xb5\xaf\x53\x96\xcb\xef\xa0\x1d\x5a\xb0\x05\x62\x03\x43\x3f\x2e\xd4\x02\x96\xd1\xbc\x48\x33\x7a\x89\x53\xa8\x8d\x54\x5c\xb4\xd3\x0a\x9e\xd6\x23\x43\x2d\x07\x55\xe3\x25\x87\x8b\x36\x3f\x6d\xee\x7c\x2c\xdf\xbf\xe5\xe7\x9d\x99\x2f\xf7\x89\xfa\x1d\x76\x52\xb4\xda\x4e\xe8\x95\x21\x15\xf6\x93\x47\xf6\x38\xf9\xc6\x62\x29\x7b\x54\x7b\xa9\x8e\x6e\xa3\xac\x9d\x4f\x6e\x3f\xdf\x8c\x69\x1a\xf9\x8b\xa8\x0f\x4a\x0a\xfe\xdd\xf2\xa4\x51\x69\x60\x0a\xe1\x67\x77\x1b\xe2\xf4\x3e\x4a\xde\x62\xca\xe5\x49\xb4\x1f\x3d\x37\xee\x75\x18\xe5\xee\xf4\x17\xe7\x4f\xe2\x5e\xc9\x03\xdf\x71\xa3\xc1\xbe\x71\x39\xf6\x4a\x1e\xa1\x93\x6d\x6b\xa7\xc4\xc5\x97\x6b\x2e\xaa\xb7\xaa\xb9\xf6\x82\x28\x1f\x5d\xe0\xad\x35\xd8\xcf\x09\xae\xc1\x30\xfd\xf4\xd6\x06\xac\x95\x7a\xff\x05\x00\x00\xff\xff\x6f\x1c\x02\xb5\xff\x0b\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 3071, mode: os.FileMode(420), modTime: time.Unix(1602298709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4f\x53\xdb\xc6\x1b\xbe\xef\xa7\xf0\xc8\xd7\xdf\xfc\xa6\xe7\xdc\x16\x69\x01\x35\xb2\xa4\x91\xe4\xb4\xf4\xa2\x21\x46\xd3\xd2\x80\xcd\x18\xb8\xf4\x14\x87\x00\x86\x58\x31\x4d\x4c\x0a\x89\x1b\x30\x31\xc1\x93\xc4\x36\x09\x09\x26\x16\x26\x5f\x46\xbb\x92\x4f\x7c\x85\xce\x6a\x65\x21\x43\xdc\x72\x95\xdf\x3f\xcf\xbe\xcf\xf3\x3e\xaf\x93\x99\xdc\xfc\x7c\x2e\x0b\x64\x98\x42\x26\xfa\x59\xd4\x0d\xfd\x4e\x82\xc3\x5b\xb6\x77\x74\x8c\x3b\x9f\x70\x73\x07\x57\x1b\x1c\x10\x55\x53\x56\x8c\xab\x00\xbf\xdd\xc1\xd5\x86\x77\xe2\x78\xce\x9e\xdf\xba\xf0\x7a\xad\x7e\xed\x4b\xff\xef\x03\x5c\x7b\x8f\xd7\x76\xd9\x77\x51\xe5\x00\x48\x66\xe6\x96\x17\x97\xac\x3c\xe0\xa5\xb4\x6e\x20\xcd\x14\x90\x84\x0c\x64\x8e\x43\x51\x42\xc2\x9d\x04\x47\xfe\xda\x27\x27\xdb\xb8\xb8\xdf\xdf\xad\xe3\xde\x73\xbc\x61\x7b\x9b\xa7\xe4\x61\xc1\x7b\xf9\xb8\xff\x6a\xcd\xbb\xa8\x73\x51\xaa\xa8\x07\x20\xb4\xb4\x2c\x8b\xf2\xc4\x9d\x04\xc7\x02\xdc\x33\x1b\x57\x1b\xfe\xb7\x2d\xbf\x56\x72\xcf\x9a\x97\xe7\x85\x1b\x29\x92\xc2\x43\x89\xbe\xab\x7d\x8e\x57\x0f\x59\x5a\xd8\xd8\x5e\xf7\xba\x47\x01\xd0\xbc\x35\x63\x65\x97\x66\xa7\xe7\xc0\x10\x46\x53\x43\xba\x92\xd6\x78\x44\xf3\x19\xcc\xfa\x47\xff\xf3\xe1\xe5\x79\xc1\x6f\x1f\x7a\x47\x3b\xfd\x67\x87\xee\xd9\x13\x52\xdd\xc0\xab\x27\x7e\xa1\xe2\x9e\x39\xa4\xda\xe5\x46\x14\x31\x7f\x51\xe4\xdb\x56\xc2\xe5\xb6\x57\x69\xe0\x52\x50\x6c\x1c\xa6\x25\xc3\xe4\x35\x24\x20\xd9\x10\xa1\x64\xf2\x50\x0e\xde\xc6\xfa\xd0\x69\x38\x3b\x7e\xab\x8e\xd7\x9b\xc4\x6e\xb9\x67\xb6\xbf\xd2\x63\x4d\x82\x81\x80\xe4\x6f\xb9\xc5\x25\x30\xa9\xe8\x86\x09\x25\x0d\x41\x61\xea\x8a\x4d\x06\x39\x46\x77\x88\x3d\x88\x8e\x98\xba\x09\x39\xca\xf3\x9c\x32\x83\x3c\xa0\xec\x66\x01\x73\x6c\xca\x54\x35\xe5\x47\xc4\x1b\xb7\xad\x55\xfb\xea\xbd\x6a\x05\xe8\xf5\x29\xdd\x40\x29\x33\x54\xe1\xb8\x92\x96\x85\x50\x84\xab\x45\x26\x39\x52\xfd\x40\xaa\x5d\x51\x0d\xc2\x65\x85\x86\xc2\x7b\x50\x94\xe0\x98\x44\x67\x23\xaa\x09\xff\xcb\x63\xd2\xdd\xa2\x83\x39\x3d\xe1\x80\xa8\x33\x51\x04\x10\xaf\x64\x18\xe8\x83\xd5\xe2\x00\x00\xc9\xe5\x45\x2b\x0f\x54\xa8\xeb\x3f\x29\x9a\x10\x34\x4f\x41\x83\x9f\x0c\xa4\xb4\xe6\xed\x17\xfa\x95\x5d\xbf\xdd\xe6\x80\xa2\x89\x13\xa2\x0c\xa5\xe1\x90\xa7\x7b\xc3\x51\x69\xfd\x4a\x92\x90\x37\xc4\x7b\x14\x9a\x57\x69\x90\x62\x87\x54\xdf\xe1\x2d\x4a\x77\x30\x8d\x8e\x5f\xa8\xd0\x25\x6a\xd5\xbc\xad\x35\xfc\xe7\x4e\xf0\xaa\x20\x3b\xfe\x7e\x8a\xb9\x59\x67\xf9\x41\x04\x14\x52\xa2\x3c\x4a\x18\x89\xe9\x99\xf9\xd9\x6c\x82\x85\x33\x7d\xf8\x07\xef\x63\x12\x89\xa3\xd3\x90\x04\x0d\x24\xc4\x18\x0b\x61\x7e\xaa\x45\xf2\x64\xfc\x70\x40\x12\xa0\x1a\x35\x4d\xab\x02\x0c\x9a\xd2\xaf\x43\xcd\xdc\x6f\x2d\x52\xf9\x1a\x8a\x31\x6f\xfd\x3a\x9b\xcb\x0e\x64\xa2\xa1\x09\x51\x91\x6f\xb5\x6f\xb8\xd4\xc5\x7b\x7b\x71\x99\xc4\xb6\x04\x24\xff\xc8\x65\xad\x41\x55\xba\x69\xb7\xab\x39\xa8\x30\xa4\xbe\x95\x86\xd7\xfb\xe4\xb7\x6a\xb8\xf8\x6c\xd8\x4f\xd2\x12\xb5\x12\xff\x69\x07\x97\x5f\x50\xef\x29\x1e\x33\xd5\x33\xe6\xc8\x9b\x87\x64\xef\xb0\xbf\x6a\x7b\x3d\xa6\x5d\x31\x05\x27\xd0\xa8\xc4\xed\x2a\x5e\x29\x8f\x48\x04\xc9\xdc\x82\x95\x5d\x5c\x9a\xce\x3c\x00\x13\xc8\x18\x4c\x09\x69\x9a\xa2\x51\xf6\x37\x2e\x58\x11\x36\x12\x1a\xbf\x90\xcf\xfd\x6e\x65\x96\x52\xd6\xfc\x7d\x2b\x1f\xf1\x09\x05\x21\xe2\x8f\xbd\x90\x74\x1c\xbc\xb9\x1f\xcb\x88\xfc\x25\xe4\x7b\x94\x86\x18\xe5\x37\xcc\x65\x90\x35\x09\x75\x33\x9c\x14\x4d\x09\x82\xe3\xbe\x70\x79\x5e\xf8\x8e\x31\x65\x73\x33\x16\x90\x15\x01\x45\xc6\x14\x3a\xbc\x69\x40\xfd\x2e\x65\x6c\xf5\xd4\x75\x5e\xf8\x9b\x8f\xbc\x47\x5f\xc9\xf6\x71\x7f\xbd\x4c\x9e\xdb\x6e\xaf\x4a\x9a\x6f\x70\xb5\x41\x36\x8e\xfc\x5a\xe9\x7f\x09\xbf\xdd\xf1\x9a\x1b\xf8\x62\x15\xb7\x56\x5c\xe7\x03\xfb\x8c\x5b\x25\xd2\xde\xfe\x3f\x6d\x73\x7f\x3a\xf3\x60\x79\x01\x66\x32\xb9\xe5\xec\x12\x50\xa1\x06\x53\x26\x4a\xa9\xc6\x14\xed\x50\x7e\x44\xb6\x8f\x07\xde\x40\x1f\xae\xa7\x55\x55\xd1\x8c\xc0\x1c\x6d\x52\x69\x93\x12\xbd\x48\xde\x47\x07\xbf\x7e\xc2\x01\x7e\x12\xf1\x77\x63\x37\x6c\xbf\xd6\x7f\x57\x8a\x24\x15\xd9\xdf\x18\xe4\xef\xa6\x55\x13\xf2\xbc\x92\x96\x6f\x6b\x84\xb8\xbe\xee\x3a\x3d\xff\xf3\x5b\x5c\xee\x8c\xb0\x43\x90\x5c\x98\x9b\xce\x5e\xbb\x30\xff\x51\x36\xae\xe7\x9b\x65\x63\x97\x7a\x2c\x98\x13\x08\xb1\x8f\x8b\x12\x62\x96\x30\x90\x2f\x33\xdd\xb0\x3e\x85\x4a\x5e\xac\xbb\xce\x29\x5e\xb3\x71\x71\x9d\xd8\x07\x71\xfc\x43\x8b\xc3\x2a\x46\x67\x9b\xb1\xc7\xa2\xbf\x73\xb6\x35\xa4\x1b\x8a\x86\xae\x85\x93\xc2\x01\xae\xdb\x83\xf0\x48\xbf\x9a\xb5\x98\x5b\xce\x67\xac\x9b\x23\x89\x3d\xe3\x5f\xc0\xc7\x49\xbb\x76\xb3\xae\xf4\x3c\x74\xa1\x3e\xbe\x76\xbb\x4f\xaf\xa9\xda\xff\xf6\xca\xaf\x95\x48\xb3\xce\xe4\x19\x42\x9c\x9b\x99\x5e\x60\x1e\x19\x19\x2c\x9b\x24\xde\x2a\x91\xe6\x21\x2e\x1e\x53\x61\x85\x46\xd9\xfd\x21\xf4\x53\x49\x99\x10\xe5\xeb\x19\x91\x9d\xb2\x3b\x1d\x34\x08\xa2\x05\x51\x0f\x0f\x1d\xfb\xeb\xe5\xbd\x2d\x90\xe6\x01\xfd\x89\xa5\x78\xbb\x4e\x7f\x77\x2d\x31\xe2\xb0\x80\x64\x66\x76\x11\xf0\xa2\x1e\x2c\xdc\xf5\x2d\xa4\x48\x07\xff\x0c\xc8\xc6\x7b\x52\x2e\xbb\x67\x4d\xef\xe5\x63\xd7\x71\xf0\x66\x8d\x5e\x49\x00\xfe\x09\x00\x00\xff\xff\x50\xc2\xeb\x20\x46\x0a\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2630, mode: os.FileMode(420), modTime: time.Unix(1602298709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
