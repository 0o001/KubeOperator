// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcb\x72\xa4\x3a\x12\xdd\xf3\x15\x32\x15\xbd\xf3\xdc\x98\xb5\x77\x98\xc2\x36\xd3\x14\x10\x40\xf9\x8e\x67\x43\xa8\x20\xab\x4a\x63\x90\x08\x49\xb4\xa7\xee\x6e\xfe\x6b\xfe\x69\x7e\x61\x22\x85\x78\xd4\xc3\xd3\xee\xb8\xab\x76\x75\x28\x33\x8f\xf2\x71\xf2\x88\x55\x25\xda\x56\x70\x27\xf6\x36\x41\x19\xfc\x3d\xcc\x8b\xfc\x81\xb8\x31\x6d\x81\xd0\x46\x02\xad\x4f\x04\xfe\xc5\x94\x56\xae\x13\xa6\x65\x9c\x14\xf3\xa1\xb4\x01\xaa\x80\xec\x59\xd3\x10\xc6\x89\x3e\x02\x91\x70\x60\x4a\xcb\x13\x09\x53\x22\x86\xff\x52\x27\xa5\xa1\x25\x0a\xb4\x66\xfc\x40\x3a\x7a\x00\xd7\x71\x9c\x55\xd5\xf4\x4a\x83\x74\xfc\x68\x9b\x17\x41\x56\xae\x83\x28\x28\x82\xf2\xc9\x0b\xa3\x60\xfd\x40\xdc\x8a\x72\xc2\x85\x26\x35\x34\xa0\x81\xd8\xe3\x18\xa8\xea\xa5\x04\xae\x89\xd2\x54\x83\x3b\x39\x08\x73\x03\x2f\xdb\xc6\x71\x18\x3f\x3f\x10\xb7\x38\x2e\xcc\x94\x71\x26\x7b\xce\x19\x3f\x5c\x19\x45\x89\xef\x45\x0f\xc4\x0d\xdb\x4e\x48\x3d\x59\x55\x94\xa3\xd5\x0e\x48\xdf\x1d\x24\xad\xa1\x76\x11\xb9\x84\x1a\xb8\x66\xb4\x71\xce\x40\x97\x59\x90\x27\xdb\xcc\x0f\x1e\x88\xfb\x44\x59\x03\x35\xd1\xc2\xe2\xbf\x23\xc5\x11\x24\x20\x0e\xca\x09\x55\x4a\x54\x8c\x6a\xa8\xc9\x51\x28\x4d\x7a\x5e\x83\x24\xfa\xc8\x14\x79\x87\x93\xfb\x89\xdb\xf2\x1f\x49\xfc\x4b\xbe\xff\x10\x1c\x6e\xf8\x7e\xf2\xb6\x51\x51\xfa\x59\xb0\x0e\xe2\x22\xf4\xa2\xd2\xf7\x62\x93\x85\x21\xec\x03\x71\xd7\xb0\xa7\x7d\xa3\xc9\x7c\xd3\x45\x2a\x86\xa0\xb5\x3b\xb4\x8c\xff\x12\xf8\xdf\xe7\xaa\x99\x9c\xcf\x56\x1c\xfb\x68\x36\x35\xfd\x60\x5a\x4b\x99\xbf\x7b\x05\xd2\x9c\x71\x9d\xd4\xcb\xf3\xdf\x93\x6c\x3d\x81\x89\xb7\x11\x56\xa4\xa3\x4a\x7d\x08\x59\x93\xb1\x1f\x76\x40\x76\x0d\xe5\xef\xff\xfd\xcf\xbf\x5d\x27\xcd\xc2\x57\xaf\x08\xca\xef\xc1\xdb\xa5\x21\x22\xe9\x24\xfb\x41\x35\xe0\xc5\x17\x28\x66\x73\x67\x85\xe9\x77\x5e\x92\xbc\x28\xbd\x28\x0b\xbc\xf5\xdb\xdc\xde\x2f\x58\x99\xcb\x19\xb0\x95\x31\x16\xd3\xa5\x6f\x16\x64\xa8\x2c\xd6\xc4\xba\x58\x14\xe6\x83\xe9\xa3\x49\x80\x6d\xb4\x5b\x7e\xcb\xc7\xb7\x32\xcd\x92\xbf\x05\x7e\xf1\xa7\x42\x74\x52\xfc\x13\x2a\xed\x3a\xf9\x5b\x5e\x04\x9b\xd2\x4e\xf1\x53\xb2\x8d\xd7\xb7\x87\xb8\x11\x15\x6d\x70\x82\xf7\x4c\x2a\x6d\x12\x15\x27\x68\xe7\xbd\x7a\x61\xe4\x3d\x46\xd8\x22\xb1\x20\x61\x47\xe8\x0f\xca\x1a\xba\x6b\xc0\x75\xc2\x7c\x98\x22\x73\x87\xc5\xfc\xb2\x61\xa4\x06\xa7\x08\xd8\x1d\xf2\x1d\x6e\xd2\x24\x2b\xca\x20\xcb\x92\x6c\xac\x59\x2c\x48\x4d\x35\xc5\x6b\x5a\xb3\x0f\xaa\xc8\x5e\xf4\xbc\xbe\x23\x16\x69\x75\x84\xea\xdd\xe0\xb4\x47\xf6\xac\x81\xbb\x73\xa7\xe8\xae\x7c\xf5\xa2\x2d\x22\x0d\xda\x4e\x9f\x06\xbf\x82\x93\x86\x71\x20\xdf\xd4\xf9\xf9\xdf\xb3\x24\x7e\x2e\x9f\x92\x6c\xe3\x21\xf4\x90\x57\x42\x4a\xa8\x34\x19\x02\x08\xd9\x52\xfd\xa9\xf1\x62\x90\x96\x89\xf5\x17\x53\x20\xf4\x70\x89\x4f\x7d\xd8\x92\xc7\xdb\xcd\x03\x71\x3d\xa2\x85\xa6\x0d\x11\x7b\xf2\x4d\x11\x29\x3e\x14\xfe\x69\x2e\x40\x25\x10\xba\xe3\x08\xa8\xb9\x27\xea\x9d\x75\x37\xfd\xe4\xde\xeb\x39\x51\x28\xfa\xc3\x76\xcb\x37\x75\x4f\x24\x50\x25\xf8\x03\x82\x70\x9c\x15\x0e\xe1\x3c\x7e\x78\x85\x8d\x57\xf8\x2f\xe3\x08\x8d\xf3\xc7\x14\x61\x63\x5e\x5c\x27\xc9\xc2\xe7\x30\xb6\x57\x5e\x9e\x17\x92\x1d\x18\xa7\xcd\x67\x86\xdb\x7c\x66\x5d\xcf\x2f\x42\x03\xb4\x18\xb9\xc0\xd2\x34\x70\xec\xa9\x45\xcd\x05\xd7\xb4\xd2\xa6\xea\xb4\x6e\x19\xc7\x25\x43\xb5\x90\x77\xd6\xe1\x32\xf1\xb1\x20\xaa\xaf\x8e\xc6\xa1\x69\x5e\x6f\xbd\x09\xe3\x6b\x92\xc3\xa0\xb5\x25\x3a\xe3\x74\x80\x70\x45\x74\x77\xe7\xa0\xb3\x20\xf2\x8a\x60\xbd\x98\xcd\x2d\x9a\x1d\x29\x42\x5f\x4e\xa0\x1d\x3c\x03\x21\x5a\x7b\xe9\x84\x60\x9b\xae\xbd\x09\x41\x53\xd3\xee\x32\x30\xd4\x6c\x88\xfb\x1a\x64\xe1\xd3\x5b\xe9\x27\xeb\xc5\x62\x7c\x05\xc9\xf6\xac\xa2\x9a\x09\x4e\x2a\x51\x03\x01\x29\x85\x74\x9d\x60\xe3\x85\x51\xb9\x0e\x73\x3b\xa2\x1b\xca\x9a\x71\xef\x2a\xd3\x3a\x35\x53\x5f\x4c\xec\xe8\x6d\x59\xde\xa0\x45\x87\x2d\xd5\xd5\x91\xec\x4d\x6b\x0d\xdc\x80\x6b\x60\xea\x9f\x1c\x7f\x4d\x58\x31\x35\xff\x67\x07\x8c\x3d\x72\xe9\xc4\x90\xc2\x03\x71\x3f\xa4\xe0\x87\x79\x4b\x10\x21\x17\x26\x03\x40\x43\xd7\x13\xb8\x4b\xba\x76\x56\xa8\x48\x04\x1f\xf9\x35\x0b\x9e\xc3\x24\xfe\xea\xbe\x26\x83\xf1\xcf\x18\x16\xd7\x2c\x86\xc2\x7f\xc7\x40\xb8\xaa\xbf\x1c\xc6\xec\xe9\x9f\xd1\x78\x43\xf9\xb9\x6c\x19\x28\xd3\x1f\x12\x7b\x00\xbd\x5c\x28\x37\xd8\xb2\x12\x7c\xcf\x0e\xbd\x34\x7d\x63\x0a\x17\x6e\xbc\xe7\xe0\x73\x57\xac\xa5\x07\xf8\x9a\xa3\xb4\xcc\x5f\x92\x6c\xa0\x4e\xd5\xef\xf7\xac\x62\x28\xd0\xc2\x0e\xd3\x22\x3a\xe0\x4a\xd3\xea\xdd\x79\x0e\x8a\xb1\x02\x63\x85\x63\x31\x26\xd9\x10\x24\x9e\xb7\x73\xb3\x81\x76\x07\x72\x1a\x3d\x6f\x8d\xfd\xf4\x4d\x91\x69\xda\x76\x00\x9c\xd0\xda\x88\xb2\xe5\x80\x8e\x3c\xf0\x4d\x9d\x71\x8a\xf1\x6f\xb7\xbe\x0d\x31\x69\x21\x3b\xcb\x9f\x0b\x21\x6b\x70\x4b\x05\x8d\xb6\x2f\x5e\x5e\xda\xf2\xe0\x5a\xb5\x06\x8b\x52\x4e\xa5\xf1\x6f\x30\x8c\xb3\xe2\xa2\x06\x27\xc6\x49\x1f\x95\x88\x55\xb2\x65\xe1\xe5\xdf\x71\x2d\xd4\x35\xc1\x43\x38\x05\x56\x14\x9b\x9f\x63\xd7\x58\x6d\x7b\xdf\x0d\x05\xfb\xa0\x4c\x13\xa6\x49\x2d\x38\xfc\x86\x01\x76\xb4\x7a\xef\x3b\xaf\xaa\x44\xcf\xb5\x93\x7a\x99\xb7\x29\x83\x4d\x5a\xbc\x5d\x96\xad\xa3\x92\xb6\xa0\x41\x2a\x5c\xfc\x45\x99\x6f\xd3\x74\xa8\xee\x96\xab\xbe\xc3\x9d\x88\x3d\x7c\xea\x50\x7c\x9f\xcb\xbf\x33\x6e\x1a\x38\x62\xd2\x36\x8f\x9e\xff\x7d\x9b\x96\x9e\xef\x27\xdb\xf8\x57\x54\xce\x19\xf0\x2f\xcb\x1d\x67\x85\x23\x73\x21\xa5\xbf\x10\x0d\xad\x7e\x21\x88\xad\xea\xa3\xc1\xe8\xd8\x3b\x3e\x85\x51\x90\x2f\xc5\xa8\x1d\x22\x5b\x36\x3d\x5d\xca\x88\x17\xb2\x83\xbd\x90\x40\xd4\x07\xd3\xd5\x11\x1f\x49\x8b\x03\x74\xb8\xf6\xd9\xe8\x0f\x51\xae\x5f\x38\x3b\x40\x63\x34\x84\x9a\xf4\x9d\x69\xf6\x85\x59\x16\xe4\x45\x92\x05\xd7\x76\x12\x94\x16\x92\xf1\xc3\xf9\x78\x64\xa0\x44\x2f\x2b\xb8\xce\xe1\xe2\x9a\x3f\xbd\xdc\x2c\x22\x6f\x6b\xdc\x79\x66\x26\x45\x3b\xa6\x7e\x07\x8d\xc0\xd5\xa5\xc5\x39\xb7\x15\xf8\x98\x11\x1d\x48\xbb\x03\xa7\x79\xea\x40\xa2\x58\x33\x13\x35\xc8\xa2\x2b\x4a\x78\xb1\x92\x79\xa2\x04\xd7\x99\xde\x57\x03\xcd\x04\xf6\xe4\x78\x7d\xd3\x0c\x03\xcd\xa4\x91\x17\xdf\xf0\x99\xda\x96\x59\xf8\xbc\x68\xf6\x6b\x9b\xc7\xcb\xa6\x5e\x18\x3b\x2b\x54\x05\x83\x68\x98\x98\x6d\x68\xa4\xfc\xc4\xab\xa3\x14\x9c\xfd\x81\x25\x56\x20\x87\xc5\xfe\x57\x2b\x31\xa2\xe4\x39\x8c\x2f\x6d\xb6\x4b\x65\x85\x8b\xf1\xce\x9e\x9e\xa5\x42\x31\x3f\xd4\x3b\x29\x8e\x6c\xc7\xb4\x22\x78\xc6\xc6\xd8\x4b\xd1\x92\x46\x1c\x0e\xd8\x60\x8c\xff\xf6\x15\x61\xe6\xac\x2a\xa6\x1c\x3f\xcc\x0d\x81\x5d\xb2\x1a\xbe\x10\x98\x22\x9a\xaa\xf7\x4b\x06\x43\xd3\x1f\xad\x6f\xd6\x8c\xf3\xba\x29\xfd\x24\x7e\x0a\x9f\xe7\x87\x99\xbf\x5c\x40\x57\x2b\x7f\x36\xb8\xfc\xa2\x50\x5c\x2e\xaf\xcf\x1a\xad\x86\xae\x11\xa7\xd6\x70\x61\x43\xf9\x17\x1b\xce\x59\xb1\x0e\x57\xe1\x84\x13\xe3\x01\xd7\x20\xa1\xc6\xd7\x94\x82\x83\x71\x89\x10\x1a\x56\x69\x35\xf3\x89\xc1\x8e\xa9\x9d\x8f\xdd\x93\xee\xfc\x65\x46\x0f\x94\xf1\xe9\x23\xcc\xf2\x29\x16\xa6\xf8\x4e\x40\x84\x55\xd5\x77\x0c\x6a\x42\x79\xbd\x00\x29\xc1\x78\xaa\x07\x88\x7f\xe9\x84\x68\xd0\x4d\x9a\x24\xd1\xcd\x1c\x85\x29\xc1\x33\x8b\x25\x7b\x83\x02\xa7\x97\xdf\xa0\x5e\xce\x23\x4e\xcb\x71\xd0\x5f\x4a\xcb\x93\x83\x8b\x3f\x2f\xb2\xb7\xeb\x87\x76\xb1\xfc\x70\x24\xf6\xc3\xb7\x0a\x2a\xab\x23\xd3\x50\xe9\x5e\x82\xd9\x35\x37\xb4\x9d\x25\x84\x89\xa7\x46\xae\x4b\xb3\xe4\x35\x5c\x07\xd9\xa4\x32\xa6\xef\x39\x12\xcc\x2d\x30\x9d\xbd\x16\x2d\xd5\xac\x22\x2d\x2e\x51\x8b\x9d\xd6\xc3\x17\x19\x45\x5a\xca\x7b\xda\x34\xa7\x05\x3d\x14\x6f\x69\x30\xb9\x2c\x4c\xc7\xd7\x76\x11\x8e\xe3\x35\xad\xc7\x3b\x92\xf0\xe6\x34\xfe\x56\x04\xd9\xe8\x9e\x9c\xb3\x82\xfb\xbf\x00\x00\x00\xff\xff\xae\xa1\xb9\x0e\x7c\x13\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4988, mode: os.FileMode(420), modTime: time.Unix(1617697920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x5f\x57\xe2\x48\x16\x7f\xcf\xa7\xe0\xc0\x99\xb7\xd9\x3d\xfb\xdc\x6f\xe9\x10\x35\xdb\x21\xc9\x49\x82\xb3\xee\x4b\x8e\x43\xb3\xb3\xee\x28\x70\x44\xf7\x9c\xdd\xa7\xa1\xfd\x03\xd8\x44\xdc\x6e\x75\x5b\x65\x5a\xb0\xb5\x9b\xd1\x01\xfc\x33\x2d\x34\x41\xfd\x32\xa9\x4a\x78\xf2\x2b\xec\xa9\xaa\x24\x14\xd0\xcc\xfa\x08\xb9\xbf\x5b\xb7\xee\xbd\xbf\xdf\xbd\x15\x49\xa4\x97\x96\xd2\x29\x46\x62\x63\xbc\xc1\xff\x45\xd0\x74\xed\x59\x28\x0c\x76\x4c\xe7\xd3\x25\x68\x5f\x83\xc6\x3b\x50\xa9\x87\x19\x41\x31\x24\x59\x1f\x18\xb8\xad\x36\xa8\xd4\x9d\x1b\xcb\xb1\x8e\xdd\xe6\xbd\x73\xd7\xec\xd7\x3e\xf7\x7f\x3e\x01\xb5\x0b\xb0\x79\x60\x5b\x6f\x41\xf7\xad\xa0\x84\x19\x26\x92\x58\x5c\xcd\xae\x24\x97\x19\x4e\x8c\x6b\x3a\xaf\x1a\x51\x5e\xe4\x75\xde\x98\x62\x05\x91\x8f\x3e\x0b\x85\xe1\x7f\xab\xf0\x66\x0f\x14\xaa\xfd\x83\x53\x70\xf7\x16\x14\x4d\x67\xeb\x16\xfe\x94\x73\x0e\xd7\xfb\x47\x9b\xce\xfd\x69\x38\x80\x0a\x1a\x0e\x42\x8d\x4b\x92\x20\x4d\x3f\x0b\x85\x89\x81\xdd\x31\x41\xa5\xee\x3e\xec\xb8\xb5\x92\xdd\x69\x3c\xf6\x72\x63\x10\x51\xe6\x58\x11\xdd\xab\xd5\x03\x1b\x67\x04\xe6\x1d\x6c\xe6\x9d\xee\x27\x1c\xe8\x72\xf2\x65\x32\xb5\xb2\x30\xbf\xc8\x0c\xc5\x68\xa8\xbc\x26\xc7\x55\x8e\x47\x78\x12\xe6\xe9\x95\xfb\xdb\xd9\x63\x2f\xe7\xb6\xce\x9c\x4f\xef\xfa\x6f\xce\xec\xce\x6b\x58\x29\x82\x8d\x1b\x37\xb7\x6b\x77\x2c\x58\xe9\x86\x27\x38\x31\xfe\x2a\x4b\x4f\xf5\x04\xca\x2d\x67\xb7\x0e\x4a\xd8\xd9\x14\x1b\x17\x75\x83\x53\xf9\x28\x2f\xe9\x02\x2b\x1a\x1c\x2b\xe1\xbb\x91\x73\x50\x36\xac\x77\x6e\xf3\x14\xe4\x1b\xd0\x6c\xda\x1d\xd3\x5d\xbb\x23\x87\xe0\x84\xe0\xfa\x72\x33\x3c\xf7\x62\x90\x7a\x72\x22\xa9\x35\x01\xd8\x9d\x6d\x67\xb7\x0e\x0b\x6d\xf4\xe7\x51\x07\xec\x94\xc2\x8c\xc2\x6a\xda\x77\xb2\x1a\x0d\x0e\x94\xe2\x22\xc9\xe5\xa6\x53\xcd\xf9\xb8\xae\xf3\x4b\x17\x1f\xa4\xa8\xc2\x2c\xab\xf3\xc6\x0b\x7e\x6e\x14\xe1\xdf\x70\x04\xc1\x30\x91\xbf\xa7\xb3\x2b\xcc\x8c\xac\xe9\x06\x2b\xaa\x3c\x1b\x9d\x1b\x74\x1a\x49\x27\xd5\x8a\x5e\x5e\xb1\x75\x70\x95\xf1\x74\x06\x38\xc7\x2a\x93\x74\xfa\xed\x34\xee\xc0\x78\x3e\x67\x28\xaa\xfc\x67\x9e\xd3\x9f\xea\xab\xf6\xc5\x39\x6a\xe2\xf0\xb5\x39\x4d\xe7\x63\x86\xc7\x90\x29\x39\x2e\x45\x3d\x82\x6c\x14\x08\x1d\x60\xe5\x57\x58\xe9\x0a\x0a\x29\x84\x8c\x4c\xd9\x59\x56\x10\xd9\xe7\x22\xaa\x9b\xa0\x84\xdc\xcf\xeb\xb0\xbb\x83\x32\x73\x7b\x13\x66\x04\x8d\x34\x2c\x0e\x11\xfb\xf2\x22\xb0\x3b\xdb\x84\x5a\x21\x41\x09\x81\xcd\x6b\xe7\x3c\xf7\xd8\x2b\xc1\xca\xb9\xbb\x76\x07\x0b\x3b\x60\xeb\x18\xb6\x2d\xb0\x55\x0d\x93\x5c\x0a\x31\x45\x56\x75\x83\x57\x55\x59\xf5\x6b\x00\x2b\xe7\xb0\x78\x0f\x0a\x97\xa0\xdc\x22\x6c\x70\x0e\xd7\xe1\xde\x25\x34\x9b\xf8\xae\x6d\xf8\xe1\x27\x78\x7c\x46\x3e\xc1\xfd\xbc\x6d\xdd\xe2\xb0\x69\x87\xc8\x95\x31\xcb\x8a\x71\x14\xfd\x37\xd9\x90\x5b\x2b\xc1\x4a\xd1\xf9\xa5\x4b\xfc\x0c\x1b\x7f\xa7\xca\xd2\xb4\x31\x25\xab\x31\x56\x0f\xcc\x9d\x8b\x16\x28\x7f\x80\xd5\x1e\xe8\x95\xed\x8e\x09\x1b\x1f\x9c\xda\x08\x8e\xea\x74\x3a\xaf\xde\x71\xc5\x7b\xc4\xfa\xc2\x25\x68\x6d\xf6\xdf\x9c\x0d\x23\xbd\x9a\x4a\xf1\x18\x2a\xe6\xc6\x55\xc8\xc3\xe0\xe0\xc8\x69\xa0\xd3\x79\xec\x95\xdc\xf6\x8d\xfb\x90\xff\x2a\x58\x63\x67\xf9\xa0\xf9\x90\x03\xfb\xe1\x67\xd4\x80\x5e\x53\x94\xc0\xf6\x31\x38\xaa\x3e\xf6\x0e\xbf\xc9\xe2\x06\x5e\xcd\x26\x97\x07\x4c\x41\x01\xc7\x58\x9d\x9b\x09\x68\xd2\xdf\x3d\x70\x5b\xad\x30\x23\xab\xc2\xb4\x20\x79\x77\x0a\x4c\xb6\x8f\x87\xad\xe2\xda\x40\xba\x58\x4e\x17\x70\x2c\x84\x98\xb0\x72\x0e\x76\x90\x2c\x90\x6a\xb9\xb9\x5d\x24\xc2\xcd\x9a\xb3\xb3\x09\xfe\xf3\x0e\x97\x0a\xa3\xe9\x9c\x21\xa5\x6b\x9c\x12\x3c\xb6\x60\xa3\x31\x41\x9a\x24\x20\xa1\xf9\x97\x4b\x0b\xa9\x10\x31\x27\x64\x75\x4f\x2e\x28\x29\xa1\xa3\x53\x79\x91\xd5\xf9\x28\xc5\x1e\x2f\xcc\xeb\x5a\x20\x63\x84\x2b\x61\x46\x8c\xb2\x4a\x70\x68\x5c\x89\xb2\xf8\x50\xf4\xef\xd0\x61\xf6\x43\x13\xee\x7e\xc1\x27\xcd\xf2\xaa\x30\x35\x67\x70\x72\x94\x1a\x18\xfd\xf3\x92\xdb\xca\x51\xd9\xe2\x63\xac\x20\x1a\x51\x41\xf3\xf8\xd4\x7f\xd5\xb4\xad\x5b\x32\x95\xdc\x93\x0b\xe7\x63\x6e\x52\xba\x7c\x2c\x5d\x0c\x82\x06\xa5\x2f\xfd\x0d\x33\xd0\x00\x4f\x3f\x83\x02\x6b\xe8\xd7\x40\x47\x7d\xc9\x0c\x44\x94\x94\xd3\x57\xd0\x61\x2c\xa6\x23\x8d\x82\x85\xfd\xe1\xf2\x93\xa0\xb0\x02\x92\x80\x9c\xe6\x15\x25\x80\x0c\x13\x59\x4e\xfe\xb0\x90\x4e\xf9\x4a\xa6\xf2\xd3\x82\x2c\x3d\x69\x5c\x81\x52\x17\x1c\x1f\xd3\x4a\x46\x0d\x19\x26\xf2\xef\x74\x2a\xe9\x7b\x45\x83\xea\x69\x3e\x7d\x0f\x43\x02\xb9\x56\x77\xee\xae\xdd\x66\x0d\x14\xde\x0c\x8f\x63\xa2\x43\xee\x76\x1b\x94\xf7\x09\x89\x89\x30\xd3\xf2\xd3\xdf\x30\x9d\x3b\x22\xaf\x42\x8c\x9d\xe6\x27\x01\xf7\x2a\x60\xad\x3c\x09\xa8\x18\xda\x8c\xac\xa2\x14\x0a\x99\x90\xaf\xad\x0c\x13\x49\x67\x92\xa9\xec\xca\x7c\xe2\x47\x66\x9a\xd7\xfd\xe4\xf9\x55\x19\x28\x0b\xce\x14\x4a\x4a\x66\x39\xfd\x8f\x64\x62\x25\x96\x5c\xfa\x3e\xb9\x1c\x74\x3f\x1b\xf5\xe4\xc8\xab\x23\xbe\xbb\x2f\xbf\x34\x45\x28\xe5\x0a\x28\x4c\x24\x98\x4c\x3f\xdf\x7f\x30\xe3\x3d\x2e\x4d\xe2\x27\xa1\xd3\xd8\x80\xf7\x51\x33\xac\x66\x78\xe9\x46\x10\x6c\x4c\xcf\xbf\xc7\x5e\x6e\x0c\xcb\x44\x52\xe9\x97\x49\x46\x42\x3c\xf3\x07\xb0\xb7\x65\x19\x3a\xab\xbd\xc0\x3a\x7a\x6b\x5b\xfb\xee\xd6\x2b\xe7\xd5\x17\xb8\x77\xd9\xcf\x97\xe1\x5b\xd3\xbe\xab\x20\x31\xad\xd4\x61\xf1\x93\x5b\x2b\x7d\x1b\x72\x5b\x6d\xa7\x51\x04\xf7\x1b\xa0\xb9\x66\x5b\xbf\x92\xbf\x41\xb3\x04\x5b\x7b\x7f\x44\xc7\x7c\x3f\x9f\xf8\x71\x35\xc3\x26\x12\xe9\xd5\xd4\x0a\xa3\xb0\x2a\x1b\x33\xf8\x98\xa2\xcf\xa1\x13\xca\xaf\xe0\xde\xa5\x5f\x27\x74\x71\x2d\xae\x28\xa4\x80\x48\xb5\x77\x5b\xb0\x84\xb6\x42\xe7\xca\x02\xef\x5f\x87\x99\x91\x65\x06\x56\x6b\xfd\xf3\x12\xc5\x58\xaf\x8d\x9f\xb3\xdc\x8b\xb8\x62\xb0\x1c\x27\xc7\xa5\xa7\x0e\x7c\x70\x9a\xb7\xad\x3b\xf7\xb7\x8f\xa0\xdc\x9e\x30\xf6\x99\x48\x66\x71\x3e\x35\xb2\xe5\xfd\x1f\xb7\x34\x29\xc6\xdd\x52\xdb\xf2\x73\x9c\x27\xc6\x8b\x7d\x4a\x10\x79\x8d\x5e\xa4\xbc\xe5\xc2\xf3\x8f\x42\x25\x93\x1a\x6c\x9a\xa0\x90\x87\xe6\x09\x1d\xff\x10\xfb\x88\xc7\x60\x75\x26\xd5\x23\xd6\x5f\x59\x9d\x55\x5e\xd3\x65\x95\x1f\x31\x87\xb9\x13\x70\x6a\xfa\xe6\x41\xff\xaa\xc9\x6c\x7a\x75\x39\x91\x1c\x4f\x09\x75\x8d\xdf\x09\x9e\x2e\xda\xc8\x6e\x36\xe8\xe7\xa1\x4d\xec\xea\xbd\xdd\xdd\x1e\xe9\x6a\xf7\xe1\x08\xcd\xfa\xc6\x29\x69\x4f\x6a\x77\x19\x63\xa3\xbf\x53\x99\xbe\xb0\x06\x3b\x3a\xa1\x37\xef\xef\x1b\x78\x39\x03\xed\x6b\x9f\xdd\x8a\xc8\x4a\x5f\xf1\x47\x57\x97\xf2\x3a\xd2\x80\xe3\x38\xba\x58\x14\x8e\x89\x2c\xbe\x9c\xcf\x90\xa9\x19\xe8\x89\xb7\x7a\xef\x94\x60\xe3\x0c\x14\x2e\x11\x1d\xbc\xd1\xd9\xfd\x93\x37\x61\x45\x79\x5a\x90\x46\x11\xc1\x80\x25\xde\x71\x5a\xb0\xf5\x60\x6c\x92\xc7\x9c\xf3\x31\x07\x1b\x27\xe8\x13\x81\x38\x07\x56\xff\x60\x33\x34\x61\xd5\x60\x22\x89\x85\x2c\xc3\x09\x1a\x96\x89\x51\xed\x40\x91\xfa\x63\x0b\x16\x2f\x60\xb9\x6c\x77\x1a\xce\xe1\xba\x6d\x59\x60\xab\x86\xd0\xff\x5c\xe2\xd2\xa9\xbf\x2d\xfc\xc0\xcc\xc6\x0c\x4e\x96\xa6\x84\xe9\xc1\xe2\x4f\xa4\x9c\x9a\x7b\x03\x9b\xd1\x37\x64\x60\x3a\xe8\x0a\xaa\x16\xbf\xdb\x1b\x4c\x64\x21\x83\x46\xc5\xe0\xe9\x8b\x57\x76\xe7\x70\x5d\x50\x60\xf3\x33\x9a\xe5\xed\x6b\x58\x29\xe2\x5f\xc1\xca\xed\xb6\xda\xfd\xbc\x09\xf7\x2f\x89\x75\xf0\x3e\x1e\x59\xeb\x51\xf3\x9c\x5c\x00\xb3\x8a\x17\x90\x52\xb0\x4c\xf5\xf3\x5b\x70\xf7\x9e\x1c\xfe\x87\x4c\x3a\xbd\x88\xf0\x8a\x2c\x8b\x63\x37\x13\x32\x21\x78\x55\xfd\xea\xbc\x46\x9b\x3f\xf5\x76\x0e\x7b\x6b\x41\x76\x65\xf9\x5f\x0c\x1a\x6a\x9a\xae\xce\x8d\x3f\xa7\xdc\xd6\x19\x7c\x7f\x0b\xdf\x7b\x32\x8a\xab\x81\x5e\x14\xde\x11\x41\xef\x79\x42\x14\x90\xda\x57\x05\x45\x95\x67\x85\x28\xaf\x06\x03\xd3\xcd\x9f\x83\xad\x3a\xac\xd7\x40\xaf\x0c\x0a\x47\xc0\xea\x06\x2f\x77\x72\x5f\x58\x7c\x8d\x0c\x30\x77\xfc\xb7\x71\xc0\x34\x7d\x4e\xe1\x03\x57\x81\xca\x13\xe3\x40\xeb\x51\x01\xad\x0d\xf2\x29\x84\xc8\xfc\xed\x30\xa7\xc2\x0c\xf3\xbf\x00\x00\x00\xff\xff\x3a\x45\x4c\x64\xc7\x10\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 4295, mode: os.FileMode(420), modTime: time.Unix(1617697899, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
