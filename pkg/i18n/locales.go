// Code generated for package i18n by go-bindata DO NOT EDIT. (@generated)
// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcd\x72\xa3\x3a\x16\xde\xf3\x14\x0a\xa9\xde\xf5\xa4\xee\x6c\xb3\x23\x98\x24\x4c\x63\x70\x01\xce\x9d\xdc\x0d\x25\xc3\xb1\xad\x09\x48\x8c\x24\x3a\xed\xbb\x9b\xf7\x9a\x77\x9a\x57\x98\x3a\x92\xc0\xf8\x27\xd5\xe9\xba\x9b\xee\x24\xa5\xf3\xa3\xf3\xf3\x7d\x9f\xb8\xad\x45\xd7\x09\xee\xa5\xc1\x32\xaa\xa2\x7f\xc6\x45\x59\xdc\x13\x3f\xa5\x1d\x10\xda\x4a\xa0\xcd\x81\xc0\x0f\xa6\xb4\xf2\xbd\x78\x55\xa5\x59\x79\x3c\xb4\x6a\x81\x2a\x20\x5b\xd6\xb6\x84\x71\xa2\xf7\x40\x24\xec\x98\xd2\xf2\x40\xe2\x15\x11\xf6\x4f\xea\xa0\x34\x74\x44\x81\xd6\x8c\xef\x48\x4f\x77\xe0\x7b\xde\x6d\xdd\x0e\x4a\x83\xf4\xc2\x64\x5d\x94\x51\x5e\x2d\xa2\x24\x2a\xa3\xea\x31\x88\x93\x68\x71\x4f\xfc\x9a\x72\xc2\x85\x26\x0d\xb4\xa0\x81\xb8\xe3\x18\xa7\x1e\xa4\x04\xae\x89\xd2\x54\x83\x3f\x39\x88\x0b\x93\x5d\xbe\x4e\xd3\x38\x7d\xba\x27\x7e\xb9\x9f\x99\x29\xe3\x4c\x0e\x9c\x33\xbe\xbb\x30\x4a\xb2\x30\x48\xee\x89\x1f\x77\xbd\x90\x7a\xb2\xaa\x29\x47\xab\x0d\x90\xa1\xdf\x49\xda\x40\x63\x32\x97\xd0\x00\xd7\x8c\xb6\xde\x49\xd2\x55\x1e\x15\xd9\x3a\x0f\xa3\x7b\xe2\x3f\x52\xd6\x42\x43\xb4\x70\xf9\xdf\x90\x72\x0f\x12\x30\x0f\xca\x09\x55\x4a\xd4\x8c\x6a\x68\xc8\x5e\x28\x4d\x06\xde\x80\x24\x7a\xcf\x14\x79\x83\x83\xff\x81\xdb\xea\x8f\x2c\xfd\x25\xdf\x7f\x0a\x0e\x57\x7c\x3f\x06\xeb\xa4\xac\xc2\x3c\x5a\x44\x69\x19\x07\x49\x15\x06\xa9\xa9\x82\x0d\x7b\x4f\xfc\x05\x6c\xe9\xd0\x6a\x72\xbc\xe9\xac\x14\x36\x68\xe3\xdb\x89\x09\x9f\xa3\xf0\xdb\xb1\x6b\xa6\xe6\x47\x2b\x8e\x63\x74\x34\x35\xe3\x60\x26\x4b\x99\x9f\x07\x05\xd2\x9c\xf1\x3d\xcf\xbb\xc5\x52\x78\xcf\x59\x51\x56\x41\x92\x47\xc1\xe2\xf5\x38\x69\xcf\x58\xa5\xf3\x71\x74\x55\x32\x16\x53\x02\x57\x8b\x63\xab\x8c\xf5\x71\x2e\x66\x45\x7a\x67\x7a\x6f\x92\x71\x4d\xbf\xe6\xb7\x7a\x78\xad\x56\x79\xf6\x8f\x28\x2c\xff\x52\x88\x5e\x8a\x7f\x41\xad\x7d\x2f\x58\xad\xac\xff\x78\xb9\xca\xf2\xb2\x7a\x8c\x93\xa8\x2a\xe2\x3f\xa2\x2a\xca\xf3\x2c\xbf\x27\x7e\xc6\xdb\x03\x6e\x16\x28\x63\xce\x38\xf9\xfb\x6f\xcb\x07\xac\xa5\x1d\xc7\x56\xd8\x71\xbc\xea\xe9\x31\xcb\x97\x41\x79\xea\x0b\xe3\xdf\xfd\x68\xd5\x9d\xf9\xf7\x87\xf1\x4d\xb6\x42\x76\x54\x5f\x7a\x2d\x5e\x8b\x32\x5a\x56\x6e\xe1\x1f\xb3\x75\xba\xb8\xbe\xef\xad\xa8\x69\x8b\xcb\xbe\x65\x52\xe9\xff\xfd\xf7\x3f\xbe\x97\x66\x68\x17\xbc\x04\x71\x12\x3c\x24\x38\x4e\xa9\x20\x71\x4f\xe8\x77\xca\x5a\xba\x69\xc1\xf7\xe2\xc2\x6e\x9c\xc9\x7c\xb6\xeb\xcc\xae\x9f\x75\x8a\x05\xf5\xbd\xf9\xdd\xcc\x7d\xaa\x74\x9d\x24\xd6\x69\x43\x35\xc5\x36\x38\xb3\x77\xaa\xc8\x56\x0c\xbc\xb9\x21\x2e\xd3\x7a\x0f\xf5\x9b\xc9\xd3\x1d\xc1\x4b\xdf\x9c\x3a\x45\x77\xd5\x4b\x90\xac\x31\xd3\xa8\xeb\xf5\xc1\xfa\x15\x9c\xb4\x8c\x03\xf9\xa2\x4e\xcf\xff\x9e\x67\xe9\x93\xab\x30\x22\x06\xaf\x85\x94\x50\x6b\x62\x03\xd8\x82\x7e\x64\x3c\x5b\xba\x79\x61\xc3\xd9\xc6\x08\x6d\x2f\xf1\xa1\x0f\x37\x92\xe9\x7a\x79\x4f\xfc\x80\x68\xa1\x69\x4b\xc4\x96\x7c\x51\x44\x8a\x77\x85\x3f\x9a\x0b\x50\x09\x84\x6e\x38\x26\xd4\x7e\x25\xea\x8d\xf5\x57\xfd\x14\xc1\xcb\x29\xa8\x28\xfa\xdd\x4d\xf3\x17\xf5\x95\x48\xa0\x4a\xf0\x7b\x4c\xc2\xf3\x6e\x71\x61\xbd\x55\x50\x14\xbf\x67\xf9\xc2\x5c\x61\x19\x94\xe1\xb3\x5b\xfc\x9e\x2a\xf5\x2e\x64\x83\x6b\xc0\xc6\xba\xf8\x5e\x96\xc7\x4f\x71\xea\xae\x3c\x3f\x2f\x24\xdb\x31\x4e\xdb\x8f\x0c\xcb\x2c\xab\x96\x41\xfa\x6a\x52\x5d\xe7\x11\x22\x41\x29\x04\xe9\x28\x3f\x90\xad\x4d\x98\x6a\x0d\x5d\xaf\xd5\xdd\xd8\x73\x24\x1f\xba\xa3\x66\x3e\x25\x00\xe9\x18\x1f\x34\x28\xd2\x52\x0d\xd2\x0c\xe8\xba\x38\x02\x7f\x10\x96\xb1\xb9\x7f\x39\xc2\x91\x63\x0a\xe0\x38\xaa\xb3\x51\x12\x5c\xd3\x5a\x9b\x61\xa2\x4d\xc7\x38\xd2\x1c\xd5\x42\xde\x38\x87\xf3\x7e\xa6\x82\xa8\xa1\xde\x1b\x87\x26\x64\xb0\x58\xc6\xe9\x25\xce\x62\xd0\xc6\x61\xad\x71\x6a\x53\xb8\xc0\xda\x9b\xd3\xa4\xf3\x28\x09\xca\x68\x31\x83\xa4\x35\x9a\xed\x29\xa6\x3e\x07\x1e\x87\x37\x26\x85\x64\x11\xac\xa6\x0c\xd6\xab\x45\x30\x65\xd0\x36\xb4\x3f\x0f\x0c\x0d\xb3\x71\x5f\xa2\x3c\x7e\x7c\xad\xc2\x6c\x31\xe3\xe6\x17\x90\x6c\xcb\x6a\xaa\x99\xe0\xa4\x16\x0d\x10\x90\x52\x48\xdf\x8b\x96\x41\x9c\x54\x8b\xb8\x70\x9b\xbf\xa4\xac\x1d\x99\x5f\x99\x89\x6c\x98\xfa\x64\x61\x47\x6f\xf3\xa9\x89\x3a\x74\xd8\x51\x5d\xef\xdd\x00\x58\xc8\x41\x26\x9a\xc6\xb2\xc0\xdf\x4e\x18\x69\x9a\x2f\xa5\x25\xf0\x9d\xde\x93\x46\x80\xed\x73\x07\xa0\x47\x89\x22\xe1\xdf\x03\x93\xd0\x01\x47\x7a\xc1\xb8\xc5\x7a\x65\xf7\xf6\x39\x48\x9f\xa2\x2a\x2b\x9f\xa3\x1c\xa7\xf0\x55\x0c\x63\xb1\xea\x3d\xe5\x3b\x4b\x6d\x63\x18\xb3\x83\x42\xef\x41\x9a\xb2\xaa\xf3\x04\x47\x5c\x7e\x97\x82\xef\x8e\x24\x48\x84\x9c\x5c\x8c\x97\x37\x0c\x38\x5d\xfc\x9c\x01\xbd\x5b\xd4\x5b\x82\x8f\x94\x95\x47\x4f\x71\x96\x7e\x56\x8e\x10\x6b\xfc\x33\xd2\x42\x15\x81\xa1\xf0\xff\x31\x10\x2a\x91\x4f\x87\x31\x32\xe4\x67\xcc\xd8\x52\x7e\xaa\xca\x2c\xca\x87\xb6\xc8\x3b\xd0\x73\x8e\xbe\x02\xf0\xb5\xe0\x5b\xb6\x1b\xa4\x99\x49\x33\x14\xf1\x32\x78\x8a\x3e\x76\xc5\x3a\xba\x83\xcf\x39\x5a\x55\xc5\x73\x96\x5b\xb4\x57\xc3\x76\xcb\x6a\x86\xfa\x33\xee\xb1\x2c\xa2\x07\xae\x34\xad\xdf\xbc\xa7\xa8\x1c\x3b\x30\x76\x38\x15\x63\x91\x0d\xa6\xe3\x79\xb7\x93\x4b\xe8\x36\x20\xa7\xb5\x0e\x16\x8b\xf9\x1a\x6f\x00\x38\xa1\x8d\x13\x9c\xce\x64\x92\x6e\x6e\xef\x3f\xd6\x6d\xce\xe0\x9a\x68\x1b\x6d\x9f\x83\xa2\x72\xe5\x46\x66\x77\x06\xb3\xd6\x4c\xa5\x0e\xaf\xa0\x91\x77\xcb\x45\x03\x5e\x8a\xa8\x30\x8a\x35\x27\xbc\xab\x32\x28\xbe\x21\x33\x35\x0d\xc1\x43\x38\xd5\x4e\xc3\x9b\x5f\xc7\x29\x70\x52\xfc\x6b\x6f\x1b\xf0\x4e\x99\x26\x4c\x93\x46\x70\xb8\xc3\x00\x1b\x5a\xbf\x0d\x7d\x50\xd7\x62\xe0\xda\x5b\x05\x79\xb0\xac\xa2\xe5\xaa\x7c\x3d\x6f\x43\x4f\x25\xed\x40\xdb\x3d\x3b\xee\x2c\x96\x93\xab\xa1\x47\x5a\xc6\x99\x3c\xf4\xf8\x56\x38\x55\xab\x27\x38\x66\xf1\x64\x92\x7f\x0f\x41\xf8\x6d\xbd\xaa\x82\x30\xcc\xd6\xe9\xaf\x08\xc1\x93\xc4\x3f\xad\x08\xbd\x5b\x5c\x81\x33\xe5\xff\x89\x68\x68\xf5\x0b\x41\x5c\x57\x1f\x4c\x8e\x9e\xbb\x23\x6a\x46\xcb\x2c\x6e\x55\xdc\x52\xb8\xb6\xe9\xe9\x52\x56\x34\x6e\x60\x2b\x24\x10\xf5\xce\x74\xbd\xc7\x27\xdd\xec\x00\xb5\xd7\x3e\x59\x65\x1b\xe5\xf2\x41\xb6\x01\x34\x46\x43\x68\xc8\xd0\x9b\x5d\x9b\x99\xe5\x51\x51\x66\x79\x74\x69\x27\x41\x69\x21\x19\xdf\x19\x8b\x69\x3d\x72\x50\x62\x90\x35\x5c\xd6\x70\x76\xcd\x9f\x5e\xee\xa8\x63\xaf\x3f\x03\x8e\x3b\x33\x89\xfe\xb1\xf4\x1b\x68\x05\xd2\x9c\x16\xa7\x58\x55\xe2\xdb\x4b\xf4\x20\x1d\x5f\x4e\xfb\xd4\x83\x44\xbd\xe8\x36\x0a\x69\xd8\xb2\xf4\xc4\xf5\xb6\x1b\xc5\x81\xd7\x7b\x29\x38\xfb\x13\xeb\x84\x84\x62\x98\xf4\x37\xc7\xe9\x49\xf6\x14\xa7\xe7\x36\xeb\xb9\x94\x41\xb6\xb8\x71\xa7\x8f\xdc\x5c\x1e\xdf\xe6\xbd\x14\x7b\xb6\x61\x5a\x11\x3c\xe3\x62\x6c\xa5\xe8\x48\x2b\x76\x3b\xec\x12\xe3\x77\x9f\x51\x42\xde\x6d\xcd\x94\x17\xc6\x85\x41\x81\x73\x68\x40\xa5\xcf\x14\xd1\x54\xbd\x9d\xc3\x00\x9a\x7e\xef\x42\x83\xbd\xde\xcb\xb2\x0a\xb3\xf4\x31\x7e\x3a\x3e\x00\xc3\x39\x2a\x5f\xf0\xe0\xd1\xe0\xfc\x2b\x42\x79\x8e\xe8\x1f\x75\xab\x81\xbe\x15\x87\xce\x00\x4a\x4b\xf9\xa7\xbb\xc6\x7a\xe4\x87\x29\x4f\x8c\x07\x5c\x83\x84\x06\x5f\x45\x0a\x76\xc6\x25\xa6\xd0\xb2\x5a\xab\xe3\x52\x9a\xdc\xb1\xb4\xc7\x63\x5f\x49\x7f\xfa\xc2\x32\x3a\x76\xfa\xee\x32\x7f\x52\xc5\x2b\xd4\xfb\x98\x61\x5d\x0f\x3d\x43\x21\xcc\x9b\x59\x92\x12\x8c\xa7\xc6\xa6\xf8\xb7\x5e\x88\x16\xdd\xac\xb2\x2c\xb9\x5a\xa3\x78\x45\xf0\xcc\x8c\x7c\xae\xe0\xc8\xf4\x82\xb3\x94\x7e\x1a\x71\x62\x18\x2b\x4a\x94\x96\x07\x0f\xd9\xb0\x28\xf3\xd7\xcb\x07\x7d\x39\xff\x56\x24\xb6\xf6\xfb\x04\x95\xf5\x9e\x69\xa8\xf5\x20\xc1\x00\xf6\x15\xc1\x63\xbf\x56\x11\x6f\x2e\xb7\x63\x6e\x9f\x5d\xd8\xa7\xe9\xfd\xe4\x7b\xff\x0f\x00\x00\xff\xff\xfb\x21\x6f\xab\xda\x12\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4826, mode: os.FileMode(420), modTime: time.Unix(1644907191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x4d\x57\xe2\x58\x1a\xde\xe7\x57\xe4\xe0\xe9\xdd\x4c\x9d\x9e\x6d\xed\x52\x10\x35\x53\x21\xc9\x49\x82\x3d\xf6\x26\xc7\xb6\x98\x1e\xa7\x15\x3c\xa2\x73\x6a\x66\xd5\xa8\x7c\xd9\x44\x98\x2a\x75\x4a\xa5\x4b\xb0\xd4\x72\xb4\x20\xa8\x5d\x42\x11\xd4\x3f\x93\x7b\x93\xac\xfc\x0b\x73\xee\xbd\x21\x04\x28\xa6\x5d\x12\xde\xef\x8f\xe7\x7d\xee\xc4\x7c\x72\x69\x29\x99\xa0\x04\x26\xca\x6a\xec\x5f\x38\x45\x55\x9e\xd3\x21\x50\xd6\xed\x8f\x4d\xd0\xba\x06\xf5\x77\xa0\x72\x1e\xa2\x38\x49\x13\x44\xb5\x2f\xe0\x18\x2d\x50\x39\xb7\x6f\x4c\xdb\x3c\x72\x1a\xf7\xf6\x5d\xc3\xad\x7d\x76\x7f\x3d\x06\xb5\x4b\x90\xdd\xb7\xcc\xb7\xa0\xf3\x96\x93\x42\x14\x35\x31\xbf\xb8\x96\x5a\x8d\xaf\x50\x61\x3e\xa6\xa8\xac\xac\x45\x58\x9e\x55\x59\x6d\x92\xe1\x78\x36\xf2\x9c\x0e\xc1\xff\x54\xe1\xcd\x2e\xc8\x57\xdd\xfd\x13\x70\xf7\x16\x14\x74\x7b\xeb\x16\xfe\x9c\xb6\x0f\x36\xdd\xc3\xac\x7d\x7f\x12\xf2\x55\x39\x05\x07\x21\xc7\x04\x81\x13\xa6\x9e\xd3\x21\x22\x60\xb5\x75\x50\x39\x77\x1e\xca\x4e\xad\x68\xb5\xeb\x8f\xdd\xf4\x88\x0a\x2f\x86\x19\x1e\xe5\x65\x74\x41\xe6\x94\xa8\x79\x8e\xf5\x9c\xdd\xf9\x88\x03\x5d\x89\xbf\x8a\x27\x56\x17\xe6\x16\xa9\x81\x18\x35\x99\x55\xc4\x98\x1c\x66\x91\x3e\x09\xf3\xe4\xca\xf9\xed\xf4\xb1\x9b\x76\x8c\x53\xfb\xe3\x3b\xf7\xcd\xa9\xd5\xfe\x05\x56\x0a\x20\x73\xe3\xa4\x77\xac\xb6\x09\x2b\x9d\xd0\x18\x23\xda\xf7\xa2\xf0\x54\x4b\xa0\x64\xd8\x3b\xe7\xa0\x88\x8d\x4d\x32\x31\x5e\xd5\xc2\x32\x1b\x61\x05\x95\x63\x78\x2d\xcc\x08\x38\x37\xe2\x07\x55\xc3\x7c\xe7\x34\x4e\x40\xae\x0e\xf5\x86\xd5\xd6\x9d\x8d\x3b\xe2\x04\x17\x04\xf7\x37\x3c\xcd\x86\x5f\xf6\x4b\x4f\x3c\x92\x5e\x13\x05\xab\xbd\x6d\xef\x9c\xc3\x7c\x0b\x7d\x3c\x6c\x83\x72\x11\x55\xe6\x6f\xc9\xd4\x2a\x35\x2d\x2a\xaa\xc6\xf0\x32\xcb\x44\x66\xfb\x73\x40\x92\x0d\x0c\x8a\x97\x35\x96\xf6\x1d\x8d\x26\xeb\xeb\xd9\x66\x89\x24\xdb\x6b\xf6\xa8\x01\xed\xc5\xac\x26\xc9\xe2\x9f\xd9\xb0\xfa\x54\x5b\xb5\x2f\xf6\x61\x03\xe7\xcd\x48\x12\xb1\xc5\x45\x25\x51\x56\xb5\x49\x8e\x67\x35\x85\xfb\x9e\xd5\x58\x59\x16\x65\x94\x82\x99\x81\x3b\x06\x2c\xa6\xad\xf6\x96\xd5\xad\xd2\x7f\xfa\x36\xfa\x82\xb6\xcc\x53\x90\xcd\xd8\x07\x9b\x70\x2f\x67\x99\xb7\x63\xec\x8c\x33\xf1\xec\xf5\x62\x8a\x7e\xf6\x3a\xb5\xf8\x9a\x26\xfa\xb0\xda\x05\xdd\x52\x88\x52\x66\x15\x95\x8d\x6a\xde\x36\x4d\x8a\x31\x21\xe2\x2d\x53\x26\x4f\x56\x07\x56\x3e\xc1\x4a\x87\x93\x48\xd3\x44\x24\xca\xcc\x30\x1c\xcf\xbc\xe0\x51\x8f\x39\x89\x76\x3e\x6f\xc2\x4e\x19\xf5\xeb\xf6\x26\x44\x71\x0a\x19\x6e\x1c\x1c\xb6\xe5\xd5\xc3\x6a\x6f\x93\x35\xa4\x39\x89\x06\xd9\x6b\xfb\x22\xfd\xd8\x2d\xc2\xca\x85\xb3\x71\x07\xf3\x65\xb0\x75\x04\x5b\x26\xd8\xaa\x86\xa8\x60\x5a\x38\x23\x4d\x88\xf1\x68\x5b\x60\xe5\x02\x16\xee\x41\xbe\x09\x4a\x06\xd9\x1c\x54\x90\xdd\x26\xd4\x1b\xb8\xf2\x2d\xf8\xe1\x67\x78\x74\x4a\xfe\x22\x89\xe2\xb0\x83\x06\x91\x29\x6d\x86\xe1\x63\x28\xfa\x6f\x52\xb4\x53\x2b\xc2\x4a\xc1\xfe\x6f\x87\xd8\x19\x14\xfe\x4e\x16\x85\x29\x6d\x52\x94\xa3\x8c\xea\x8b\xdb\x97\x06\x28\x7d\x20\x15\xb4\xda\x3a\xac\x7f\xb0\x6b\x43\x7a\x81\xad\x08\xd6\xd5\x73\x57\xb8\x47\x08\x91\x6f\x02\x23\xeb\xbe\x39\x1d\xd4\xf4\x26\x4c\x88\x45\xd1\x68\x65\xae\x68\x4f\x07\x07\x47\xbc\x81\x76\xfb\xb1\x5b\x74\x5a\x37\xce\x43\xee\xab\xca\x0a\x33\xc3\xfa\xab\x80\x0c\x58\x0f\xbf\xa2\x75\xf0\x46\xb4\x08\xb6\x8f\xc0\x61\xf5\xb1\x7b\xf0\x4d\x2a\x44\x51\xd4\xc4\x5a\x2a\xbe\x42\x49\x8c\xa2\x7c\x27\xca\x11\x1c\x70\x94\x51\xc3\xd3\x18\x9e\xb2\x76\x35\xed\xee\xec\x3b\x86\x11\xa2\x44\x99\x9b\xe2\x04\x2f\x27\x5f\x64\xfb\x68\x50\x4a\x15\x45\x2d\xca\x08\xb3\x38\x9a\x98\xcc\x62\xf8\xc6\xae\xe1\xa7\x1a\xdc\x6d\x3a\x0f\x39\x70\x72\x80\x32\x30\x5a\x56\xbb\x00\xf2\x59\xf7\xcd\x11\x28\x6f\xbb\x39\xdd\x31\x76\x71\xbf\x62\x4a\x1f\x29\x99\xb0\xca\xe1\x74\x08\x0e\xc0\xca\x05\x28\x23\x14\x22\x0d\x77\xd2\x3b\x08\xf3\x1b\x35\xbb\x9c\x05\xff\x7e\xd7\xd7\x0e\x96\x1d\x01\x6b\xfd\x84\xe8\x93\x1d\x8c\x44\x39\x61\x1c\x5e\xd1\x73\xaf\x96\x16\x12\x34\x11\x27\x28\xe4\x1c\x5f\x06\x90\x2b\x18\x9d\xcc\xf2\x8c\xca\x46\x02\x70\xe0\x85\x79\x5d\xf3\x51\x93\x2c\x7f\x88\xe2\x23\x8c\xe4\x3b\x8d\x49\x11\x06\x3b\x45\x5f\x07\x9c\x59\x0f\x0d\xb8\xf3\x05\x7b\x9a\x61\x65\x6e\x72\x56\x0b\x8b\x91\xc0\x7d\x72\x2f\x8a\x8e\x91\x0e\x14\x9c\x8d\x32\x1c\xaf\x45\x38\xc5\x5b\x49\x77\xbd\x61\x99\xb7\xe4\x08\x3a\xc7\x97\xf6\x59\x7a\x5c\xb9\x7a\xba\xc1\x7e\x12\x6d\x50\xfc\xe2\x66\x74\x1f\xd4\x3c\xb8\xf6\x67\x44\x41\xbf\xfa\x68\x8a\xfb\x0f\xba\x1d\xd0\x39\xb3\xda\xba\xfd\xe9\x0c\x94\xf3\xde\x29\x3e\x4b\xc3\xab\x75\x04\x1c\xaa\xa6\xc4\x24\xb2\x1c\xd3\x8c\x30\xc5\x6a\xa2\x3a\xcd\xca\x68\x38\xe0\xc1\x3a\x1a\x6c\x82\x57\x38\x79\x90\xb9\xb5\xcc\x3d\x0f\xf8\xb1\xf1\xe1\x00\x7a\x40\xe7\x1f\x07\x98\xdf\x1b\x1c\x43\x92\x19\xbe\x0b\x24\x2b\xbb\x71\x15\x38\x0b\x14\x35\xb1\x12\xff\x71\x21\x99\xe8\xe1\xbb\xcc\x4e\x71\xa2\xf0\xa4\x13\x0b\x8a\x1d\x70\x74\x14\xc4\xf7\xc0\x61\xa4\x26\xfe\x95\x4c\xc4\x7b\x56\xd1\x71\x7d\x9a\xcd\x9e\x85\x81\xb3\xb1\x71\x6e\xdf\x5d\x3b\x8d\x1a\xc8\xbf\x19\xa4\x10\x04\x0f\x9d\xed\x16\x28\xed\x11\x30\x21\xe7\x2a\x08\x83\x6e\x46\xb7\xef\xc8\xd1\xe1\xa2\xcc\x14\x3b\x4e\x71\xb7\x02\x36\x4a\xe3\x14\x25\x4d\x99\x16\x65\x54\x42\x6e\x99\xee\x61\x3c\x45\x4d\x24\x97\xe3\x89\xd4\xea\xdc\xfc\x4f\xd4\x14\xab\xf6\x8a\xd7\xeb\x4a\x1f\xe1\x70\xa5\x50\x51\x96\x57\x92\x7f\x8f\xcf\xaf\x46\xe3\x4b\x3f\xc4\x57\xfc\x15\x62\x22\x91\x7e\x13\x71\xe2\xbd\x1b\xe0\x6b\xf8\x4c\xc3\x5b\xb1\x71\x6b\x4b\xb6\x6c\x84\x66\xf4\xb4\xa6\x19\x45\xf3\x0a\x88\x54\xb0\x70\xf0\xce\x3f\x76\xd3\x23\xba\xd4\x44\x22\xf9\x2a\x4e\x09\x68\xfd\x7a\x44\xc3\xe3\x7a\x9a\xca\x28\x2f\x31\x42\xa3\x49\x75\xb6\xd6\xed\xf5\x2f\x70\xb7\xe9\xe6\x4a\xf0\xad\x6e\xdd\x55\x10\x4c\x57\xce\x61\xe1\xa3\x53\x2b\xfe\x81\x76\x8c\x96\x5d\x2f\x80\xfb\x0c\x68\x6c\x58\xe6\x27\xf2\x19\x34\x8a\xd0\xd8\x7d\x86\xdc\xfc\x30\x37\xff\xd3\xda\x32\x33\x3f\x9f\x5c\x4b\xac\x52\x12\x23\x33\x51\x8d\x8d\x4a\xea\x2c\xf2\x50\x5a\x87\xbb\xcd\x5e\xe5\x03\x7b\x84\x11\xde\x5b\x1b\xfb\x60\xd3\xbe\x32\xc1\xfb\x5f\x42\xd4\x10\xa5\x82\xd5\x9a\x7b\x51\x0c\x2c\xb2\x37\x98\x2f\x98\xf0\xcb\x98\xa4\x31\xe1\xb0\x18\x13\x9e\x4a\x6c\xc0\x49\xce\x32\xef\x9c\xdf\xce\x40\xa9\x35\x86\xde\x50\x13\xcb\x8b\x73\x89\x21\xae\xf9\x3b\x66\x83\x63\x3e\x6a\x36\xc0\xd9\x5f\xe0\x3a\x51\x5e\xec\x88\xf1\x10\x14\xee\x4d\x35\xa1\x2d\x9e\x7d\x14\x2a\xe1\x00\x20\xab\x83\x7c\x0e\xea\xc7\xc1\xf8\x07\xf6\x89\x58\xf4\x09\x3c\xe9\x1e\x91\xfe\x0a\x81\x97\x59\x45\x15\x65\x76\x48\x1c\xa6\x8f\xc1\x89\xde\x13\xf7\xe7\x57\x8e\xa7\x92\x6b\x2b\xf3\xf1\xd1\x92\x04\xd2\xf8\x3f\xc1\x07\x9b\x36\xc4\x41\xfb\xf3\x3c\xc0\x38\xaf\xde\x5b\x9d\xed\xa1\xa9\x76\x1e\x0e\x11\x8b\xa8\x9f\x90\xf1\xf4\x42\x5c\x7c\x35\xb7\x4c\xce\x92\x7f\xd3\x48\x25\x41\xb9\x08\xeb\xa7\x20\xdf\x44\x83\xe5\xdd\xa6\xce\xb7\xde\x09\xe3\xc5\x29\x4e\x18\xd6\xf0\x2f\x18\x01\x58\xec\x00\x4b\xf7\xef\x12\xb9\x08\xf6\x59\x1a\xd6\x8f\xd1\x5f\x44\xc5\xde\x37\xdd\xfd\x2c\x3d\xe6\x96\x53\x13\xf3\x0b\x29\x2a\xcc\x29\x78\xe1\x86\xb7\x10\x45\xda\x83\x74\x58\xb8\x84\xa5\x92\xd5\xae\xdb\x07\x9b\x96\x69\x82\xad\x1a\xd2\xfe\xc7\x52\x38\x99\xf8\xeb\xc2\x8f\xd4\x4c\x54\x0b\x8b\xc2\x24\x37\xd5\x7f\x2a\x10\x98\x0b\xdc\x84\xbe\xcc\xf0\x9b\xd0\x17\xed\xd7\x37\x30\xb3\xbf\x53\xe5\x85\x65\x04\xa3\xfd\xa7\x2c\xa6\xd5\xf6\xc1\x26\x27\xc1\xc6\x67\xab\xbd\x0d\x5a\xd7\xb0\x52\xc0\xbf\x7c\x5a\xec\x18\x2d\x37\xa7\xc3\xbd\x26\x91\xf6\xdf\xbb\x43\xd4\x1b\x91\xc3\xe3\x4b\xa0\x57\xf1\x85\x2f\xfa\x6c\xc5\xcd\x6d\xc1\x9d\x7b\xe2\xfc\x8f\xcb\xc9\xe4\x22\xd2\x97\x44\x91\x1f\xc9\x8c\x5b\xa6\xe1\x55\xf5\xab\xb7\x0c\xb1\xf3\xc0\x5b\x38\xe4\x9d\xcc\xd4\xea\xca\x3f\x29\x04\xf8\x8a\x2a\xcf\x8e\x3e\xc0\x1c\xe3\x14\xbe\xbf\x85\xef\x3d\x40\xc2\xdd\x40\xac\xdf\x73\xd1\x3b\xbf\xde\x33\x9f\xa6\x82\x44\xcd\x7a\xa8\xc1\xb4\xe1\x3d\x09\x30\xd1\x0f\x51\xd4\xff\x02\x00\x00\xff\xff\x0b\xea\x22\xcb\x11\x10\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 4113, mode: os.FileMode(420), modTime: time.Unix(1644907201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
