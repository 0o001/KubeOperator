// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xc1\x72\xab\x3a\x12\xdd\xeb\x2b\x14\xbc\x9d\xba\x35\x6b\xef\x14\x50\x12\xe6\x62\x70\x01\xce\x4c\x66\x43\xc9\xd0\xb6\x35\x01\x89\x92\xc4\xcd\xe4\xee\xde\x7f\xbd\x7f\x7a\xbf\xf0\x4a\x42\xc6\xd8\x4e\x5e\x7c\xeb\xad\x12\xaa\x74\x5a\xad\xd3\x7d\x4e\xb7\x17\xb5\xec\x3a\x29\x50\x4a\x56\xb4\xa2\xff\x89\x8b\xb2\x58\xe2\x20\x65\x1d\x60\xd6\x2a\x60\xcd\x3b\x86\xff\x73\x6d\x74\x80\xe2\x75\x95\x66\xe5\xe9\xd0\xba\x05\xa6\x01\xef\x78\xdb\x62\x2e\xb0\x39\x00\x6e\x65\xcd\x5a\x1c\xaf\xb1\x1c\xbf\xf5\xbb\x36\xd0\x61\x0d\xc6\x70\xb1\xc7\x3d\xdb\x43\x80\xd0\xa2\x6e\x07\x6d\x40\xa1\x30\xd9\x14\x25\xcd\xab\x88\x26\xb4\xa4\xd5\x03\x89\x13\x1a\x2d\x71\x50\x33\x81\x85\x34\xb8\x81\x16\x0c\x60\x7f\xdc\x5e\x52\x0f\x4a\x81\x30\x58\x1b\x66\x20\x98\x02\xc4\x85\x4b\x2d\xdf\xa4\x69\x9c\x3e\x2e\x71\x50\x1e\x66\x30\xed\x82\xa9\x41\x08\x2e\xf6\x57\xa0\x24\x0b\x49\xb2\xc4\x41\xdc\xf5\x52\x99\x09\x55\x33\x61\x51\x5b\xc0\x43\xbf\x57\xac\x81\xc6\x65\xae\xa0\x01\x61\x38\x6b\xd1\x59\xd2\x55\x4e\x8b\x6c\x93\x87\x74\x89\x83\x07\xc6\x5b\x68\xb0\x91\x3e\xff\x3b\x5c\x1e\x40\x81\xcd\x83\x09\xcc\xb4\x96\x35\x67\x06\x1a\x7c\x90\xda\xe0\x41\x34\xa0\xb0\x39\x70\x8d\x5f\xe1\x3d\xf8\x24\x6c\xf5\xdf\x2c\xfd\xa5\xd8\x3f\xa5\x80\x0f\x62\x3f\x90\x4d\x52\x56\x61\x4e\x23\x9a\x96\x31\x49\xaa\x90\xa4\x8e\x85\xf1\xda\x25\x0e\x22\xd8\xb1\xa1\x35\xf8\xf4\xd2\x19\x15\xe3\xa5\x4d\x30\xb6\x4b\xf8\x44\xc3\xef\xa7\xaa\x39\xce\x4f\x28\x61\x7b\xe8\x04\x75\xed\xe0\xda\x4a\xbb\xff\x07\x0d\xca\x9d\x09\x10\x42\x0b\x4b\x05\x7a\xca\x8a\xb2\x22\x49\x4e\x49\xf4\x72\x6a\xb3\x27\xcb\xd2\x65\x2f\x7a\x96\x1c\x62\x4a\xe0\x43\x72\x46\x96\x2d\x3f\x3e\xc4\x8c\xa4\x37\x6e\x0e\x2e\x19\x5f\xf4\x8f\xe2\x56\xf7\x2f\xd5\x3a\xcf\xfe\x45\xc3\xf2\x6f\x5d\xd1\x2b\xf9\x3f\xa8\x4d\x80\x8a\x97\xa2\xa4\xab\xca\xab\xe9\x21\xdb\xa4\xd1\x17\x62\xda\x71\xa5\xcd\x1f\xbf\xff\x16\xa0\x34\xb3\x38\xf2\x4c\xe2\x84\xdc\x27\xb6\x5c\xa9\xc4\x71\x8f\xd9\x0f\xc6\x5b\xb6\x6d\x21\x40\x71\x31\x76\xb4\x7b\xc3\x4c\x4b\x7c\x6c\xef\x31\xa8\x4d\x38\x18\xf9\x8e\x57\xeb\x2c\x2f\x2b\x9a\xe7\x59\x5e\xa5\x9b\x24\x19\x83\x36\xcc\x30\xfb\x4c\x0f\x7b\x63\x1a\xef\xe4\x20\x9a\x3b\xec\x33\xad\x0f\x50\xbf\xba\x3c\xfd\x91\x1d\x6f\xe1\xce\x15\xd3\x96\x16\xad\x49\x51\xfc\x3b\xcb\x23\xf7\xca\x15\x29\xc3\x27\xdf\x22\x3d\xd3\xfa\x4d\xaa\xc6\x12\xc6\x45\x2d\x95\x72\xb4\x64\x79\xfc\x18\xa7\x24\xb9\x3a\x2f\x15\xdf\x73\xc1\xda\xcf\x80\x9b\xe2\xa4\x65\x12\x96\xf1\x33\xf5\x40\xd7\x61\x5e\xfc\x20\x2c\x3b\xb3\xec\xa5\x30\xac\x36\x2e\x7f\xd6\x74\x5c\x70\x6d\x14\x33\x52\xdd\xf9\x80\xf3\xda\xa4\x12\xeb\xa1\x3e\xb8\x80\xae\x0c\x24\x5a\xc5\xe9\xb5\x74\xec\xa5\x8d\x97\x8f\x0b\x3a\xa6\x70\x25\x9f\xbb\xf3\xa4\x73\x9a\x90\x92\x46\xb3\x2e\xdb\x58\xd8\x81\xd9\xd4\xe7\xbd\xe4\x5b\xc8\xa5\x90\x44\x64\x3d\x65\xb0\x59\x47\x64\xca\xa0\x6d\x58\x7f\x79\x31\x34\x7c\xbc\xf7\x99\xe6\xf1\xc3\x4b\x15\x66\xd1\xcc\x6e\x9f\x41\xf1\x1d\xaf\x99\xe1\x52\xe0\x5a\x36\x80\x41\x29\xa9\x02\x44\x57\x24\x4e\xaa\x28\x2e\x7c\xb3\xad\x18\x6f\x8f\x66\xae\x31\x53\x80\x1b\xae\x6f\x24\xf6\x18\x6d\x5e\x5e\xda\xd9\x80\x1d\x33\xf5\x01\xef\x9c\xb2\xc6\x2e\xb7\xe6\x32\xf5\x4f\x61\xbf\xa6\x5c\x2d\x35\x7f\xe1\x2c\xc7\x1e\xb9\x0c\xe2\xda\x7b\x89\x83\x37\x25\xc5\xfe\xe4\x3d\x58\xaa\x19\x04\x2d\x14\xec\xb9\x14\x47\x17\xc8\xe9\x63\x9c\xa5\xb7\x3a\x3c\x1e\xc1\x5f\xf9\x80\x35\x66\x7b\x95\xfd\x7b\xbc\xc8\x9a\xfb\xcd\xd7\x38\x67\xff\xca\x6c\x5a\x26\xce\x07\xdd\x28\xec\x70\x24\x6d\x0f\x66\x6e\x7b\x1f\x68\xba\x96\x62\xc7\xf7\x83\x72\x3d\xe1\x8a\x12\xaf\xc8\x23\xfd\x3c\x14\xef\xd8\x1e\x6e\x0a\x84\xd0\x42\xf6\x20\xb4\x61\xf5\x2b\x7a\xa4\xe5\x91\xe6\x63\x89\x52\x79\x64\xd2\x19\x8e\xe5\xca\x37\xfe\x0a\xba\x2d\xa8\x49\x3b\x24\x8a\xe6\x5a\xd9\x02\x08\xcc\x1a\x3f\xa8\x3d\x64\x1a\x79\x5e\x5c\x9f\xcf\x3b\x0f\xf8\x68\xd8\x1d\xb1\x4f\xa4\xa8\x3c\xa7\xd6\xb1\x3d\x60\xc6\xff\xc4\x67\xf8\x81\xe4\xd1\x42\xc8\x06\x50\x6a\xa5\x77\x1c\x72\x7e\x61\xa9\x4a\x52\x7c\x5f\xe2\x80\x34\x0d\xb6\x87\x6c\x5b\xfa\xdd\xc7\x7d\x1e\x4b\xed\x57\x98\x7f\xf4\x23\xcb\x6f\x8c\x1b\xcc\x0d\x6e\xa4\x80\x6f\xf6\x82\x2d\xab\x5f\x87\x9e\xd4\xb5\x1c\x84\x41\x6b\x92\x93\x55\x45\x57\xeb\xf2\xc5\xae\x37\x42\x0f\xbb\x1d\xaf\xb9\x5d\x9f\x7a\xa6\x58\x07\x06\x94\xb6\x33\xa5\xac\x8a\xcd\xda\x4e\x01\x4b\xa7\xd0\x43\x6f\xfd\xdc\x36\xde\x7b\x6f\x77\xac\xf3\x29\x7f\x66\x16\xa3\x68\xa7\xb1\x79\x4f\xc2\xef\x9b\x75\x45\xc2\x30\xdb\xa4\xbf\x32\x40\xcf\x12\xbf\x79\x92\xa2\x85\xed\xf3\x8b\x8d\xe9\x86\xdb\x2c\xea\x17\x2e\xf1\x55\xbd\x77\x39\x22\xff\xc6\x87\x38\xa1\xa3\x7d\x7b\x3d\xf8\xce\xf7\x65\x33\xd3\xa3\xdc\x5c\xc4\x5b\xd8\x49\x05\x58\xbf\x71\x53\x1f\xec\x2a\x3c\x3b\xc0\xc6\x67\x9f\xe9\x75\xbc\xe5\x7a\x91\xdd\x82\x05\x5b\x20\x34\x78\xe8\x9d\xa0\x66\xb0\x9c\x16\x65\x96\xd3\x6b\x9c\x02\x6d\xa4\xe2\x62\x3f\x4a\xf0\x28\x8f\x1c\xb4\x1c\x54\x0d\xd7\x1c\xce\x9e\xf9\xe5\xe3\x4e\xfb\xc9\xc7\xeb\xd3\x49\x33\xd3\xb2\x74\xa4\x7e\x0b\xad\xb4\xb3\xc4\xc8\x73\x43\x2a\xed\xce\x2a\x7b\x50\x7e\x28\x4d\x7a\xea\x41\xed\xa4\xea\xbc\xa2\xec\xac\x1b\x47\xe1\x34\x50\xc7\x6a\x14\xef\xa2\x3e\x28\x29\xf8\x4f\xcb\x93\x06\x35\x8e\xab\x7f\xfa\xc1\x99\x64\x8f\x71\x7a\x89\xd9\xcc\xf7\x05\xbb\x67\xde\xf9\xd3\xa7\x01\x58\x9e\x7e\xd3\xf4\x4a\x1e\xf8\x96\x1b\x8d\xed\x19\x7f\xc7\x4e\xc9\x0e\xb7\x72\xbf\xb7\x55\xe2\xe2\xdb\x2d\xeb\x06\x5a\xd4\x5c\xa3\x30\x2e\x9c\x0b\x5c\x5a\x83\xdd\xe0\xb8\xc6\x86\xe9\xd7\x4b\x1b\xb0\xd0\x1f\x5d\xe8\x0c\x16\x3d\xaf\xaa\x30\x4b\x1f\xe2\xc7\xd3\xe2\x1c\xce\xad\xf7\x6a\x83\x3e\x01\x2e\x7f\x7d\x95\x97\xb6\xfd\x59\xb5\x1a\xe8\x5b\xf9\xde\x39\x43\x69\x99\xb8\xb5\x6a\x08\xfd\x19\x00\x00\xff\xff\x31\xf0\x05\xaa\x75\x0e\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 3701, mode: os.FileMode(420), modTime: time.Unix(1607415538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4b\x53\xdb\x56\x14\xde\xdf\x5f\xe1\xb1\xb7\x9d\x4e\xd7\xd9\x5d\x64\x01\x6a\x64\xc9\x23\xc9\xb4\x74\xa3\x21\xc6\x4d\x69\xc0\x66\x78\x74\xd1\x55\xcc\xd3\x10\x0b\xbb\x89\xa1\x10\xdc\x80\x89\x09\x1e\x88\x1f\x09\x09\x36\x16\x26\x7f\x46\xf7\x4a\x5e\xe5\x2f\x74\xae\xae\x24\xcb\x76\x9d\xb2\xb4\x7c\xbe\xf3\xf8\xce\x77\xce\xb9\xa1\x78\x6a\x61\x21\x95\x04\x02\x8c\xb0\x2a\xfb\x33\x27\x2b\xf2\xa3\x40\x10\xe5\x35\xf3\xa2\x81\x9a\x1f\x51\xf5\x10\x15\x2b\x41\xc0\x45\x55\x41\x54\x7a\x06\x56\xbd\x89\x8a\x15\xf3\x5a\x37\xf5\x13\xab\x76\x6f\x76\x6a\xdd\xd2\xe7\xee\x3f\x67\xa8\x74\x85\xb6\x8e\xe8\x77\x2e\x1a\x04\x20\x14\x9f\x5f\x5d\x5e\x49\x2c\x01\x86\x8f\xc9\x0a\x2b\xa9\x61\x96\x67\x15\x56\x1d\x87\x1c\xcf\x86\x1f\x05\x82\xf8\xef\x53\x7c\xbd\x8f\x32\xa7\xdd\xa3\x32\xea\xbc\x42\x3b\x9a\xb9\x7b\x83\x9f\xa7\xcd\xd7\x1b\xdd\xe3\x2d\xf3\xbe\x1c\xf4\xa0\x9c\x6c\x27\x21\xc5\x04\x81\x13\x26\x1e\x05\x82\xd4\xc0\x68\x69\xa8\x58\xb1\xbe\xe4\xad\x52\xd6\x68\x55\xbf\xde\xa5\x87\x20\xbc\xc8\x40\x9e\xd4\x55\xbf\x43\x9b\xe7\x14\xe6\x04\xd6\xb6\xcd\xf6\x85\x9d\xe8\x52\x62\x36\x91\x5c\x99\x9b\x99\x07\x7d\x39\xaa\x12\x2b\x8b\x31\x89\x61\x09\x9e\xa6\x59\xfe\x60\x7d\x3a\xff\x7a\x97\xb6\xea\xe7\xe6\xc5\x61\xf7\xe5\xb9\xd1\x7a\x81\x8b\x3b\x68\xf3\xda\x4a\x17\x8c\x96\x8e\x8b\xed\xe0\x08\x27\xea\x2f\xa2\xf0\x50\x4f\x28\x57\x37\x0b\x15\x94\xb5\x9d\x8d\xc3\x18\xaf\xa8\x8c\xc4\x86\x59\x41\xe1\x20\xaf\x32\x50\xb0\x6b\xa3\x71\x08\x1b\xfa\xa1\x55\x2b\xa3\xed\x2a\xd6\x6a\x46\x4b\xb3\xd6\x3b\x34\x88\x4d\x88\xdd\x5f\x66\x92\x65\x1e\xf7\xa8\xa7\x11\x69\xaf\x29\xc0\x68\xed\x99\x85\x0a\xce\x34\xc9\xc7\xe3\x16\xca\x67\x09\x33\xbf\xa5\x96\x57\xc0\xa4\x28\x2b\x2a\xe4\x25\x16\x86\xa7\x7b\x3a\xa0\xc5\xfa\x84\xe2\x54\x6d\x5b\x7b\x81\x86\x8b\xf5\x70\xa6\x9e\xa3\xc5\xba\xcd\x1e\x76\xa0\x8e\x4d\xab\x51\x49\xfc\x91\x65\x94\x87\xfa\x2a\xdd\x9a\xc7\x35\xbb\x6e\x79\x5a\x56\xd8\x88\xea\xe8\x77\x5c\x8c\x09\x61\x47\xbe\x9b\x19\x2a\x56\x5c\x7c\x8f\x8b\x6d\x2e\x4a\x69\x12\x89\x29\x9c\x82\x1c\x0f\xc7\x78\xc2\x2a\x17\x0d\x58\x9f\x37\x70\x3b\x4f\x18\xba\xb9\x0e\x02\x4e\xa6\x72\xb2\x53\xec\x09\xd8\x56\x16\xf5\x15\xa4\x64\x71\x91\xa8\x28\x29\x2a\x2b\x49\xa2\xa4\x0a\x31\x9e\x08\x10\x17\x2f\xf1\xce\x3d\xca\x34\x50\xae\x4e\x21\xe6\xeb\x0d\xbc\xdf\xc0\x5a\xcd\x2e\xa6\x89\xdf\x3e\xc7\x27\xe7\x8e\xb7\x83\x6d\x43\xbf\xb1\xf3\x02\x20\xb4\xba\x9c\x58\x02\x51\x28\xcb\x3f\x89\x52\xd8\xae\x26\x02\x15\x66\xd2\x56\xf5\x96\x79\x9a\xee\x16\x8e\xac\x7a\x3d\x08\x44\x89\x9b\xe0\x04\xc8\xf7\x9b\xec\x9d\xf4\x5b\xc5\xe4\xde\x74\x40\x46\xe1\xa6\x48\xad\xb4\xf7\xb8\x78\x89\xf2\x44\x79\x34\x23\x2b\x5d\x20\xf3\x5c\x2b\x99\xf9\x2d\xf4\xd7\xa1\x9d\x8e\x8d\xf6\x13\x4a\x48\xa8\x96\x29\xde\xb6\x80\xe1\x08\x27\x8c\xd2\x68\x60\x66\x76\x61\x2e\x19\xa0\xe6\x54\x79\xd6\xd9\x95\x4f\xad\xfe\xec\x24\x96\x87\x0a\x1b\xf6\x49\xc0\x49\xf3\x63\xc9\x9b\x14\xda\xf0\x20\xe0\xc3\x30\xea\x05\x8d\x45\xc3\xd0\x0e\x4a\xbe\xf6\x05\x33\xbe\xd4\x70\xe1\xd6\x8e\x34\xc5\x4a\xdc\xf8\xb4\xca\x88\x61\xdf\x4e\xea\x5e\x66\xad\x7a\xda\xc7\x16\x1b\x81\x1c\xaf\x86\x39\xd9\x11\x45\x77\xad\x66\xe8\x37\x74\xf1\x59\x67\x57\xe6\xbb\xf4\x28\xba\x5c\xac\xbf\x19\x14\x8d\xb2\xb7\xdd\x4d\xcd\x13\xb2\x33\xa2\x5e\x83\x65\xf2\xab\x37\xaa\xee\x54\x7a\x73\x4a\xdb\xe9\x0e\x69\x3f\xd6\x96\x9c\x1f\x85\x33\x07\xfd\xed\x07\x20\xb4\x94\x78\x3a\x97\x4a\xba\xf3\x26\xb1\x13\x9c\x28\x3c\x68\xe5\xa1\x6c\x1b\x9d\x9c\xf8\xe7\xcd\xb7\xa8\x40\xe8\xcf\x54\x32\xe1\x7a\x25\xcb\xee\x61\x3e\x5d\x0f\x7d\x63\xbc\x5e\x31\x3b\x1f\xad\x5a\x09\x65\x5e\xf6\xaf\x74\x3a\x4c\xd6\x5e\x13\xe5\x0e\xc8\xfa\xcf\x34\xe8\xfa\xf0\xcf\x50\x77\x53\x33\x3b\x74\x09\x70\x11\x38\xc1\x8e\x02\xee\x17\xd1\x7a\x6e\x04\x10\x84\x52\x8b\x89\xe4\xf2\xca\x4c\xfc\x19\x98\x60\x15\x97\x25\x97\x5f\xbc\x73\x4f\x9d\x50\x4a\x88\xfd\xe2\x52\xea\xf7\x44\x7c\x25\x92\x58\x78\x92\x58\xf2\x74\x0c\xc3\xbe\x26\xda\x15\xe2\xa6\x8e\x76\x4f\x7d\x08\x6f\xc5\x3b\x3a\x1f\x35\x3b\x54\xea\x43\xfb\xdd\x45\x4d\x42\x59\x75\x98\x22\x10\xdb\xd8\xbf\x60\xbf\xde\xa5\x87\xb0\x20\x94\x4c\xcd\x26\x80\x40\x66\xc0\xdd\xf0\xce\x91\x55\x15\x28\x3f\x26\x1d\xdb\xbc\x31\xf4\x03\x6b\x77\xcd\x5c\xbb\xc5\xfb\x8d\xee\x76\x0e\xbf\xd2\x8c\x4e\x11\x57\xdf\xa2\x62\x05\xef\x5c\x58\xa5\xec\x77\x01\xab\xde\x34\xab\x3b\xe8\x7e\x13\xd5\xd6\x0d\xfd\x3d\xfd\x8c\x6a\x59\x5c\xdf\xff\x9e\x84\x79\x32\x13\x7f\xb6\xba\x08\xe3\xf1\xd4\x6a\x72\x05\x44\xa1\x04\x23\x2a\x1b\x89\x2a\xd3\x24\x42\x6e\x0d\xef\x37\xdc\x25\x4b\x0a\x97\x63\x51\xb2\x40\xed\x2b\xa3\xe1\x42\x1d\x67\xc9\xa3\xc0\xfc\xa0\xa3\x37\x2f\x82\x60\xe0\x96\xe1\xd3\x52\xf7\x32\xeb\x9b\x26\x47\x81\x63\x90\x79\x1c\x8b\xaa\x90\x61\xc4\x98\xf0\xd0\x8b\x82\xca\xdb\x86\xde\xb1\x3e\xbd\x43\xb9\xe6\x88\xbb\x02\x42\x8b\xf3\x33\xc9\x81\x23\xff\x3f\x6e\xfd\x7a\x1e\x76\xeb\x7b\x2c\x8d\xd9\x3c\x01\x27\xf7\x71\x8e\x67\xe9\x2a\x74\xe5\x4b\xaf\x97\xe3\x9f\xa4\x4a\x2f\x05\xda\xd2\x50\x66\x1b\x6b\x67\xfe\xfc\xfb\x06\x87\x7a\xf4\x5e\x4e\xb4\x7b\xd4\xfa\x3f\x5e\x4e\x12\x2b\x2b\xa2\xc4\x0e\x98\xe3\xf4\x19\x2a\x6b\xae\xb9\xa7\x5f\x29\xb1\x9c\x5a\x5d\x8a\x27\x86\x29\xf1\x95\xf1\x8d\xe4\xfd\x4d\x1b\x38\xfe\x3d\x3d\xf7\x9d\xfa\x0f\x6f\x8c\xf6\xde\x80\xaa\xad\x2f\xc7\x56\x29\x8b\xab\x65\x2a\x4f\x27\xc5\xf9\xd9\x99\x45\x7a\x1b\xbc\xc3\x42\x99\x44\xf9\x2c\xae\x9e\xa3\x4c\x83\x08\xcb\x39\x10\xed\x1f\x9c\x3b\xc2\x8b\x13\x9c\x30\x88\xf0\xce\x08\x7d\xf0\xd8\x01\x6c\xeb\xde\x71\xa0\xaf\x5f\xf3\x5d\x1a\x57\xcf\xc8\x5f\x14\x62\x1e\xe9\xdd\xa3\xad\xc0\x88\x83\x0a\x42\xf1\xb9\x65\xc0\x70\xb2\x3d\x70\x83\x53\x48\x32\x75\x9f\x58\x78\xe7\x0a\xe7\x72\x46\xab\x6a\xbe\xde\x30\x74\x1d\xed\x96\x08\xfa\x8f\x05\x26\x95\xfc\x75\xee\x29\x98\x8a\xa8\x8c\x28\x8c\x73\x13\xbd\x37\x1a\xdd\x67\xbe\x37\x5a\xcf\x66\xf0\x31\xee\x99\xf6\xf8\xf5\x69\xf6\xdb\x2c\x03\x00\xfe\x0d\x00\x00\xff\xff\xf8\x1d\x70\xeb\x4d\x0c\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3149, mode: os.FileMode(420), modTime: time.Unix(1607415461, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
