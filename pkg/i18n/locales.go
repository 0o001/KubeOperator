// Code generated for package i18n by go-bindata DO NOT EDIT. (@generated)
// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcd\x72\xe3\xb8\x11\xbe\xf3\x29\x60\xb9\xe6\x36\xd9\xda\xb3\x6f\x1c\x8a\xb6\x99\x91\x48\x16\x49\x79\xd7\xb9\xb0\x20\xb2\x25\x21\xa6\x00\x16\x00\xda\xd1\xde\xf2\x5e\x79\xa7\xbc\x42\xaa\x01\xf0\x4f\x92\x67\x34\x95\xd3\x8c\x6d\xf4\x7f\xf7\xd7\x5f\xf3\xbe\x12\xc7\xa3\xe0\x5e\xec\xaf\xc3\x32\xfc\x33\xca\x8b\xfc\x81\x2c\x62\x7a\x04\x42\x1b\x09\xb4\x3e\x11\xf8\x17\x53\x5a\x2d\xbc\x28\x2d\xe3\xa4\x18\x1f\xa5\x0d\x50\x05\x64\xc7\x9a\x86\x30\x4e\xf4\x01\x88\x84\x3d\x53\x5a\x9e\x48\x94\x12\x61\x7f\xa5\x4e\x4a\xc3\x91\x28\xd0\x9a\xf1\x3d\x69\xe9\x1e\x16\x9e\xe7\xdd\x57\x4d\xa7\x34\x48\x2f\x58\x6d\xf2\x22\xcc\xca\x65\xb8\x0a\x8b\xb0\x7c\xf4\xa3\x55\xb8\x7c\x20\x8b\x8a\x72\xc2\x85\x26\x35\x34\xa0\x81\xb8\xe7\x68\xa8\xea\xa4\x04\xae\x89\xd2\x54\xc3\x62\x50\x10\xe5\xc6\xbd\x6c\x13\xc7\x51\xfc\xf4\x40\x16\xc5\x61\x22\xa6\x8c\x32\xd9\x71\xce\xf8\xfe\x42\x68\x95\x04\xfe\xea\x81\x2c\xa2\x63\x2b\xa4\x1e\xa4\x2a\xca\x51\x6a\x0b\xa4\x6b\xf7\x92\xd6\x50\x5b\xd7\x25\xd4\xc0\x35\xa3\x8d\x37\xf3\xba\xcc\xc2\x3c\xd9\x64\x41\xf8\x40\x16\x8f\x94\x35\x50\x13\x2d\x5c\x00\x77\xa4\x38\x80\x04\x74\x84\x72\x42\x95\x12\x15\xa3\x1a\x6a\x72\x10\x4a\x93\x8e\xd7\x20\x89\x3e\x30\x45\xde\xe0\xb4\xf8\x44\x6d\xf9\x8f\x24\xfe\x25\xdd\x7f\x09\x0e\x57\x74\x3f\xfa\x9b\x55\x51\x06\x59\xb8\x0c\xe3\x22\xf2\x57\x65\xe0\xc7\x26\x0d\xd6\xec\x03\x59\x2c\x61\x47\xbb\x46\x93\x31\xd2\x49\x2e\xac\xd1\x7a\x61\x7b\x26\x78\x0e\x83\xef\x63\xd9\x4c\xd2\x47\x29\x8e\x8d\x34\x8a\x9a\x86\x30\xbd\xa5\xcc\xff\x3b\x05\xd2\xbc\x59\x78\xa9\x9f\xe7\x7f\x24\xd9\x72\x70\x26\xde\xac\xb0\x24\x2d\x55\xea\x43\xc8\x9a\xf4\x0d\xb1\x05\xb2\x6d\x28\x7f\xfb\xef\x7f\xfe\xbd\xf0\xd2\x2c\x7a\xf1\x8b\xb0\xfc\x1e\xbe\x9e\x0b\xa2\x27\xad\x64\xef\x54\x03\x06\x3e\xf1\x62\x14\xf7\xee\x31\xfd\xde\x73\x92\x17\xa5\xbf\xca\x42\x7f\xf9\x3a\xf6\xf7\x33\x56\xe6\x7c\x08\x5c\x65\x8c\xc4\x10\xf4\xd5\x82\xd8\xca\x62\x4d\x9c\x8a\x49\x61\x3e\x98\x3e\x98\x04\xb8\x4e\xbb\xa6\xb7\xfc\xf6\x5a\xa6\x59\xf2\xf7\x30\x28\xfe\x2f\x13\xad\x14\xff\x84\x4a\x2f\xbc\xfc\x35\x2f\xc2\x75\xe9\xc6\xf8\x31\xd9\xc4\xcb\xeb\x53\xdc\x88\x8a\x36\x38\xc2\x3b\x26\x95\x36\x89\x8a\x13\x94\xf3\x5f\xfc\x68\xe5\x7f\x5b\x61\x8b\xc4\x82\x44\x2d\xa1\xef\x94\x35\x74\xdb\xc0\xc2\x8b\x72\x3b\x46\x26\x86\xc9\x00\x33\x3b\x53\x56\x29\x3a\xbc\xb0\xf9\x8e\xd6\x69\x92\x15\x65\x98\x65\x49\xd6\xd7\x2c\x16\xa4\xa6\x9a\x62\x98\x4e\xec\x83\x2a\xb2\x13\x1d\xaf\xef\x88\xf3\xb4\x3a\x40\xf5\x66\xfc\x74\x4f\x76\xac\x81\xbb\xb9\x52\x54\x57\xbe\xf8\xab\x0d\x7a\x1a\x1e\x5b\x7d\xb2\x7a\x05\x27\x0d\xe3\x40\xbe\xa8\xb3\xf7\x49\x51\x06\xc9\x3a\x35\x35\xe8\xe5\x22\x5e\x89\x63\x6b\xd0\xe7\x87\xc2\x7f\x64\x49\xfc\x54\x3e\x26\xd9\xda\x2f\x9c\x98\x94\x50\x69\x62\xbd\x13\xf2\x48\xf5\xa7\xc2\x93\x29\x9c\x56\x25\x98\x8c\x90\xd0\x36\x03\x9f\xea\x70\x5d\x32\x2f\xab\xad\xfa\x0d\xd2\xae\xdb\xe2\xcd\xfa\x81\x2c\x7c\xa2\x85\xa6\x0d\x11\x3b\xf2\x45\x11\x29\x3e\x14\xfe\xd7\x84\x4f\x25\x10\xba\xe5\x18\x4e\xf3\x95\xa8\x37\xd6\x3a\x3d\x03\x3c\xf5\x7d\x1b\xc5\xf3\xa1\xd8\x32\xee\x70\x4e\x82\x12\x9d\xac\xd0\x89\xaf\x44\x02\x55\x82\x3f\x7c\xe2\x4f\xee\xbf\xcc\xb1\x4e\xd1\x77\xd7\xf0\x67\xc2\x9e\x77\x8f\x38\x32\x22\x08\xe6\x61\xed\x17\xc1\x73\x8f\x02\x3d\x84\x30\x45\x58\x5f\x9d\x85\x97\x64\xd1\x53\x14\xbb\xc4\x4f\xdf\x0b\xc9\xf6\x8c\xd3\xe6\x33\xc1\x4d\x3e\x6e\x0e\x3f\x28\x22\xe3\x68\xd1\xc3\x99\x5b\x35\xc0\x71\x2c\x26\x6d\x2b\xb8\xa6\x95\x36\x8d\x4b\xeb\x23\xe3\xb8\x28\xa9\x16\xf2\xce\x29\x9c\x56\x2f\x16\x44\x75\xd5\xc1\x28\x34\xf3\xe7\x2f\xd7\x51\x7c\x89\xd3\x68\xb4\x76\x58\x6d\x94\x5a\x17\x2e\xb0\xfa\x6e\xee\x74\x16\xae\xfc\x22\x5c\x4e\xe0\x65\x83\x62\x07\x8a\xae\x4f\x41\xc4\x61\x87\x71\x61\xb5\xf4\xd3\xc1\x83\x4d\xba\xf4\x07\x0f\x9a\x9a\xb6\xe7\x86\xa1\x66\xd6\xee\x4b\x98\x45\x8f\xaf\x65\x90\x2c\x27\xcb\xfd\x05\x24\xdb\xb1\x8a\x6a\x26\x38\xa9\x44\x0d\x04\xa4\x14\x72\xe1\x85\x6b\x3f\x5a\x95\xcb\x28\x77\x28\xb3\xa6\xac\xe9\xb9\x83\x32\x2d\x58\x33\x75\x63\x62\x7b\x6d\xd3\xf2\x86\x47\x54\x78\xa4\xba\x3a\x90\x9d\x69\x2d\x0b\x6f\xb8\xc9\x86\xfe\xc9\xf1\xa7\xc1\x57\x4c\xcd\x0f\xd6\x58\xdf\x23\xe7\x4a\x0c\xae\x3d\x90\xc5\x87\x14\x7c\x3f\x2e\x3a\x22\xe4\x44\xc4\x3a\x68\x36\xce\xe0\xdc\xf9\xc6\xf1\xee\x91\x55\x09\xde\xaf\x88\x2c\x7c\x8a\x92\xf8\x56\xca\x41\xac\xf0\xcf\x96\x04\x32\x05\x34\x85\xff\xf6\x86\x90\x6d\xdc\x6c\xc6\x50\x8d\x9f\x6d\xa2\x86\xf2\x39\xf5\xb2\xa8\x1f\xd8\xc4\xee\x41\x4f\x77\xe2\x15\xc0\xaf\x04\xdf\xb1\x7d\x27\x4d\xdf\x98\xc2\x45\x6b\xff\x29\xfc\x5c\x15\x3b\xd2\x3d\xdc\xa6\x28\x2d\xf3\xe7\x24\xb3\x00\xae\xba\xdd\x8e\x55\x0c\x49\x66\xd4\x62\x5a\x44\x0b\x5c\x69\x5a\xbd\x79\x4f\x61\xd1\x57\xa0\xaf\x70\x2c\xfa\x24\x1b\xa0\xc5\xf7\x6e\x6e\xd6\x70\xdc\x82\x1c\x46\xcf\x5f\x62\x3f\x7d\x51\x64\x98\xb6\x2d\x00\x27\xb4\x36\xc4\x72\x3a\xa0\x3d\x0e\x7c\x51\x33\x4c\x31\xfa\x1d\x71\x71\x26\x06\x3a\xd7\x2f\x81\x4f\xb9\x9c\x13\xb8\x46\xe4\x7a\xd9\x67\x3f\x2f\x5d\x79\x26\x2b\x64\x52\xca\xa1\x34\xc1\x15\x84\xf1\xee\xb9\xa8\xc1\x8b\x71\xd2\x7b\x32\xe5\xd8\x78\x59\xf8\xf9\x77\x5c\x2f\x75\x4d\xf0\x11\x4e\x81\x23\xf6\xe6\xc7\xbe\x6b\x1c\x3f\xff\xda\xda\x82\x7d\x50\xa6\x09\xd3\xa4\x16\x1c\x7e\x43\x03\x5b\x5a\xbd\x75\xad\x5f\x55\xa2\xe3\xda\x4b\xfd\xcc\x5f\x97\xe1\x3a\x2d\x5e\xcf\xcb\xd6\x52\x49\x8f\xa0\x41\x2a\xe4\x2e\x45\x99\x6f\xd2\xd4\x56\x77\xc3\x55\xd7\xe2\x66\xc6\x1e\x3e\xb5\x78\x40\xcc\x19\xec\x0c\x9b\x2c\x46\x0c\xf4\xec\x9b\x1f\x7c\xdf\xa4\xa5\x1f\x04\xc9\x26\xfe\x15\xa2\x36\x73\xfc\x66\xc6\xe6\xdd\xe3\xc8\xf4\xc6\xd3\x95\x1f\x5f\xe3\x9c\xd6\x47\x6b\x07\xdf\x8f\x9d\xd5\x29\xa8\x7b\x52\xd7\xdf\x34\xfd\x39\x30\x31\x33\xbf\x36\x6e\x88\xc6\x58\xb9\x3d\x08\x67\xfa\x9b\xc9\xc1\x59\x2a\x7f\x12\x8f\xcd\x1b\xa1\x2e\x71\xbf\x1a\x59\x6f\x24\x5a\x85\xf9\xf4\x36\x70\x80\xe0\x5a\x50\x8f\x86\x90\x4b\x92\x2d\xec\x84\x04\xa2\x3e\x98\xae\x0e\x78\xb4\xea\x0b\x4f\x66\x30\x66\xad\x5c\x5e\x9c\x5b\x40\x61\x14\x84\x9a\x74\xad\x19\xdc\x89\x58\x16\xe6\x45\x92\x85\x97\x72\x12\x94\x16\x92\xf1\xfd\x7c\xd4\x33\x47\x9e\x2e\xeb\x35\x09\xf3\xa7\xc1\x8d\x9c\xfe\xfa\xc9\x31\xce\xff\x70\x60\xf4\x65\xde\x42\x23\x70\x0d\x6b\x31\xc7\xe9\x02\x6f\x4b\xd1\x82\x74\xfb\x7c\xc0\x86\x16\x24\xd2\x5f\x83\x0e\x96\xe2\x5d\xc0\xdb\xb3\xbb\x60\x06\x78\x5b\x78\x03\x9f\xb4\x90\x19\xba\x97\x7d\xf8\xa6\xf1\x2c\x64\x9a\x89\xb8\xd4\x99\xba\xf6\x9c\xe8\x3c\x1b\xdc\x4b\x99\x6f\xe7\x03\x3a\x11\xf6\xee\x91\xe1\x58\x02\x34\xa0\xb4\x6d\xa4\xfc\xc4\xab\x83\x14\x9c\xfd\x85\x25\x56\x20\x2d\x49\xf9\xdd\xd1\xa5\x55\xf2\x14\xc5\xe7\x32\x9b\x29\x4b\xc4\x25\x7f\xe7\x5e\x8f\xb4\xa7\x18\x3f\x9c\xb4\x52\x1c\xd8\x96\x69\x45\xf0\x8d\xb3\xb1\x93\xe2\x48\x1a\xb1\xdf\x63\x83\x31\xfe\xdb\x2d\x24\xd3\xbb\xaf\x98\xf2\x82\x28\x37\x60\x7c\x8e\xd0\x78\xb0\x31\x45\x34\x55\x6f\xe7\x68\x8c\xa2\xef\xc7\xc0\xac\x4c\xef\x65\x5d\x06\x49\xfc\x18\x3d\x8d\x77\x72\x30\x5d\xa6\x17\xf4\x65\x14\x38\xff\xc2\x53\x9c\x2f\xe2\xcf\x1a\xad\x86\xb6\x11\xa7\xa3\xc1\xf5\x86\xf2\x1b\x1b\xce\xbb\x67\x2d\xae\xf5\xc1\x4f\xb4\x07\x5c\x83\x84\x1a\x8f\x5b\x05\x7b\xa3\x12\x5d\x68\x58\xa5\xd5\x88\x5d\xc6\x77\x4c\xed\xf8\xec\x2b\x69\xe7\x87\x32\xdd\x53\xc6\x87\x8f\x62\xd3\xcb\x38\x4a\xf1\x76\x42\x0f\xab\xaa\x6b\x19\xd4\x84\xf2\x7a\xe2\xa4\x04\xa3\xa9\x36\xc2\x51\xfc\xe2\xaf\x22\x4c\x47\xd4\xda\x33\xe3\x9d\x36\xac\xee\x39\xc9\xe4\x5b\x06\xef\x90\x4c\xe0\x39\xb6\x07\x8e\xa1\xdb\x30\x68\x5d\x4b\x50\x0a\x8c\xc5\xdf\x7f\xbb\xe4\x3a\x4a\x53\x69\x82\x71\x2f\x8d\x37\xaa\xdb\x72\xc0\xc6\x33\x69\xfa\x5b\x2b\x44\x83\xe6\xd2\x24\x59\x5d\xad\x53\x94\x12\x7c\x33\x21\x2d\x57\x20\x7f\xf8\x18\x60\xd9\xe0\x3c\xea\x81\x6c\x58\x3e\xab\xb4\x3c\x79\x48\xa4\xf2\x22\x7b\xbd\xfc\xf6\x52\x4c\x3f\x26\x8a\x9d\xfd\x7c\x45\x65\x75\x60\x1a\x2a\xdd\x49\x30\xbb\xfb\xa2\xd9\x2e\x14\x6e\xf2\x21\x84\x1b\xd4\x99\xfc\xe3\x88\x4d\xb6\xd6\x80\xba\x3d\x72\xa7\x59\xf2\x12\x2d\xc3\x6c\xe0\x7f\x53\xf4\xae\x24\x98\x9c\x60\x83\x74\x5a\x1c\xa9\x66\x15\x39\x22\xc5\x71\x99\x38\x52\xde\xd1\xa6\x39\xe1\x2f\xd9\xee\x34\x3f\x8b\xd5\x04\xfc\x8a\xd7\x34\x9c\x99\x30\x98\x37\xf8\x89\xba\x06\x22\x73\x47\x12\xde\x9c\xfa\x9f\x15\x41\xac\xfd\x4a\xe6\x98\xf7\x73\x0e\x33\x22\xff\xee\x07\x1c\x86\x18\x44\x81\xfd\xb5\xad\x8f\x3b\x6f\xbe\xb0\x87\x2d\x48\x2b\x6d\x3e\xc5\xd9\xc9\x54\xa0\x14\x9e\x34\x79\x98\xe7\x48\xa5\xbf\x87\xaf\x33\x40\x76\x7f\x37\xdf\xed\xdc\x44\x38\x82\x9c\x66\x09\xae\xb9\xc9\xdc\xf4\x6f\xed\x01\x2a\xf8\x3b\x48\x35\xa5\x6e\x46\x0c\x99\x6d\x9c\x4c\xcf\x98\x6e\x72\xf1\xf6\xf9\x37\xe3\x80\xbb\x97\xee\xc1\x33\x75\x46\xef\xb0\xd4\x7f\xe6\x11\xd2\xa1\xdc\xfe\x0d\x41\xf9\x9d\x21\xdb\x38\x6b\xc0\xff\x05\x00\x00\xff\xff\xf2\x06\xb2\x39\x4e\x17\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 5966, mode: os.FileMode(420), modTime: time.Unix(1629359558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x58\x5d\x53\x1a\x4b\x1a\xbe\x9f\x5f\x41\x41\x9d\xbb\xb3\x5b\x7b\x9d\xbb\x09\x8c\x66\x36\xc3\xcc\xd4\xcc\xe0\x39\xee\xcd\x94\xc7\xb0\x59\x37\x89\x58\x62\xb6\xea\xec\x55\x48\x54\x40\x41\x38\x89\xb8\x51\x49\x14\x3f\x22\x47\x03\xf8\x91\x08\xe1\x43\xff\xcc\x74\xcf\x70\xe5\x5f\xd8\xea\xee\x99\xa6\x19\xa2\xf1\xc6\x2a\xe1\x7d\xde\x7e\xfb\xfd\x78\xde\xa7\x09\x4d\x27\x5e\xbc\x48\xcc\x72\x32\x1f\x15\x4c\xe1\x57\x51\x37\xf4\x07\x81\x20\x28\xe6\xed\xa3\x53\xd0\x3c\x07\xb5\xf7\xa0\x5c\x0d\x72\xa2\x6a\xca\x8a\x31\x30\x70\x1a\x4d\x50\xae\xda\x17\x1d\xbb\xb3\xe3\xd4\xaf\xec\x5e\xbd\x5f\xf9\xda\xff\xb0\x07\x2a\x27\x60\x79\xd3\xea\xbc\x03\xed\x77\xa2\x1a\xe4\xb8\xd0\xf4\xf3\x97\xc9\x85\xf8\x3c\x17\x96\x62\xba\x21\x68\x66\x44\x90\x04\x43\x30\xc7\x78\x51\x12\x22\x0f\x02\x41\xf8\xbf\x5d\x78\x51\x02\x99\xdd\xfe\xe6\x01\xe8\xbd\x03\xd9\xbc\xbd\x72\x09\x5f\xa5\xec\xad\xc5\xfe\xf6\xb2\x7d\x75\x10\xa4\x50\x51\xc7\x41\x68\x31\x59\x16\xe5\xf1\x07\x81\x20\x31\xb0\x5a\x79\x50\xae\x3a\xd7\x45\xa7\x92\xb3\x5a\xb5\x9b\x6e\x6a\x04\x22\x29\x61\x5e\x42\xf7\x6a\x74\xc1\xd2\x21\x81\xb9\x07\xe7\xd3\x76\xfb\x28\xc8\xa1\x48\xe7\xe3\x4f\xe2\xb3\x0b\x33\x53\xcf\xb9\xa1\x20\x4d\x4d\xd0\x95\x98\x16\x16\x90\x03\x12\xe7\xc1\x99\xf3\xe5\xf0\xa6\x9b\x72\x1a\x87\xf6\xd1\xfb\xfe\xdb\x43\xab\xb5\x0a\xcb\x59\xb0\x74\xe1\xa4\xd6\xad\x56\x07\x96\xdb\xc1\x5b\x9c\x98\xff\x50\xe4\xfb\x7a\x02\x85\x86\xbd\x5e\x05\x39\xec\x6c\x8c\x8f\x49\x86\x19\xd6\x84\x88\x20\x1b\x22\x2f\x99\x61\x5e\xc6\x97\x23\xe7\xa0\x74\x74\xde\x3b\xf5\x03\x90\xae\xc1\x7c\xdd\x6a\xe5\x9d\x37\x3d\x72\x08\xce\x08\x2e\x70\xf8\x91\x10\x7e\x3c\xc8\x3d\x39\x91\x14\x9b\x00\xac\xd6\x9a\xbd\x5e\x85\x99\x26\xfa\x70\xbb\x05\x8a\xb9\x20\xa7\xf2\xba\xfe\x8b\xa2\x45\xe8\x81\x72\x4c\x22\xc9\x5c\xb6\x77\x53\x1e\xae\x6d\xff\xd9\xc6\x07\xa9\x9a\x38\xc1\x1b\x82\xf9\x58\x98\xf4\x23\xbc\x1b\xfa\x10\x1c\x17\xfa\x57\x22\xb9\xc0\x3d\x52\x74\xc3\xe4\x25\x4d\xe0\x23\x93\x83\x56\x23\xe9\x64\x7a\xd1\xcd\x2b\xb6\xa6\x57\x19\x4d\x27\xc5\xd9\x9d\x02\x49\xa7\xd7\x4f\xa3\x0e\xcc\x87\x93\xa6\xaa\x29\x7f\x17\xc2\xc6\x7d\x7d\x55\xbe\xd9\xdb\x75\x1c\xbe\x3e\xa9\x1b\x42\xd4\x74\x47\x64\x4c\x89\xc9\x11\x77\x42\x96\x32\x64\x1e\x60\xf9\x33\x2c\xb7\x45\x95\x14\x42\x41\xa6\xfc\x04\x2f\x4a\xfc\x43\x09\xd5\x4d\x54\x03\xce\xd7\x45\xd8\x2e\xa2\xcc\x5c\x5e\x04\x39\x51\x27\x1d\x8b\x43\xc4\xbe\xdc\x08\xac\xd6\x1a\x99\xad\x80\xa8\x06\xc0\xf2\xb9\x7d\x9c\xba\xe9\xe6\x60\xf9\xd8\x79\xd3\x83\x99\x22\x58\xd9\x81\xcd\x0e\x58\xd9\x0d\x92\x5c\x8a\x51\x55\xd1\x0c\x53\xd0\x34\x45\xf3\x6a\x00\xcb\xc7\x30\x7b\x05\x32\xa7\xa0\xd0\x20\xe3\x60\x6f\x2d\xc2\xd2\x29\xcc\xd7\xf1\x5d\x9b\x70\xff\x15\xdc\x39\x24\x5f\xc1\x8d\xb4\xd5\xb9\xc4\x61\xb3\x0e\x91\x2b\x73\x82\x97\x62\x28\xfa\x9f\x92\x01\xa7\x92\x83\xe5\xac\xfd\x67\x9b\xf8\xf1\x19\x2b\x86\x19\x56\xa2\x2a\xce\xb9\x0f\x84\xcd\xd1\xfc\xd6\x73\xb0\xf4\x65\x18\xf7\x8b\xa6\xc8\xe3\xe6\x98\xa2\x45\x79\x83\x22\xec\x93\x06\x28\xec\xc3\xdd\x2e\xe8\x16\xac\x56\x1e\xd6\xf6\xed\x8a\xef\x3c\x66\x42\xd8\x7a\xb8\x27\x66\xaf\xd0\x71\x99\x53\xd0\x58\xee\xbf\x3d\x1c\x46\xba\x1d\x70\x17\x8c\x94\x7d\x18\xe6\xb6\x90\x1c\x8b\xa2\xde\x59\x3a\x0b\xf8\x2e\x07\x6b\xfb\xa0\xd5\xba\xe9\xe6\x9c\xe6\x85\x73\x9d\x76\xc1\x94\x0f\xbc\x0e\x14\xf1\x79\xa4\xce\xa4\x1d\x90\x23\xeb\xfa\x03\xea\x7b\xb7\x17\x73\x60\x6d\x07\x6c\xef\xde\x74\xb7\x7e\x4a\x7e\x37\x08\x9d\x9f\x10\xa8\x97\x1f\xe1\x39\x2e\xf4\x32\x19\x9f\x1f\x0c\x38\xba\x78\x94\x37\xc2\x8f\xe8\x74\xf7\xd7\x37\x9d\x46\x23\xc8\x29\x9a\x38\x2e\xca\x6e\x4a\xa9\xc9\xda\xce\xb0\x55\x4c\x1f\x50\x2e\x1f\x36\x44\x1c\x0b\xe1\x13\x58\x3e\x06\x45\xc4\x66\xa4\xc9\x9c\xd4\x3a\x5a\x1e\xf5\x8a\x5d\x5c\x06\x7f\xbc\xc7\x1d\x86\xd1\x6c\xee\x11\x43\xd7\x0e\x08\x1e\x5b\xf0\x91\xa8\x28\xdf\xc6\x7b\x81\xa9\x27\x2f\x66\x66\x03\xc4\x9c\x70\x8c\xb3\x77\xc2\x30\x20\x1b\x9d\x26\x48\xbc\x21\x44\x98\xa1\x77\xc3\x3c\xaf\x50\xf6\xf5\x6a\x2d\x45\x78\x95\x1e\x1a\x53\x23\x3c\x3e\x14\x7d\x3a\x74\x98\x75\x5d\x87\xeb\xdf\xf0\x49\x13\x82\x26\x8e\x4d\x9a\x61\x25\xc2\x2c\xba\xfe\x71\xce\x69\xa4\x98\x6c\x09\x51\x5e\x94\xcc\x88\xa8\xbb\x34\xd0\x7f\x5d\xb7\x3a\x97\x64\x9b\x3a\x7b\x27\xf6\xa7\xd4\x6d\xe9\xf2\xb0\x6c\x31\x08\x1a\xe4\xbe\xf5\x97\xf2\x94\xba\x5c\xda\xa7\x05\xd6\xd1\x7f\x03\xfa\xf7\x98\x9e\x72\x3f\x29\xa7\x47\xfc\xc3\x58\xcc\x22\x2c\x0a\x66\x36\x86\xcb\x4f\x82\xc2\xc4\x4d\x02\xb2\xeb\x67\x0c\x6f\x73\x5c\x68\x3e\xfe\x74\x26\x31\xeb\x11\xb0\x26\x8c\x8b\x8a\x7c\xaf\x2d\x0b\x72\x6d\xb0\xb3\xc3\x12\x30\xb3\x1b\xb9\xd0\x7f\x13\xb3\x71\xcf\x2b\xda\xaf\xf7\xf3\xe9\x79\x18\xe2\xf5\x37\x55\xbb\x77\xee\xd4\x2b\x20\xf3\x76\x58\x46\x10\xfa\x74\xd6\x9a\xa0\xb0\xe1\x92\x01\xde\x27\x2c\x6b\xf6\x97\xf2\x76\x8f\x6c\x05\x31\xca\x8f\x0b\xb7\x01\x4b\x65\xf0\xa6\x70\x1b\x50\x35\xf5\x47\x8a\x86\x52\x28\xce\x05\xbc\x95\xc0\x71\xa1\xc4\x5c\x7c\x36\xb9\x30\x35\xfd\x8c\x1b\x17\x0c\x2f\x79\x5e\x55\x06\xc4\x86\x33\x85\x92\x32\x37\x9f\xf8\x77\x7c\x7a\x21\x1a\x7f\xf1\x5b\x7c\x9e\x76\x3f\x1f\x71\x69\xcd\xad\x23\xbe\xbb\xb7\x35\xd8\x11\x61\x18\x90\x8e\x30\xd9\x1c\x64\x69\x7b\xfe\xa9\x34\xf1\xe8\xf3\x96\xf9\x24\xe3\x34\xa2\x4b\x3c\xd4\x23\x5e\x37\xdd\x74\x23\x08\x36\x66\xd7\xf6\x4d\x37\x35\x82\xe5\x42\xb3\x89\x27\x71\x4e\x46\x73\xe6\xe9\x06\x57\x1d\x9a\x06\xaf\x3f\xc6\x7c\x7c\x69\x75\x36\x9c\x95\xd7\xf6\xeb\x6f\xb0\x74\xda\x4f\x17\xe0\xbb\xbc\xd5\x2b\x23\x52\x2e\x57\x61\xf6\xc8\xa9\xe4\x7e\x0e\x38\x8d\xa6\x5d\xcb\x82\xab\x25\x50\x7f\x63\x75\x3e\x93\x8f\xd1\x52\x6a\x94\xfe\x8a\x8e\xf9\x6d\x6a\xfa\xd9\xcb\x39\x7e\x7a\x3a\xf1\x72\x76\x81\x53\x79\x8d\x8f\x9a\x42\x54\x35\x26\xd1\x09\x85\xd7\xb0\x74\xea\xd5\x09\x5d\x5c\x8f\xa9\x2a\x29\x20\x62\xff\xf5\x06\xcc\x21\x35\x6b\x9f\x75\xc0\xc7\xd5\x20\xe7\xd3\x60\x70\xb7\xd2\x3f\xce\x31\x13\xeb\xb6\xf1\x43\x3e\xfc\x38\xa6\x9a\x7c\x38\xac\xc4\xe4\xfb\xea\x14\x70\x90\xb6\x3a\x3d\xe7\xcb\x27\x50\x68\xde\xa2\x56\xb8\xd0\xdc\xf3\x29\x3a\x82\xaa\xc4\xcb\x77\x89\x28\x76\x1c\xd0\x28\x97\xab\x5e\x19\x57\x3d\xf1\x5d\xb3\x7a\xd7\xf6\x7a\xd5\xaf\x77\x7f\x10\xa9\xcf\xb1\x2f\x52\xe6\xe1\xf0\x10\xa7\xde\x97\x95\x3b\x22\xf6\xa5\xe0\xce\x88\x3d\x6f\xa2\x24\xe8\xac\x4e\x75\xb5\x9b\xeb\x1b\xf9\x23\x42\x08\x2c\xe7\x41\x26\x0d\xf3\x7b\xec\x21\x43\x2c\x41\x3c\xd2\xa7\x09\xe9\x32\x62\xfd\x9d\xa7\x89\x26\xe8\x86\xa2\x09\x3e\x73\x98\xda\x03\x07\x79\xcf\x9c\xce\x99\x16\x4f\x26\x5e\xce\x4f\xc7\x47\xf3\xcc\x5c\xe3\x8e\xe0\xd9\xe6\xf2\x49\xdf\xc1\xdc\x0d\x09\xdd\xb3\x8f\x56\x7b\xcd\x37\x7d\xce\xf5\x36\xd2\x36\xb5\x03\x32\x46\x8c\x34\x1c\x61\x0d\x4f\xb2\xe6\xbd\x05\x40\x25\x0f\xa1\x21\xc1\xd3\x57\x58\xec\x80\xe6\xb9\xc7\x42\xb8\x29\x47\xfd\xb1\x2d\xc3\x78\xf5\x0d\xca\x28\x8e\x2d\x16\x83\xe3\x42\xcf\x9f\x4c\xcd\x91\xed\x4e\x79\xcf\x7d\xd9\x14\x73\xb0\x76\x08\x32\xa7\x68\x6c\xdd\x15\xdf\xfe\x9b\xab\x04\x24\x65\x5c\x94\xfd\x08\x2a\x04\x88\x77\x9c\x16\x6c\x3d\x58\xef\xe4\xb1\x6c\x7f\x4a\xc1\xda\x1e\xfa\x8a\x40\xec\xcd\x4e\x7f\x73\x39\x70\x8b\x24\xe2\x42\xd3\x33\x49\x2e\x2c\xea\x98\xce\xfc\x1c\x87\x22\xf5\xd6\x2b\xcc\x9e\xc0\x42\xc1\x6a\xd5\xec\xad\x45\xab\xd3\x01\x2b\x15\x84\xfe\xcf\x8b\x70\x62\xf6\x9f\x33\x4f\xb9\x89\xa8\x19\x56\xe4\x31\x71\x7c\xf0\xae\x22\x2b\x87\xd9\xcf\x03\x1b\xff\x1b\x9d\x9a\x0e\xba\x82\xa9\xc5\x9d\xbd\xc1\x85\x66\xe6\xd0\x4a\x1b\xfc\xb4\x80\x5f\x44\xf6\xd6\xa2\xa8\xc2\xfa\x57\xa4\x39\x9a\xe7\xb0\x9c\xc5\xff\xd1\x17\x8d\xd3\x68\xf6\xd3\x79\xb8\x71\x4a\xac\xe9\xef\x0f\xbe\x57\x13\x6a\x9e\xbd\x13\x90\xdf\xc5\x42\x29\x47\x45\x5f\x3f\xbd\x02\xd7\xaf\x30\x4a\x94\x27\x78\x49\x8c\x60\x7b\x50\x3e\x05\x1f\x5e\xd1\x67\x83\xb7\x6d\x69\x09\x77\x60\xa6\x88\x03\x23\x86\x64\x5d\xa0\xca\x07\xe8\x9e\x76\xbe\x36\xc1\xd1\x2a\xf9\x1e\xbc\xcd\x81\x5a\xd1\xee\xfd\x41\x2f\xfa\x97\xb9\x44\xe2\x39\x72\xa9\x2a\x8a\x34\x92\x45\x71\x2e\x00\xcf\x76\xbf\xab\x61\xd0\x23\x8e\xf9\x1d\x24\xe8\x4a\xa5\xe4\xc2\xfc\xef\x1c\x5a\xf4\xba\xa1\x4d\x8e\xbe\x8c\x9d\xc6\x21\xfc\x78\x09\x3f\xba\xab\x05\x57\x1e\x3d\x0e\xdd\x23\xe8\xd4\xf9\xf0\x31\x5d\x88\xdc\x81\x86\xb5\x7d\x67\xef\xc4\xa3\x48\xca\xc3\x94\x7e\x3c\xfe\x52\x35\x65\x42\x8c\x08\x1a\x95\x20\x4e\xfa\x18\xac\x54\x61\xb5\x02\xba\x05\x90\xd9\x06\x9d\x36\xfd\x0d\x87\x54\x06\x66\x57\xc1\x4a\x95\xe8\x64\xf6\x9d\xc3\x30\x83\x31\xa9\x0a\xd4\x21\xdd\x9e\x84\x18\xe8\x0e\x45\x0d\xd7\x59\x22\x5f\x05\x10\xf9\xfc\x3c\xcc\x01\x3f\xde\xa1\x03\xc2\xfb\xc1\x02\xc1\x65\xb2\xb7\x16\xc9\x87\x76\x6d\xc3\x2e\x1d\x22\x46\xc7\x4f\x99\x01\x45\x27\xe3\xc9\x24\x12\xb6\xba\xa0\xeb\x48\x95\x3d\x16\x26\x87\x58\xc8\xfd\x3e\xf0\x2c\xfe\x7b\x00\x15\xba\x94\x71\xb5\x96\xaa\x29\x88\xb6\x99\x36\xf5\x4c\x09\x3d\x38\xbd\xcf\x20\xb7\x41\xc2\x73\x21\x48\x28\xc9\x0a\x2b\x6d\xd9\xa7\x8b\x97\x51\x14\xd4\x42\x62\x7e\xea\x69\x9c\xc3\x85\x42\x61\xa1\x5a\xfd\xaa\x8b\x06\xcb\x1b\xe8\xef\xeb\x2a\x2c\x14\xad\xab\x6d\x50\x5a\x0e\x72\xff\x0f\x00\x00\xff\xff\xc6\x46\xf2\x89\x11\x14\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 5137, mode: os.FileMode(420), modTime: time.Unix(1629359729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
