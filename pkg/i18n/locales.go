// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcb\x72\xa4\x38\x16\xdd\xf3\x15\x32\x19\xb5\xab\xa9\xe8\xb5\x77\x14\x89\x6d\xa6\x48\x20\x80\x74\x8f\x67\x43\x28\xe1\x66\xa6\xc6\x20\x11\x92\xb0\x27\x7b\x37\xff\x35\xff\x34\xbf\x30\x71\x85\x78\xe4\xc3\x5d\xae\xe8\x55\x55\x3a\x74\x1f\xba\x8f\x73\x8e\x58\x55\xa2\x6d\x05\x77\x62\x6f\x13\x94\xc1\x3f\xc2\xbc\xc8\xef\x89\x1b\xd3\x16\x08\x6d\x24\xd0\xfa\x44\xe0\xdf\x4c\x69\xe5\x3a\x61\x5a\xc6\x49\x31\x1f\x4a\x1b\xa0\x0a\xc8\x9e\x35\x0d\x61\x9c\xe8\x23\x10\x09\x07\xa6\xb4\x3c\x91\x30\x25\x62\xf8\x93\x3a\x29\x0d\x2d\x51\xa0\x35\xe3\x07\xd2\xd1\x03\xb8\x8e\xe3\xac\xaa\xa6\x57\x1a\xa4\xe3\x47\xdb\xbc\x08\xb2\x72\x1d\x44\x41\x11\x94\x0f\x5e\x18\x05\xeb\x7b\xe2\x56\x94\x13\x2e\x34\xa9\xa1\x01\x0d\xc4\x1e\xc7\x40\x55\x2f\x25\x70\x4d\x94\xa6\x1a\xdc\xc9\x41\x98\x9b\xf4\xb2\x6d\x1c\x87\xf1\xe3\x3d\x71\x8b\xe3\xc2\x4c\x19\x67\xb2\xe7\x9c\xf1\xc3\x95\x51\x94\xf8\x5e\x74\x4f\xdc\xb0\xed\x84\xd4\x93\x55\x45\x39\x5a\xed\x80\xf4\xdd\x41\xd2\x1a\x6a\x17\x33\x97\x50\x03\xd7\x8c\x36\xce\x59\xd2\x65\x16\xe4\xc9\x36\xf3\x83\x7b\xe2\x3e\x50\xd6\x40\x4d\xb4\xb0\xf9\xdf\x91\xe2\x08\x12\x30\x0f\xca\x09\x55\x4a\x54\x8c\x6a\xa8\xc9\x51\x28\x4d\x7a\x5e\x83\x24\xfa\xc8\x14\x79\x85\x93\xfb\x81\xdb\xf2\x9f\x49\xfc\x4b\xbe\xff\x10\x1c\x6e\xf8\x7e\xf0\xb6\x51\x51\xfa\x59\xb0\x0e\xe2\x22\xf4\xa2\xd2\xf7\x62\x53\x85\x21\xec\x3d\x71\xd7\xb0\xa7\x7d\xa3\xc9\x7c\xd3\x45\x29\x86\xa0\xb5\x3b\x8c\x8c\xff\x14\xf8\x3f\xe6\xae\x99\x9a\xcf\x56\x1c\xe7\x68\x36\x35\xf3\x60\x46\x4b\x99\xff\xf7\x0a\xa4\x39\xe3\x3a\xa9\x97\xe7\xbf\x27\xd9\x7a\x4a\x26\xde\x46\xd8\x91\x8e\x2a\xf5\x2e\x64\x4d\xc6\x79\xd8\x01\xd9\x35\x94\xbf\xfe\xef\xbf\xff\x71\x9d\x34\x0b\x9f\xbd\x22\x28\x7f\x04\x2f\x97\x86\x98\x49\x27\xd9\x1b\xd5\x80\x17\x5f\x64\x31\x9b\x3b\x2b\x2c\xbf\xf3\x94\xe4\x45\xe9\x45\x59\xe0\xad\x5f\xe6\xf1\x7e\xc2\xce\x5c\xee\x80\xed\x8c\xb1\x98\x2e\x7d\xb3\x21\x43\x67\xb1\x27\xd6\xc5\xa2\x31\xef\x4c\x1f\x4d\x01\xec\xa0\xdd\xf2\x5b\x7e\x7f\x29\xd3\x2c\xf9\x7b\xe0\x17\x7f\x29\x44\x27\xc5\xbf\xa0\xd2\xae\x93\xbf\xe4\x45\xb0\x29\xed\x16\x3f\x24\xdb\x78\x7d\x7b\x89\x1b\x51\xd1\x06\x37\x78\xcf\xa4\xd2\xa6\x50\x71\x82\x76\xde\xb3\x17\x46\xde\xf7\x08\x47\x24\x16\x24\xec\x08\x7d\xa3\xac\xa1\xbb\x06\x5c\x27\xcc\x87\x2d\x32\x77\x58\xec\x2f\x1b\x56\x6a\x70\x8a\x09\xbb\x43\xbd\xc3\x4d\x9a\x64\x45\x19\x64\x59\x92\x8d\x3d\x8b\x05\xa9\xa9\xa6\x78\x4d\x6b\xf6\x4e\x15\xd9\x8b\x9e\xd7\x77\xc4\x66\x5a\x1d\xa1\x7a\x35\x79\xda\x23\x7b\xd6\xc0\xdd\xb9\x53\x74\x57\x3e\x7b\xd1\x16\x33\x0d\xda\x4e\x9f\x06\xbf\x82\x93\x86\x71\x20\x5f\xd4\xf9\xf9\xdf\xb3\x24\x7e\x2c\x1f\x92\x6c\xe3\x61\xea\x21\xaf\x84\x94\x50\x69\x32\x04\x10\xb2\xa5\xfa\x43\xe3\xc5\x22\x2d\x0b\xeb\x2f\xb6\x40\xe8\xe1\x12\x1f\xfa\xb0\x2d\x8f\xb7\x9b\x7b\xe2\x7a\x44\x0b\x4d\x1b\x22\xf6\xe4\x8b\x22\x52\xbc\x2b\xfc\xaf\xb9\x00\x95\x40\xe8\x8e\x63\x42\xcd\x57\xa2\x5e\x59\x77\xd3\x4f\xee\x3d\x9f\x03\x85\xa2\x6f\x76\x5a\xbe\xa8\xaf\x44\x02\x55\x82\xdf\x63\x12\x8e\xb3\xc2\x25\x9c\xd7\x0f\xaf\xb0\xf1\x0a\xff\x69\x5c\xa1\x71\xff\x98\x22\x6c\xac\x8b\xeb\x24\x59\xf8\x18\xc6\xf6\xca\xcb\xf3\x42\xb2\x03\xe3\xb4\xf9\xc8\x70\x9b\xcf\xa8\xeb\xf9\x45\x68\x12\x2d\x46\x2c\xb0\x30\x0d\x1c\x67\x6a\xd1\x73\xc1\x35\xad\xb4\xe9\x3a\xad\x5b\xc6\x91\x64\xa8\x16\xf2\xce\x3a\x5c\x16\x3e\x16\x44\xf5\xd5\xd1\x38\x34\xc3\xeb\xad\x37\x61\x7c\x0d\x72\x18\xb4\xb6\x40\x67\x9c\x0e\x29\x5c\x01\xdd\xdd\x79\xd2\x59\x10\x79\x45\xb0\x5e\xec\xe6\x16\xcd\x8e\x14\x53\x5f\x6e\xa0\x5d\x3c\x93\x42\xb4\xf6\xd2\x29\x83\x6d\xba\xf6\xa6\x0c\x9a\x9a\x76\x97\x81\xa1\x66\x43\xdc\xe7\x20\x0b\x1f\x5e\x4a\x3f\x59\x2f\x88\xf1\x19\x24\xdb\xb3\x8a\x6a\x26\x38\xa9\x44\x0d\x04\xa4\x14\xd2\x75\x82\x8d\x17\x46\xe5\x3a\xcc\xed\x8a\x6e\x28\x6b\x46\xde\x55\x66\x74\x6a\xa6\x3e\x59\xd8\xd1\xdb\xb2\xbd\x41\x8b\x0e\x5b\xaa\xab\x23\xd9\x9b\xd1\x1a\xb0\x01\x69\x60\x9a\x9f\x1c\x7f\x4d\xb9\x62\x69\xfe\x84\x03\xc6\x19\xb9\x74\x62\x40\xe1\x9e\xb8\xef\x52\xf0\xc3\xcc\x12\x44\xc8\x85\xc9\x90\xa0\x81\xeb\x29\xb9\x4b\xb8\x76\x56\xa8\x48\x04\x1f\xf1\x35\x0b\x1e\xc3\x24\xfe\x2c\x5f\x93\xc1\xf8\x67\x08\x8b\x34\x8b\xa1\xf0\xdf\x31\x10\x52\xf5\xa7\xc3\x18\x9e\xfe\x19\x8c\x37\x94\x9f\xcb\x96\x01\x32\xfd\xa1\xb0\x07\xd0\x4b\x42\xb9\x81\x96\x95\xe0\x7b\x76\xe8\xa5\x99\x1b\xd3\xb8\x70\xe3\x3d\x06\x1f\xbb\x62\x2d\x3d\xc0\xe7\x1c\xa5\x65\xfe\x94\x64\x03\x74\xaa\x7e\xbf\x67\x15\x43\x81\x16\x76\x58\x16\xd1\x01\x57\x9a\x56\xaf\xce\x63\x50\x8c\x1d\x18\x3b\x1c\x8b\xb1\xc8\x06\x20\xf1\xbc\xdd\x9b\x0d\xb4\x3b\x90\xd3\xea\x79\x6b\x9c\xa7\x2f\x8a\x4c\xdb\xb6\x03\xe0\x84\xd6\x46\x94\x2d\x17\x74\xc4\x81\x2f\xea\x0c\x53\x8c\x7f\xcb\xfa\x36\xc4\xa4\x85\xec\x2e\x7f\x2c\x84\xac\xc1\x2d\x15\x34\xda\x3e\x79\x79\x69\xdb\x83\xb4\x6a\x0d\x16\xad\x9c\x5a\xe3\xdf\x40\x18\x67\xc5\x45\x0d\x4e\x8c\x9b\x3e\x2a\x11\xab\x64\xcb\xc2\xcb\x7f\x20\x2d\xd4\x35\xc1\x43\xb8\x05\x56\x14\x9b\x9f\xe3\xd4\x58\x6d\xfb\xb5\x1b\x1a\xf6\x4e\x99\x26\x4c\x93\x5a\x70\xf8\x86\x01\x76\xb4\x7a\xed\x3b\xaf\xaa\x44\xcf\xb5\x93\x7a\x99\xb7\x29\x83\x4d\x5a\xbc\x5c\xb6\xad\xa3\x92\xb6\xa0\x41\x2a\x24\xfe\xa2\xcc\xb7\x69\x3a\x74\x77\xcb\x55\xdf\x21\x27\xe2\x0c\x9f\x3a\x14\xdf\xe7\xf2\xef\x0c\x9b\x06\x8c\x98\xb4\xcd\x77\xcf\xff\xb1\x4d\x4b\xcf\xf7\x93\x6d\xfc\x2b\x2a\xe7\x2c\xf1\x4f\xcb\x1d\x67\x85\x2b\x73\x21\xa5\x3f\x11\x0d\xad\x7e\x21\x88\xed\xea\x77\x93\xa3\x63\xef\xf8\x10\x46\x41\xbe\x14\xa3\x76\x89\x6c\xdb\xf4\x74\x29\x23\x5e\xc8\x0e\xf6\x42\x02\x51\xef\x4c\x57\x47\x7c\x24\x2d\x0e\xd0\xe1\xda\x67\xab\x3f\x44\xb9\x7e\xe1\xec\x00\x8d\xd1\x10\x6a\xd2\x77\x66\xd8\x17\x66\x59\x90\x17\x49\x16\x5c\xdb\x49\x50\x5a\x48\xc6\x0f\xe7\xeb\x91\x81\x12\xbd\xac\xe0\xba\x86\x8b\x6b\xfe\xf4\x72\xb3\x88\xbc\xad\x71\xe7\x9d\x99\x14\xed\x58\xfa\x1d\x34\x02\xa9\x4b\x8b\x73\x6c\x2b\xf0\x31\x23\x3a\x90\x96\x03\xa7\x7d\xea\x40\xa2\x58\x33\x1b\x35\xc8\xa2\x2b\x48\x78\xb2\x92\x79\x82\x04\xd7\x99\xde\x57\x03\xcc\x04\xf6\xe4\x78\x7d\x33\x0c\x03\xcc\xa4\x91\x17\xdf\xf0\x99\xda\x91\x59\xf8\xbc\x18\xf6\x6b\x9b\xef\x97\x43\xbd\x30\x76\x56\xa8\x0a\x06\xd1\x30\x21\xdb\x30\x48\xf9\x89\x57\x47\x29\x38\xfb\x03\x5b\xac\x40\x0e\xc4\xfe\x9b\x95\x18\x51\xf2\x18\xc6\x97\x36\xdb\xa5\xb2\x42\x62\xbc\xb3\xa7\x67\xa9\x50\xcc\x0f\xf5\x4e\x8a\x23\xdb\x31\xad\x08\x9e\xb1\x31\xf6\x52\xb4\xa4\x11\x87\x03\x0e\x18\xe3\xdf\x3e\x23\xcc\x9c\x55\xc5\x94\xe3\x87\xb9\x01\xb0\x4b\x54\xc3\x17\x02\x53\x44\x53\xf5\x7a\x89\x60\x68\xfa\xd6\xfa\x86\x66\x9c\xe7\x4d\xe9\x27\xf1\x43\xf8\x38\x3f\xcc\xfc\x25\x01\x5d\x51\xfe\x6c\x70\xf9\x45\xa1\xb8\x24\xaf\x8f\x06\xad\x86\xae\x11\xa7\xd6\x60\x61\x43\xf9\x27\x07\xce\x59\xb1\x0e\xa9\x70\xca\x13\xe3\x01\xd7\x20\xa1\xc6\xd7\x94\x82\x83\x71\x89\x29\x34\xac\xd2\x6a\xc6\x13\x93\x3b\x96\x76\x3e\xf6\x95\x74\xe7\x2f\x33\x7a\xa0\x8c\x4f\x1f\x61\x96\x4f\xb1\x30\xc5\x77\x02\x66\x58\x55\x7d\xc7\xa0\x26\x94\xd7\x8b\x24\x25\x18\x4f\xb5\x31\x0e\xe3\x67\x2f\x0a\xb1\x1c\x61\x37\x48\xf3\x37\xda\xb0\x7a\xe4\xf1\xc5\xe3\x99\xf7\x48\xc0\xf8\xf4\x38\x00\xc7\xab\x0f\xd7\xa0\x75\x2d\x41\x29\x30\x11\x7f\xfb\x76\xad\x0f\x94\xa6\xd2\x5c\xc6\x9e\x34\xd9\xa8\x7e\xc7\x01\x07\xcf\x94\xe9\x6f\x9d\x10\x0d\x86\x4b\x93\x24\xba\xd9\xa7\x30\x25\x78\x66\x41\xf4\x37\x60\x78\x7a\x7d\x0e\x0a\xea\xfc\xd6\x13\x41\x0f\x1a\x50\x69\x79\x72\x50\x7c\xe4\x45\xf6\x72\xfd\xd8\x2f\x96\x1f\xaf\xc4\x7e\xf8\x5e\x42\x65\x75\x64\x1a\x2a\xdd\x4b\x30\x7c\x77\x43\x5f\x5a\x50\x9a\xb0\x72\xc4\xdb\x34\x4b\x9e\xc3\x75\x90\x4d\x4a\x67\x89\xb9\x95\x04\x73\x13\x6c\x6b\xaf\x45\x4b\x35\xab\x48\x8b\x64\x6e\xf3\x6f\x29\xef\x69\xd3\x9c\xf0\x8f\x6c\x7f\x1a\x60\x51\xda\x18\x6a\x01\x59\xc5\x4b\x1a\x9c\x85\x30\x48\x35\x24\x6b\x57\x7e\xa2\xec\x3b\x92\xf0\xe6\x34\xfe\x56\x04\x11\xf2\x2b\x39\x47\xaa\x9f\xb3\xf5\x8c\xd7\xfb\x3f\x61\x6b\x62\x70\x00\x0e\xb7\xf8\x13\x99\xea\x8c\xdc\x66\xee\xa2\x95\x36\x5f\x6c\xcc\x3e\xfd\x3f\x00\x00\xff\xff\xd9\x68\x45\x34\x9b\x14\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 5275, mode: os.FileMode(420), modTime: time.Unix(1618298845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x58\xdd\x52\xdb\x48\x16\xbe\xd7\x53\xb8\xec\x9a\xbb\xd9\xad\xbd\xce\x9d\x62\x0b\xa2\x8d\x2c\xa9\x24\x99\x59\xf6\x46\xc5\x10\xef\x2c\x3b\x60\x53\xfc\x6c\xd5\xee\x55\x1c\x7e\x6c\x13\x1b\x7b\x12\x60\x03\x38\x01\x13\x1c\x3c\x30\xfe\x01\x26\xd8\xb1\x6c\x78\x19\x75\xb7\x7c\xc5\x2b\x6c\x75\xb7\xd4\x96\xed\x30\xe1\x12\xeb\x9c\xd3\xa7\xcf\x39\xdf\xf7\x9d\x26\x34\x9b\x5c\x58\x48\x26\x38\x99\x8f\x0a\xa6\xf0\x37\x51\x37\xf4\x27\x81\x20\x28\xe6\xd1\x59\x13\xb4\xae\x40\xed\x1d\x28\x55\x83\x9c\xa8\x9a\xb2\x62\x0c\x0c\x9c\x46\x0b\x94\xaa\xe8\xda\x42\xd6\x91\x53\xbf\x45\xbd\x7a\xbf\xfc\xb9\xff\xfe\x04\x94\x2f\xc0\xe6\xbe\x6d\xbd\x05\x9d\xb7\xa2\x1a\xe4\xb8\xd0\xec\xfc\xea\xf2\x4a\x7c\x89\x0b\x4b\x31\xdd\x10\x34\x33\x22\x48\x82\x21\x98\x13\xbc\x28\x09\x91\x27\x81\x20\xfc\xdf\x31\xbc\xde\x05\x99\xe3\xfe\xfe\x29\xe8\xbd\x05\xd9\x3c\xda\xba\x81\x2f\x53\xe8\x60\xbd\x7f\xb8\x89\x6e\x4f\x83\xcc\x55\xd4\x49\x12\x5a\x4c\x96\x45\x79\xf2\x49\x20\x48\x0d\xec\x76\x1e\x94\xaa\xce\x5d\xd1\x29\xe7\xec\x76\xed\xbe\x9b\x1a\x73\x91\x94\x30\x2f\xe1\x7b\x35\xba\x60\xa3\x42\xdd\xdc\x83\xf3\x69\xd4\x39\x23\x89\x2e\xc5\x5f\xc4\x13\x2b\x73\x33\xf3\xdc\x50\x8e\xa6\x26\xe8\x4a\x4c\x0b\x0b\xd8\x9f\xa6\x79\x7a\xe9\xfc\x5e\xb9\xef\xa6\x9c\x46\x05\x9d\xbd\xeb\xbf\xa9\xd8\xed\xd7\xb0\x94\x05\x1b\xd7\x4e\x6a\xc7\x6e\x5b\xb0\xd4\x09\x3e\x10\xc4\xfc\xbb\x22\x3f\x36\x12\x28\x34\xd0\x4e\x15\xe4\x48\xb0\x09\x3e\x26\x19\x66\x58\x13\x22\x82\x6c\x88\xbc\x64\x86\x79\x99\xdc\x8d\x9e\x83\xab\x61\xbd\x73\xea\xa7\x20\x5d\x83\xf9\xba\xdd\xce\x3b\x6b\x3d\x7a\x08\x29\x08\xe9\x6f\xf8\x99\x10\x7e\x3e\x28\x3d\x3d\x91\xf6\x9a\x3a\xd8\xed\x6d\xb4\x53\x85\x99\x16\xfe\xf1\xb0\x0d\x8a\xb9\x20\xa7\xf2\xba\xfe\x83\xa2\x45\xd8\x81\x72\x4c\xa2\xb5\xdc\x44\xc7\x29\xcf\xaf\x83\x7e\xed\x90\x83\x54\x4d\x9c\xe2\x0d\xc1\x7c\x2e\x4c\x8f\x7a\x78\x37\x1c\xf1\xe0\xb8\xd0\x3f\x93\xcb\x2b\xdc\x33\x45\x37\x4c\x5e\xd2\x04\x3e\x32\x3d\x98\x34\x5a\x4e\xdf\x28\xba\x75\x25\xd6\xec\x2a\xe3\xe5\x64\x7e\xc8\x2a\xd0\x72\x7a\xe3\x34\x1e\xc0\x7c\x3a\x6d\xaa\x9a\xf2\x57\x21\x6c\x3c\x36\x56\xf9\x0b\x3a\xac\x93\xf4\xf5\x69\xdd\x10\xa2\xa6\x8b\x90\x09\x25\x26\x47\x5c\x80\x6c\x64\x28\x1c\x60\xe9\x37\x58\xea\x88\x2a\x6d\x84\x82\x4d\xf9\x29\x5e\x94\xf8\xa7\x12\xee\x9b\xa8\x06\x9c\xcf\xeb\xb0\x53\xc4\x95\xb9\xb9\x0e\x72\xa2\x4e\x07\x96\xa4\x48\x62\xb9\x19\xd8\xed\x6d\x0a\xad\x80\xa8\x06\xc0\xe6\x15\x3a\x4f\xdd\x77\x73\xb0\x74\xee\xac\xf5\x60\xa6\x08\xb6\x8e\x60\xcb\x02\x5b\xc7\x41\x5a\x4b\x31\xaa\x2a\x9a\x61\x0a\x9a\xa6\x68\x5e\x0f\x60\xe9\x1c\x66\x6f\x41\xa6\x09\x0a\x0d\x8a\x06\x74\xb0\x0e\x77\x9b\x30\x5f\x27\x77\x6d\xc1\x8f\x2f\xe1\x51\x85\x7e\x82\x7b\x69\xdb\xba\x21\x69\xfb\x03\xe2\x50\xe6\x14\x2f\xc5\x70\xf6\xdf\x2d\x07\x9c\x72\x0e\x96\xb2\xe8\xd7\x0e\x8d\x33\x6c\xfc\x83\xa6\xc8\x93\xe6\x84\xa2\x45\x79\x83\x99\xa3\x8b\x06\x28\x7c\x84\xc7\x5d\xd0\x2d\xd8\xed\x3c\xac\x7d\x44\xe5\x11\x3f\xdf\xa4\xfb\xeb\xea\x1e\x97\xbd\xc5\xa8\xcf\x34\x41\x63\xb3\xff\xa6\x32\xec\xe9\xf6\x54\x8e\x45\x71\x33\x37\x2e\x03\xae\x0f\x49\x8e\x9e\x06\xda\xed\xfb\x6e\xce\x69\x5d\x3b\x77\xe9\xaf\x3a\xeb\xfc\x94\xc0\x86\x0f\x07\xb0\xef\xde\xe3\x01\x74\x87\x22\x07\xb6\x8f\xc0\xe1\xf1\x7d\xf7\xe0\xbb\x65\x32\xc0\xab\xcb\xf1\xa5\x01\x52\x70\xc2\x51\xde\x08\x3f\x63\x30\xe9\xef\xec\x3b\x8d\x46\x90\x53\x34\x71\x52\x94\xdd\x3b\x31\x93\xed\xa3\x61\xab\x98\x3e\xa0\x2e\x3e\x6c\x88\x24\x17\x0a\x4c\x58\x3a\x07\x45\x4c\x0b\xb4\x5b\x4e\x6a\x07\x93\x70\xbd\x8c\x8a\x9b\xe0\x97\x77\xa4\x55\xc4\xdb\x5f\x33\xcc\x74\xb5\x53\xea\x4f\x2c\xf8\x48\x54\x94\x1f\x22\x90\xc0\xcc\x8b\x85\xb9\x44\x80\x9a\x53\xb0\x3a\x27\x17\x3e\x2a\xf1\x67\xa7\x09\x12\x6f\x08\x11\x1f\x7a\xdc\x34\xaf\xca\x8c\xc6\x28\x56\x82\x9c\x14\xe1\x55\x76\x68\x4c\x8d\xf0\xe4\x50\xfc\xeb\xd0\x61\xf6\x5d\x1d\xee\x7c\x21\x27\x4d\x09\x9a\x38\x31\x6d\x86\x95\x88\x4f\x30\xfa\xe7\x39\xa7\x91\xf2\x55\x4b\x88\xf2\xa2\x64\x46\x44\xdd\xc5\x53\xff\x55\xdd\xb6\x6e\xa8\x2a\x39\x27\x17\xe8\x53\xea\xa1\x72\x79\xbe\xfe\x66\x50\x6f\x90\xfb\xd2\xdf\xc8\x33\x0e\x70\xf9\x93\x35\x58\xc7\x7f\x0d\x78\xd4\xa3\x4c\x46\xa2\xb4\x9d\x1e\x83\x0e\xfb\x12\x38\xfa\xbd\x60\x66\x6f\xb8\xfd\x34\x29\xc2\x80\x34\x21\x54\xbf\xf4\x11\x20\xc7\x85\x96\xe2\x3f\xcd\x25\x13\x1e\x93\x69\xc2\xa4\xa8\xc8\x8f\x92\x2b\x90\xeb\x80\xa3\x23\x3f\x93\xf9\x44\x86\x0b\xfd\x37\x99\x88\x7b\x51\xb1\x50\x3d\x2e\xa6\x17\x61\x88\x20\xd7\xaa\xa8\x77\xe5\xd4\xcb\x20\xf3\x66\x58\x8e\x29\x0f\x39\xdb\x2d\x50\xd8\xa3\x20\xa6\xc4\xec\xa7\x9f\xfe\x46\x1e\xf5\x28\xbd\x8a\x51\x7e\x52\x78\xc8\x71\xb7\x04\xd6\x0a\x0f\x39\xaa\xa6\xfe\x4c\xd1\x70\x09\xc5\xc5\x80\xc7\xad\x1c\x17\x4a\x2e\xc6\x13\xcb\x2b\x33\xb3\x3f\x73\x93\x82\xe1\x15\xcf\xeb\xca\x80\x59\x48\xa5\x70\x51\x16\x97\x92\xff\x8a\xcf\xae\x44\xe3\x0b\x3f\xc6\x97\xd8\xf4\xf3\x11\x97\x8e\xdc\x3e\x92\xbb\x7b\xf4\xeb\x87\x88\x8f\xb9\x18\x84\x29\x05\x53\xf5\xf3\xe2\x33\x8d\x77\xb1\xf4\x10\x3e\x29\x9c\xc6\x04\xde\xf3\x7a\xc6\xeb\xa6\x5b\x6e\xec\x42\x8c\xfd\xfa\x77\xdf\x4d\x8d\xf9\x72\xa1\x44\xf2\x45\x9c\x93\x31\xce\x3c\x01\x76\xb7\x2c\xd3\xe0\xf5\xe7\x84\x47\x6f\x6c\x6b\xcf\xd9\x7a\x85\x5e\x7d\x81\xbb\xcd\x7e\xba\x00\xdf\xe6\xed\x5e\x09\x93\x69\xa9\x0a\xb3\x67\x4e\x39\xf7\x7d\xc0\x69\xb4\x50\x2d\x0b\x6e\x37\x40\x7d\xcd\xb6\x7e\xa3\x3f\x83\x7a\x0e\x36\x76\xff\x8c\x8f\xf9\x71\x66\xf6\xe7\xd5\x45\x7e\x76\x36\xb9\x9a\x58\xe1\x54\x5e\xe3\xa3\xa6\x10\x55\x8d\x69\x7c\x42\xe1\x15\xdc\x6d\x7a\x7d\xc2\x17\xd7\x63\xaa\x4a\x1b\x88\x59\x7b\xa7\x01\x73\x78\x2b\x44\x97\x16\xf8\xf0\x3a\xc8\x8d\x2c\x33\xf0\xb8\xdc\x3f\xcf\xf9\x10\xeb\x8e\xf1\x53\x3e\xfc\x3c\xa6\x9a\x7c\x38\xac\xc4\xe4\xc7\x0a\x3e\x38\x4d\xdb\x56\xcf\xf9\xfd\x13\x28\xb4\x1e\x90\x7d\x2e\xb4\x38\x3f\x93\x18\xd9\xf2\xbe\x11\xd6\x0f\x8a\xf1\xb0\xbe\x6d\xf9\x29\xa9\x13\xe7\xe6\x3e\x21\x4a\x82\xee\x5f\xa4\xdc\xe5\xc2\x8d\x8f\x53\xa5\x4a\x0d\x36\xf3\x20\x93\x86\xf9\x13\x7f\xfe\x43\xe8\xa3\x11\xd9\xea\x4c\xbb\x47\xad\xbf\xb2\x3a\x6b\x82\x6e\x28\x9a\x30\x62\x0e\x53\x27\xe0\x34\xef\x99\xb3\xf9\xd5\xe2\xcb\xc9\xd5\xa5\xd9\xf8\x78\x49\x7c\xd7\xf8\x83\xe4\xfd\x4d\x1b\xd9\xcd\x06\xf3\x3c\xb4\x89\x5d\x7e\xb0\x3b\xdb\x23\x53\xed\xdc\x1d\x62\xad\xaf\x9d\xd2\xf1\xf4\xed\x2e\x63\x68\xf4\x76\xaa\xbc\x47\xac\x6c\x47\xa7\xf0\x16\xbc\x7d\x83\x2c\x67\xa0\x75\xe5\xa1\x5b\x95\x78\xf9\x2b\xf1\xfc\xdd\xf5\x45\x1d\x19\xc0\x71\x3f\x7f\xb3\x7c\x7e\x5c\x68\xfe\xc5\xcc\x22\x55\x4d\xc6\x27\xee\xea\x5d\xcc\xc1\x5a\x05\x64\x9a\x18\x0e\xae\x74\x76\xfe\xe2\x2a\xac\xa4\x4c\x8a\xf2\xa8\x07\x13\x58\x1a\x9d\x94\x85\x58\x0f\x64\x93\x3e\xe6\xd0\xa7\x14\xac\x9d\xe0\x4f\xd4\x05\xed\x5b\xfd\xfd\xcd\xc0\x03\xab\x06\x17\x9a\x9d\x5b\xe6\xc2\xa2\x4e\x68\x62\x94\x3b\x70\xa6\x9e\x6c\xc1\xec\x05\x2c\x14\xec\x76\x0d\x1d\xac\xdb\x96\x05\xb6\xca\xd8\xfb\xdf\x0b\xe1\x64\xe2\x1f\x73\x3f\x71\x53\x51\x33\xac\xc8\x13\xe2\xe4\x60\xf1\xa7\x54\xee\xd3\xbd\x81\xcd\xe8\x1b\x92\x99\x0e\xa6\xc2\xd7\x8b\x3f\x9c\x0d\x2e\x34\xb7\x88\xa5\x62\xf0\xf4\x25\x2b\x3b\x3a\x58\x17\x55\x58\xff\x8c\xb5\xbc\x75\x05\x4b\x59\xf2\x17\x5b\xb9\x9d\x46\xab\x9f\xce\xc3\xbd\x26\xb5\x66\xef\xe3\x91\xb5\x1e\x0f\xcf\xc9\x05\xc8\x1f\x93\x05\x24\xc7\x96\xa9\x7e\x7a\x0b\xee\xdc\x12\x2f\x51\x9e\xe2\x25\x31\x42\xec\x41\xa9\x09\xde\xbf\x64\xfb\xb0\xa7\x62\xac\x85\x47\x30\x53\x24\x89\x51\x43\x4a\xc3\xb8\xf3\x01\xa6\x7f\xce\xe7\x16\x38\x7b\x4d\xbf\x83\x37\x39\x50\x2b\xa2\xde\x2f\xec\xa2\x7f\x5a\x4c\x26\xe7\x71\x48\x55\x51\xa4\xb1\x2a\x8a\x8b\x01\x78\x79\xfc\xd5\xdd\x00\xbf\x32\x7c\xef\xf4\xa0\xbb\x82\x2c\xaf\x2c\xfd\x87\xc3\x02\xaa\x1b\xda\xf4\xf8\xd3\xcd\x69\x54\xe0\x87\x1b\xf8\xc1\xa5\x6c\xd2\x79\xfc\x7a\x71\x8f\x60\x73\xee\x92\x1e\x23\x10\x8f\x81\x54\x4d\x99\x12\x23\x82\xc6\xc4\xd9\x49\x9f\x83\xad\x2a\xac\x96\x41\xb7\x00\x32\x87\xc0\xea\xb0\xff\x12\xd0\xda\xc2\xec\x6b\xb0\x55\xa5\x1b\x24\x85\x37\x05\xaf\x0f\xdb\xc6\xb4\x2a\xb0\x80\x4c\x57\x28\xb4\x99\xba\xe0\x91\xb1\x36\xe8\xa7\x00\xa6\x8f\xef\x87\x51\xfc\x6d\x75\x19\x50\xd6\x37\xd4\x85\x14\x1a\x1d\xac\xd3\x1f\x51\x6d\x0f\xed\x56\x30\x27\x93\x25\x9f\x91\x2c\xf7\xff\x00\x00\x00\xff\xff\xee\x1b\x07\x58\xa8\x11\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 4520, mode: os.FileMode(420), modTime: time.Unix(1618298824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
