// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xcf\x92\xa3\xbe\x11\xbe\xf3\x14\x1a\x5c\x7b\xdb\xfa\x55\xce\xbe\x69\x31\xe3\x21\x8b\xc1\x05\x78\x7e\x99\x5c\x28\x19\xda\xb6\x32\x20\x51\x92\xd8\xc9\xec\x2d\xef\x95\x77\xca\x2b\xa4\x5a\xc8\x80\x3d\x9e\xac\xb7\x72\xb2\xa9\x52\xff\xd1\xd7\xdd\x5f\x7f\x5a\x54\xb2\x6d\xa5\xf0\x12\xba\x09\xcb\xf0\x6f\x51\x5e\xe4\x4b\xe2\x27\xac\x05\xc2\x1a\x05\xac\x7e\x27\xf0\x4f\xae\x8d\xf6\xbd\x68\x5b\x26\x69\x31\x1d\xda\x36\xc0\x34\x90\x03\x6f\x1a\xc2\x05\x31\x27\x20\x8d\xac\x58\x43\xa2\x2d\x91\xc3\xb7\x7e\xd7\x06\x5a\xa2\xc1\x18\x2e\x8e\xa4\x63\x47\xf0\x3d\x6f\x51\x35\xbd\x36\xa0\xbc\x20\xde\xe5\x45\x98\x95\xab\x30\x0e\x8b\xb0\x7c\xa4\x51\x1c\xae\x96\xc4\xaf\x98\x20\x42\x1a\x52\x43\x03\x06\x88\x3b\x8e\x41\xaa\x5e\x29\x10\x86\x68\xc3\x0c\xf8\xa3\x83\x28\xb7\xa9\x65\xbb\x24\x89\x92\xf5\x92\xf8\xc5\x69\x66\xa6\xad\x33\xd5\x0b\xc1\xc5\xf1\x83\x51\x9c\x06\x34\x5e\x12\x3f\x6a\x3b\xa9\xcc\x68\x55\x31\x81\x56\x7b\x20\x7d\x77\x54\xac\x86\xda\x66\xae\xa0\x06\x61\x38\x6b\xbc\x8b\xa4\xcb\x2c\xcc\xd3\x5d\x16\x84\x4b\xe2\x3f\x32\xde\x40\x4d\x8c\x74\xf9\x3f\x90\xe2\x04\x0a\x30\x0f\x26\x08\xd3\x5a\x56\x9c\x19\xa8\xc9\x49\x6a\x43\x7a\x51\x83\x22\xe6\xc4\x35\x79\x85\x77\xff\x13\xb7\xe5\xdf\xd3\xe4\xb7\x7c\xff\x94\x02\x6e\xf8\x7e\xa4\xbb\xb8\x28\x83\x2c\x5c\x85\x49\x11\xd1\xb8\x0c\x68\x62\x51\x18\xc2\x2e\x89\xbf\x82\x03\xeb\x1b\x43\xa6\x9b\xce\xa0\x18\x82\xd6\xfe\xd0\x2e\xc1\x53\x18\x7c\x9f\xaa\x66\x31\x9f\xac\x04\xf6\xd0\x64\x6a\xdb\xc1\xb6\x95\xb6\xff\x7b\x0d\xca\x9e\xf1\x3d\xcf\x5b\x20\x14\xde\x53\x9a\x17\x25\x8d\xb3\x90\xae\x5e\xa6\x36\x7b\x42\x94\xae\x7b\xd1\xa1\x64\x2d\xc6\x04\x6e\x82\x33\xa0\x8c\xf8\x38\x17\x33\x90\xde\xb8\x39\xd9\x64\x5c\xd1\x6f\xf9\x2d\xbf\xbd\x94\xdb\x2c\xfd\x6b\x18\x14\xff\x57\x88\x4e\xc9\x7f\x40\x65\x7c\x2f\x7f\xc9\x8b\x70\x53\xba\x69\x7a\x4c\x77\xc9\xea\x17\xc3\x74\xe0\x4a\x9b\xff\xfc\xfb\x5f\xbe\x97\xa4\x68\x47\x9f\x69\x14\xd3\x6f\x31\x96\x2b\x91\x24\xea\x08\xfb\xc1\x78\xc3\xf6\x0d\xf8\x5e\x94\x0f\x1d\x6d\xef\x30\x9b\x25\x3e\xb4\xf7\xe0\x14\x13\xf6\x07\xbc\xa3\xcd\x36\xcd\x8a\x32\xcc\xb2\x34\x2b\x93\x5d\x1c\x0f\x4e\x6b\x66\x18\x5e\xd3\x99\xbd\x31\x4d\x0e\xb2\x17\xf5\x03\x71\x99\x56\x27\xa8\x5e\x6d\x9e\xee\xc8\x81\x37\xf0\x70\xe9\x14\xdd\x95\xcf\x34\xde\x61\xa6\x61\xdb\x99\xf7\xc1\xaf\x14\xa4\xe1\x02\xc8\x17\x7d\x79\xfe\xcf\x2c\x4d\xd6\xe5\x63\x9a\x6d\x28\xa6\x1e\x89\x4a\x2a\x05\x95\x21\x43\x00\xa9\x5a\x66\x3e\x35\x9e\x35\xf5\x1c\xd8\x60\xd6\x91\xd2\x0c\x97\xf8\xd4\x87\x2b\x79\xb2\xdb\x2c\x89\x4f\x89\x91\x86\x35\x44\x1e\xc8\x17\x4d\x94\x7c\xd3\xf8\xd7\x5e\x80\x29\x20\x6c\x2f\x30\xa1\xe6\x2b\xd1\xaf\xbc\xbb\xe9\x27\xa7\xcf\x97\x43\xab\xd9\x0f\xd7\x2d\x5f\xf4\x57\xa2\x80\x69\x29\x96\x98\x84\xe7\x2d\x70\x20\xbc\x2d\xcd\xf3\x3f\xd3\x6c\x65\xaf\xb0\xa1\x45\xf0\xe4\x06\xab\x63\x5a\xbf\x49\x55\x63\x9b\xf1\x33\x2e\xbe\x97\x66\xd1\x3a\x4a\xdc\x95\xe7\xe7\xa5\xe2\x47\x2e\x58\xf3\x99\xe1\x2e\x9f\x18\x90\x06\x45\x64\x13\x2d\xce\x73\xe9\x28\x13\x04\xf6\xd4\xac\xe6\x52\x18\x56\x19\x5b\x75\x56\xb7\x5c\x70\x6d\x14\x33\x52\x3d\x38\x87\x73\xe0\x13\x49\x74\x5f\x9d\xac\x43\xdb\xbc\x74\xb5\x89\x92\x8f\x84\x83\x41\x6b\x47\x3a\xd6\xe9\x90\xc2\x07\xd2\x79\xb8\x4c\x3a\x0b\x63\x5a\x84\xab\xd9\x6c\xee\xd0\xec\xc4\x30\xf5\xf9\x04\xba\xc1\xb3\x29\xc4\x2b\xba\x1d\x33\xd8\x6d\x57\x74\xcc\xa0\xa9\x59\x77\x1d\x18\x6a\x3e\xc4\x7d\x0e\xb3\xe8\xf1\xa5\x0c\xd2\xd5\x6c\x49\x3d\x83\xe2\x07\x5e\x31\xc3\xa5\x20\x95\xac\x81\x80\x52\x52\xf9\x5e\xb8\xa1\x51\x5c\xae\xa2\xdc\x8d\xe8\x86\xf1\xe6\xbc\x02\xb5\x6d\x9d\x9a\xeb\x3b\x81\x3d\x7b\x9b\x97\x37\x6c\xd1\x61\xcb\x4c\x75\x22\x07\xdb\x5a\x03\x37\x20\x25\x8f\xfd\x93\xe3\xd7\x98\x2b\x42\xf3\x3f\xf8\xf8\xdc\x23\xd7\x4e\x2c\x29\x2c\x89\xff\xa6\xa4\x38\x4e\x8c\x4d\xa4\x9a\x99\x78\x0b\x05\x47\x2e\xc5\x99\x3b\xb3\x70\x1d\xa5\xc9\xbd\x7b\x91\x0c\xc6\xbf\x62\x4f\x5c\x67\x18\x0a\x7f\xcf\x81\x70\x25\xde\x1d\xc6\xee\xc3\x5f\x51\x74\xc3\xc4\xa5\x3c\x18\xe8\x30\x18\x40\x3b\x82\x99\x2f\x8b\x1b\x4c\x58\x49\x71\xe0\xc7\x5e\xd9\x9e\xb0\x45\x89\x36\x74\x1d\x7e\xee\x8a\xb7\xec\x08\x77\x39\xf2\xbc\x85\xec\x40\x68\xc3\xaa\x57\x6f\x1d\x16\x67\x98\xcf\x25\x4a\xe4\x19\x49\xcb\x70\x88\x95\x6b\xfc\x0d\xb4\x7b\x50\xe3\xec\xd0\xd5\x6a\x3e\x2b\x7b\x00\x41\x58\xed\xe4\x8d\x33\x19\x85\x82\x1b\xae\xcf\x55\x82\x33\xb8\x25\x11\xce\xb6\x4f\x34\x2f\x1d\xa6\xb8\xe7\x9c\xc1\x0c\xff\x11\xcf\xe0\xc6\xc8\x7b\x0b\x21\x6b\xf0\x12\x1c\xbd\xb3\x34\x70\x32\xaf\x2c\x68\xfe\x1d\x79\xba\xae\x09\x1e\xc2\xb6\x74\x8a\xd1\x7e\x9e\x4b\xed\x84\xdf\xd7\x6e\x40\xf9\x8d\x71\x43\xb8\x21\xb5\x14\xf0\x07\x06\xd8\xb3\xea\xb5\xef\x68\x55\xc9\x5e\x18\x6f\x4b\x33\xba\x29\xc3\xcd\xb6\x78\xb1\x2b\x48\xf7\x87\x03\xaf\x38\x8a\xce\x8e\x29\xd6\x82\x01\xa5\x71\x13\x17\x65\xbe\xdb\x22\xdb\x23\x9c\x42\xf7\x1d\x2e\x29\x6c\xbc\xf7\x0e\x95\xe9\xa5\x36\xba\x20\x8b\x61\x68\x47\xb1\xf1\x8d\x06\xdf\x77\xdb\x92\x06\x41\xba\x4b\x7e\x47\x76\x5c\x24\x7e\xb7\xfe\xf0\x16\xd8\xe7\x57\x3a\xf3\x8e\x68\x68\xf5\x1b\x41\x5c\x55\xbf\xd9\x1c\x3d\x77\xc7\xc7\x28\x0e\x07\xfa\x76\xf3\xe0\x3a\xdf\x95\xcd\x8c\x97\xb2\x6a\x82\xec\xe1\x20\x15\x10\xfd\xc6\x4d\x75\xc2\x07\xc4\xec\x00\x1b\xae\x7d\x31\xaf\x43\x94\x8f\xf2\x7f\x0f\x68\x8c\x86\x50\x93\xbe\xb3\x03\x35\x33\xcb\xc2\xbc\x48\xb3\xf0\xa3\x9d\x02\x6d\xa4\xe2\xe2\x38\x8c\xe0\x79\x3c\x32\xd0\xb2\x57\x15\x7c\xc4\x70\x76\xcd\x5f\x5e\x6e\x52\x75\xb7\x45\xe7\x34\x33\xa3\xc4\x3c\x43\xbf\x87\x46\xe2\x2e\x31\xf2\x92\x90\x0a\x54\xfa\xb2\x03\xe5\x96\xd2\x38\x4f\x1d\x28\x54\x4f\x6e\xa2\x70\xd7\x0d\xab\x70\x5c\xa8\x43\x35\xf2\x77\x51\x9d\x94\x14\xfc\x27\xe2\xa4\x41\x0d\xeb\xea\x2f\x6e\x71\xc6\xe9\x3a\x4a\xae\x6d\x76\x73\xbd\x80\xea\xfc\xc1\x9d\x9e\x16\x60\x31\xbd\x04\x3b\x25\x4f\x7c\xcf\x8d\x26\x78\xc6\xc5\x38\x28\xd9\x92\x46\x1e\x8f\x58\x25\x2e\xfe\xb8\x47\x6e\x78\x8b\x8a\x6b\x2f\x88\x72\xcb\x02\xd7\xd4\x80\xba\x97\x6b\x62\x98\x7e\xbd\xa6\x01\x34\xfd\xd1\x06\x96\x60\xbd\xe7\x4d\x19\xa4\xc9\x63\xb4\x9e\x9e\x1b\xc1\x9c\x7a\x3f\xbc\x3b\x26\x83\xeb\x37\x6b\x71\x4d\xdb\x9f\x55\xab\x86\xae\x91\xef\xad\x25\x94\x86\x89\xbb\xab\xc6\x3b\x7c\x81\x8f\x79\x62\x3c\x10\x06\x14\xd4\xf8\x46\xd0\x70\xb4\x2e\x31\x85\x86\x57\x46\x4f\x43\x69\x73\x47\x68\xa7\x63\x5f\x49\x77\xf9\xde\x60\x47\xc6\x05\x6e\x19\xef\xbf\x01\x00\x00\xff\xff\x98\x13\xdb\x5e\x11\x10\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4113, mode: os.FileMode(420), modTime: time.Unix(1608193117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x4b\x57\xdb\x58\x12\xde\xeb\x57\xf8\xd8\x27\xbb\x39\x73\x66\x9d\xdd\x45\x16\x46\x13\x59\xf2\x91\x64\x32\xcc\x46\x87\x18\x4f\x86\x0e\xd8\x1c\x0c\xbd\xe8\x55\xcc\xc3\x0f\x62\x61\x3a\x01\x9a\x87\x13\x30\x31\x81\x86\xf8\x01\x24\xd8\xd8\x06\xfe\x8c\xee\x95\xbc\xe2\x2f\xf4\xb9\xf7\xca\xb2\x6c\xe2\x0e\x4b\x4c\x7d\x55\x75\xab\xbe\xaa\xaf\xe4\x8b\xc4\x67\x67\xe3\x31\x46\x04\x41\x4e\xe3\xfe\xc3\x2b\xaa\xf2\xdc\xe3\x85\x1b\xba\x79\x52\x83\xf5\x4b\x58\xde\x81\x85\x53\x2f\xc3\x87\x34\x51\x52\x7b\x06\x56\xb5\x0e\x0b\xa7\xe6\x55\xcb\x6c\x1d\x58\x95\x3b\xf3\xb6\xd2\x29\x7e\xef\x7c\x3c\x82\xc5\x73\x98\xda\xa5\xbf\xf3\x21\x2f\xc3\xf8\x22\x33\x8b\x89\x85\xe8\x3c\xc3\x0a\x61\x45\xe5\x64\xcd\xcf\x09\x9c\xca\x69\xa3\x80\x17\x38\xff\x73\x8f\x17\xfd\x71\x88\xae\xb6\x60\xe6\xb0\xb3\x5b\x82\xb7\x1f\x60\x56\x37\xd7\xae\xd1\xdb\xa4\xb9\xb7\xd2\xd9\x4f\x99\x77\x25\xaf\x03\xe5\x15\x92\x84\x1c\x16\x45\x5e\x0c\x3c\xf7\x78\xa9\x81\xd1\xd0\x61\xe1\xd4\xba\xdf\xb0\x8a\x39\xa3\x51\x7e\x68\x27\x1f\x41\x04\x89\x05\x02\x7e\x57\xb5\x0d\x57\x8f\x29\xcc\x0e\xac\xa7\xcd\xe6\x09\x49\x74\x3e\x3a\x15\x8d\x2d\x4c\x4f\xce\x30\x7d\x39\x6a\x32\xa7\x48\x61\x99\xe5\x30\x9e\xa6\x59\xba\xb0\xbe\x1d\x3f\xb4\x93\x56\xf5\xd8\x3c\xd9\xe9\xbc\x3f\x36\x1a\xef\x50\x21\x0b\x57\xaf\xac\xe4\xa6\xd1\x68\xa1\x42\xd3\x3b\xc4\x89\xf6\x5f\x49\x7c\xaa\x27\x98\xaf\x9a\x9b\xa7\x30\x47\x9c\x8d\x82\xb0\xa0\x6a\xac\xcc\xf9\x39\x51\xe5\x81\xa0\xb1\x40\x24\x6f\xa3\x71\x70\x35\x5a\x3b\x56\xa5\x04\xd3\x65\xa4\x57\x8c\x86\x6e\x2d\xdf\xd2\x20\xa4\x20\xa4\xbf\xec\x18\xc7\xbe\xe8\x95\x9e\x46\xa4\xbd\xa6\x00\xa3\xb1\x6e\x6e\x9e\xa2\x4c\x1d\xff\xb8\xdf\x80\x1b\x39\x5c\x99\xff\xc7\x13\x0b\xcc\x98\xa4\xa8\x1a\x10\x64\x0e\xf8\x27\x7a\x3c\xa0\x8f\x75\x11\xc5\x7e\x35\xb1\x76\x02\x3d\x7e\xac\x83\x33\x5b\x79\xfa\xd8\x6e\xb3\x1f\x3b\xd0\x46\x26\xb4\x90\x2c\xfd\x9b\x63\xd5\xa7\xfa\x2a\xde\x98\xfb\x15\xf2\x6e\x65\x42\x51\xb9\xa0\x66\xf3\x77\x54\x0a\x8b\x7e\x9b\xbe\xab\x19\x4a\x56\x54\xf8\x8a\x0a\x4d\x3e\x44\xcb\x24\x61\x53\x30\x0e\x78\x01\x8c\x08\xb8\xaa\x7c\xc8\x63\x7d\x5f\x41\xcd\x0d\x5c\xa1\xeb\x2b\x2f\xc3\x2b\x94\x4e\x24\xc5\x1e\x81\x09\xb3\xa8\x2f\x2f\x2d\x16\x1f\x0c\x49\xb2\xaa\x71\xb2\x2c\xc9\x9a\x18\x16\x30\x01\x51\xe1\x0c\x65\xef\x60\xa6\x06\xf3\x55\x0a\x31\xf7\x56\xd0\x56\x0d\xe9\x15\xf2\x98\x3a\xfa\xfc\x16\x1d\x1c\xdb\xde\xb6\xd3\x46\xeb\x9a\xe4\xe5\x76\x88\x5d\x69\xe3\x40\x08\xe3\xf4\x9e\x25\x3c\x56\x31\x87\x0a\x59\xf3\xcf\x26\xf5\xd3\x6f\xfc\x52\x96\xc4\x80\x36\x2a\xc9\x41\xa0\x3a\xe6\xe6\x79\x15\xe6\x3f\xa3\xc3\x36\x6c\xe7\x8d\x86\x8e\xca\x9f\xcd\xe2\x00\xce\x45\x34\x77\xe1\xec\x70\xd9\x3b\x3c\x74\x99\x1a\xac\xa6\x3a\xef\x8f\xfb\x91\x76\xd3\xc4\x70\x10\x77\x6b\xf5\xc2\x63\x63\x48\x72\x34\x1a\x6c\x34\x1e\xda\x39\xab\x7e\x65\xdd\xa7\x7f\x08\x56\xc0\x38\xe7\xb0\x0b\x3b\x30\xee\x3f\x62\x86\xd9\x5d\xcf\xc1\xf5\x03\xb8\x7f\xf8\xd0\xde\x7b\x96\xf0\x32\x0c\xe3\x5b\x4c\x44\xe7\x99\x10\x50\x94\x97\x92\xec\x27\x09\x07\x81\xca\x8e\x91\x89\x4f\x99\x87\xc9\xce\xe6\xae\x55\xad\x7a\x19\x49\xe6\x03\xbc\x68\xbf\xc9\x31\x59\x3f\xe8\xb7\x0a\x2b\xbd\xcd\x01\x58\x95\x27\xb9\xd0\xb9\x40\x85\x33\xb8\x81\xa7\x92\x76\xcb\x4a\x6e\xe2\x5d\x57\x29\x9a\x1b\x29\xf8\xfb\x0e\x69\x15\x41\xbb\x6b\x86\x09\x52\x2e\x51\x3c\xb1\x00\xfe\x20\x2f\x0e\x9b\x5f\xcf\xe4\xd4\xec\x74\xcc\x43\xcd\xe9\x54\x5a\x47\xe7\xae\x49\x76\x67\x27\x73\x02\x50\x39\xbf\x6b\x3c\xec\x34\x2f\x8b\xce\x16\xa1\xc3\xe0\x65\x04\x3f\x08\x39\x41\xc3\x21\x3f\x20\x41\xf1\xaf\x7d\xc1\x8c\xfb\x0a\xda\xbc\x21\x91\xc6\x39\x99\x1f\x9d\xd0\x58\xc9\xef\xda\xd7\x9d\xb3\x9c\x55\x4d\xba\xaa\xc5\x05\x01\x2f\x68\x7e\x5e\xb1\x07\xa6\xb3\x54\x31\x5a\xd7\x54\x14\xac\xa3\x73\xf3\x4b\x72\x58\xb9\xba\x58\x77\x33\x28\x1a\xe6\x6e\x3a\xab\xba\x33\xe4\xf6\xfa\x72\x1a\xac\xe0\xbf\x7a\x6b\xac\xbb\xb1\x9c\x1d\x46\xdb\xd9\x5d\x60\xfd\x58\x32\x8e\x6e\x14\xca\x6c\xf7\xb7\x9f\x61\x7c\xf3\xd1\xd7\xd3\xf1\x58\x77\x17\xc9\x5c\x80\x97\xc4\x27\xc9\x01\xcc\x35\xe1\xc1\x81\x7b\x17\xb9\x96\x38\xe3\xfb\x2d\x1e\x8b\x76\xbd\x62\x21\x78\x9a\xcf\xae\x87\xbe\x15\xb7\x7c\x6a\xde\x5e\x5a\x95\x22\xcc\xbc\xef\x97\x3b\xba\x68\xac\xf5\x3a\xcc\x6f\xd3\x29\xa5\xab\xd5\xbd\x5f\x3a\xab\xba\x79\x4b\x17\x24\x1f\x04\x01\x6e\x18\x70\xab\x00\x97\xf3\x43\x80\x8c\x2f\x3e\x17\x8d\x25\x16\x26\x23\x6f\x98\x00\xa7\x76\xab\xd4\xad\x6f\x6f\x47\x90\x92\x60\xfb\xb9\xf9\xf8\x2f\xd1\xc8\x42\x30\x3a\xfb\x2a\x3a\xef\xf0\x18\xf8\x5d\x4d\x24\x2f\x44\xf5\x16\x5c\x3b\x74\x21\x1c\xf9\xb3\x79\x3e\x6c\x76\x28\xd5\x1f\x69\x5f\x17\x35\x06\x14\xcd\xae\x14\x86\x10\x63\xb7\xf8\x3c\xb4\x93\x8f\xb0\x8c\x2f\x16\x9f\x8a\x32\x22\x9e\x81\xae\xfa\xd9\x07\x88\xa6\x02\xe5\x05\xd9\x71\xd7\x46\x6b\xdb\x5a\x5b\x32\x97\x6e\xd0\x56\xad\x93\xce\xa3\x0f\xba\x71\x5b\xc0\x8b\xae\x70\x8a\xb2\x27\x56\x31\xf7\x0f\x8f\x55\xad\x9b\xe5\x2c\xbc\x5b\x85\x95\x65\xa3\xf5\x95\xfe\x0c\x2b\x39\x54\xdd\xfa\x27\x0e\xf3\x6a\x32\xf2\x66\x71\x0e\x44\x22\xf1\xc5\xd8\x02\x13\x02\x32\x08\x6a\x5c\x30\xa4\x4e\xe0\x08\xf9\x25\xb4\x55\xeb\x0a\x10\x7e\xb8\x12\x0e\xe1\x7d\x49\x76\xa4\x8e\x36\xab\x28\x87\x0f\x26\xf3\xa2\x05\x3f\xbd\xf3\x32\x03\x3a\x8f\x0e\x8b\x9d\xb3\x9c\x6b\x9a\x6c\x06\x8e\x00\xf6\x45\x38\xa4\x01\x96\x95\xc2\xe2\x53\xd5\x16\x96\xd2\x46\xeb\xd6\xfa\xf6\x05\xe6\xeb\x43\x34\x97\xf1\xcd\xcd\x4c\xc6\x06\x0e\xa0\x9f\xb8\x75\xf3\xf9\xb1\x5b\xd7\x21\x39\x42\xea\xc4\xd8\xb9\x8f\xf2\x02\x47\x57\x61\x97\xbe\x54\xd9\x6d\xff\x38\x55\xaa\xa2\x30\xa5\xc3\x4c\x1a\xe9\x47\xee\xfc\xfb\x06\x87\x7a\x74\xae\x4a\xda\x3d\x6a\xfd\x83\xab\x52\xe6\x14\x55\x92\xb9\x01\x73\x94\x3c\x82\x25\xbd\x6b\xee\xf0\x57\x8e\x26\xe2\x8b\xf3\x91\xe8\xe3\x92\xb8\x9e\xf1\x37\xc9\xbb\x9b\x36\x70\x18\xf5\xf8\xdc\x77\x06\x5d\x7c\x32\x9a\xeb\x03\xac\xb6\xee\xf7\xb1\x0e\x97\x4b\x94\x9e\x76\x8a\x33\x53\x93\x73\x54\x1b\x1c\x61\xa1\x95\x84\x1b\x39\x54\x3e\x86\x99\x1a\x26\x96\x2d\x10\xcd\x7f\xd9\x3a\x22\x48\x01\x5e\x1c\x44\x38\x32\x42\x8f\x41\x12\x80\x58\xf7\xc4\x81\x7e\x19\x98\x5f\x92\xa8\x7c\x84\xff\x45\x21\xe6\x6e\xab\xb3\x9b\xf2\x0c\x11\x54\xc6\x17\x99\x4e\x30\x2c\xaf\x90\x81\x1b\x9c\x42\x9c\x69\xf7\xfc\x44\xd9\x73\x94\xcf\x1b\x8d\xb2\xb9\xb7\x62\xb4\x5a\x70\xad\x88\xd1\xbf\xce\xb2\xf1\xd8\xff\xa6\x5f\x33\xe3\x41\x8d\x95\xc4\x51\x3e\xd0\xbb\x5f\xe9\x3e\x73\xdd\xaf\x3d\x9b\xc1\x0f\x15\xc7\xb4\x57\x5f\x17\x67\x7f\x52\xe5\xe9\x39\xfc\x09\xd5\xfb\xbe\xa2\x9f\x49\x7b\x2b\x7c\x08\x55\xbe\x63\xc5\xaa\x5f\xa2\x42\x96\xfc\x05\x53\x97\xe6\x59\x12\xdf\x47\xd5\x7a\x27\xad\xa3\xed\x1a\xb5\xc6\xc2\xc4\x30\xcc\x5f\x01\x00\x00\xff\xff\xe2\x53\x6d\x0a\xb1\x0d\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3505, mode: os.FileMode(420), modTime: time.Unix(1608193002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
