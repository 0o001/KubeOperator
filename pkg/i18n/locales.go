// Code generated for package i18n by go-bindata DO NOT EDIT. (@generated)
// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcb\x72\xe3\xba\x11\xdd\xf3\x2b\x60\xba\x66\x37\xb9\x95\xb5\x76\x1c\x8a\xb6\x99\xa1\x48\x16\x49\xf9\xc6\xd9\xb0\x20\xb2\x25\x21\x26\x01\x06\x00\xc7\xd1\xdd\xe5\xbf\xf2\x4f\xf9\x85\x54\x03\x10\x45\x3d\x5c\xa3\xa9\xbb\xb2\xe4\x42\x77\x1f\xf4\xe3\xf4\x81\x1e\x1b\xd1\xf7\x82\x7b\x69\xb0\x8a\xea\xe8\xef\x71\x59\x95\x0b\xe2\xa7\xb4\x07\x42\x3b\x09\xb4\x3d\x10\xf8\x37\x53\x5a\xf9\x5e\x9c\xd7\x69\x56\x9d\x0e\xe5\x1d\x50\x05\x64\xcb\xba\x8e\x30\x4e\xf4\x1e\x88\x84\x1d\x53\x5a\x1e\x48\x9c\x13\x61\xff\xa5\x0e\x4a\x43\x4f\x14\x68\xcd\xf8\x8e\x0c\x74\x07\xbe\xe7\x3d\x36\xdd\xa8\x34\x48\x2f\x4c\xd6\x65\x15\x15\xf5\x32\x4a\xa2\x2a\xaa\x9f\x82\x38\x89\x96\x0b\xe2\x37\x94\x13\x2e\x34\x69\xa1\x03\x0d\xc4\x1d\xc7\x38\xcd\x28\x25\x70\x4d\x94\xa6\x1a\xfc\xc9\x41\x5c\x1a\x74\xc5\x3a\x4d\xe3\xf4\x79\x41\xfc\x6a\x3f\x33\x53\xc6\x99\x1c\x39\x67\x7c\x77\x65\x94\x64\x61\x90\x2c\x88\x1f\xf7\x83\x90\x7a\xb2\x6a\x28\x47\xab\x0d\x90\x71\xd8\x49\xda\x42\x6b\x90\x4b\x68\x81\x6b\x46\x3b\xef\x0c\x74\x5d\x44\x65\xb6\x2e\xc2\x68\x41\xfc\x27\xca\x3a\x68\x89\x16\x0e\xff\x03\xa9\xf6\x20\x01\x71\x50\x4e\xa8\x52\xa2\x61\x54\x43\x4b\xf6\x42\x69\x32\xf2\x16\x24\xd1\x7b\xa6\xc8\x3b\x1c\xfc\x4f\xdc\xd6\xff\xc8\xd2\x5f\xf2\xfd\x87\xe0\x70\xc3\xf7\x53\xb0\x4e\xaa\x3a\x2c\xa2\x65\x94\x56\x71\x90\xd4\x61\x90\x9a\x2c\xd8\xb0\x0b\xe2\x2f\x61\x4b\xc7\x4e\x93\xd3\x4d\x67\xa9\xb0\x41\x5b\xdf\x76\x4c\xf8\x12\x85\xdf\x4f\x55\x33\x39\x3f\x59\x71\x6c\xa3\x93\xa9\x69\x07\xd3\x59\xca\x7c\x1e\x15\x48\x73\xc6\xf7\x3c\xef\x11\x53\xe1\xbd\x64\x65\x55\x07\x49\x11\x05\xcb\xb7\x53\xa7\xbd\x60\x96\x2e\xdb\xd1\x65\xc9\x58\x4c\x00\x6e\x26\xc7\x66\x19\xf3\xe3\x5c\xcc\x92\xf4\xc1\xf4\xde\x80\x71\x45\xbf\xe5\xb7\xfe\xf6\x56\xe7\x45\xf6\xb7\x28\xac\xfe\x54\x88\x41\x8a\x7f\x42\xa3\x7d\xaf\x7c\x2b\xab\x68\x55\xbb\x81\x7a\xca\xd6\xe9\xf2\xf6\x3c\x75\xa2\xa1\x1d\x0e\xd3\x96\x49\xa5\xff\xf7\xdf\xff\xf8\x5e\x9a\xa1\x5d\xf0\x1a\xc4\x49\xf0\x2d\xc1\x72\xa5\x82\xc4\x03\xa1\x3f\x28\xeb\xe8\xa6\x03\xdf\x8b\x4b\xdb\xd1\xe6\x0e\xb3\x59\x62\xb6\xbd\xad\x53\x04\xec\xdb\x7c\xc7\xab\x3c\x2b\xaa\x3a\x2a\x8a\xac\xa8\xd3\x75\x92\x58\xa7\x2d\xd5\x14\xaf\xe9\xcc\x3e\xa8\x22\x5b\x31\xf2\xf6\x81\x38\xa4\xcd\x1e\x9a\x77\x83\xd3\x1d\xd9\xb2\x0e\x1e\xce\x9d\xa2\xbb\xfa\x35\x48\xd6\x88\x34\xea\x07\x7d\xb0\x7e\x05\x27\x1d\xe3\x40\xbe\xa8\xf3\xf3\xbf\x17\x59\xfa\x5c\x3f\x65\xc5\x2a\x40\xe8\x31\x6f\x84\x94\xd0\x68\x62\x03\x08\xd9\x53\xfd\xa9\xf1\xac\xa9\xe7\x89\x0d\x67\x1d\x29\xb4\xbd\xc4\xa7\x3e\x5c\xc9\xd3\xf5\x6a\x41\xfc\x80\x68\xa1\x69\x47\xc4\x96\x7c\x51\x44\x8a\x0f\x85\x1f\xcd\x05\xa8\x04\x42\x37\x1c\x01\x75\x5f\x89\x7a\x67\xc3\x4d\x3f\x65\xf0\x7a\x3e\xb4\x8a\xfe\x70\xdd\xf2\x45\x7d\x25\x12\xa8\x12\x7c\x81\x20\x3c\xef\x11\x07\xc2\xcb\x83\xb2\xfc\x3d\x2b\x96\xe6\x0a\xab\xa0\x0a\x5f\xdc\x60\x0d\x54\xa9\x0f\x21\x5b\x6c\x33\x76\xcc\x8b\xef\x65\x45\xfc\x1c\xa7\xee\xca\xf3\xf3\x42\xb2\x1d\xe3\xb4\xfb\xcc\x70\x5d\x9e\x18\x30\x08\xab\xd8\x00\xad\x8e\x73\xe9\x28\x13\x38\xf6\xd4\xac\xe6\x82\x6b\xda\x68\x53\x75\xda\xf6\x8c\x23\xdf\x53\x2d\xe4\x83\x73\x38\x4f\x7c\x2a\x88\x1a\x9b\xbd\x71\x68\x9a\x37\x58\xae\xe2\xf4\x9a\x70\x30\x68\xeb\x48\xc7\x38\xb5\x10\xae\x48\xe7\xe1\x1c\x74\x11\x25\x41\x15\x2d\x67\xb3\xb9\x46\xb3\x3d\x45\xe8\xf3\x09\x74\x83\x67\x20\x24\xcb\x20\x9f\x10\xac\xf3\x65\x30\x21\xe8\x5a\x3a\x5c\x06\x86\x96\xd9\xb8\xaf\x51\x11\x3f\xbd\xd5\x61\xb6\x9c\x2d\xa9\x57\x90\x6c\xcb\x1a\xaa\x99\xe0\xa4\x11\x2d\x10\x90\x52\x48\xdf\x8b\x56\x41\x9c\xd4\xcb\xb8\x74\x23\xba\xa2\xac\x3b\xae\x40\x65\x5a\xa7\x65\xea\xce\xc4\x1e\xbd\xcd\xcb\x1b\xf5\xe8\xb0\xa7\xba\xd9\x93\xad\x69\x2d\xcb\x0d\x48\xc9\x53\xff\x94\xf8\xed\x8c\x9a\xa7\x46\x50\x5a\x02\xdf\xe9\x3d\x69\x05\xd8\x3a\xf7\x00\xfa\xb8\xab\x25\xfc\x6b\x64\x12\x7a\xe0\xc8\xb3\xe7\x4e\x0d\x49\x2c\x88\xff\x21\x05\xdf\x9d\x18\x9c\x08\x39\x79\x3f\x02\x36\xf4\x3d\x81\xbd\xa4\x6f\xef\x11\xc5\x82\xe0\x47\xbe\x2d\xa2\xe7\x38\x4b\xef\xdd\xa5\xc4\x1a\xff\x8c\x71\x71\x05\x62\x28\xfc\x7b\x0c\x84\x6b\xf4\xee\x30\x66\x87\xfe\x8c\xd6\x3b\xca\xcf\x25\x85\xa5\xd0\xd0\x76\xd1\x0e\xf4\x7c\xc1\xdc\x60\xcf\x46\xf0\x2d\xdb\x8d\xd2\xf4\x91\x29\x64\xbc\x0a\x9e\xa3\xcf\x5d\xb1\x9e\xee\xe0\x3e\x47\x79\x5d\xbe\x64\x85\xa5\x52\x35\x6e\xb7\xac\x61\x28\x9e\xe2\x01\xd3\x22\x06\xe0\x4a\xd3\xe6\xdd\x7b\x8e\xaa\x63\x05\x8e\x15\x4e\xc5\x31\xc9\x86\x30\xf1\xbc\x9b\xa3\x15\xf4\x1b\x90\xd3\x28\x06\xcb\xe5\x7c\xf4\x36\x00\x9c\xd0\xd6\xa9\x25\x67\x32\xe9\x0e\x37\xab\x9f\x8b\x0e\x67\x70\x4b\x71\x1c\x6d\x5f\x82\xb2\x76\xe9\xc6\xb5\xe9\x0c\x66\xa5\x99\x52\x1d\xde\x60\x10\xef\x91\x8b\x16\xbc\x14\x27\xf9\xa8\x34\x9c\x6a\xac\xab\xa0\xfc\x8e\xb4\xdf\xb6\x04\x0f\x61\x57\x3b\x01\x6a\xbe\x1e\xbb\xc0\xe9\xc8\xaf\x83\x2d\xc0\x07\x65\x9a\x30\x4d\x5a\xc1\xe1\x37\x0c\xb0\xa1\xcd\xfb\x38\x04\x4d\x23\x46\xae\xbd\x3c\x28\x82\x55\x1d\xad\xf2\xea\xed\xb2\x0c\x03\x95\xb4\x07\x0d\x12\xe7\x2c\xab\xea\x72\x9d\xe7\xb6\x5a\x6b\xae\xc6\x01\x77\x1e\xf6\xe4\x61\x40\xa1\x7b\x2e\xb5\xce\xb8\xc7\x72\xc0\xa4\x5d\xbe\x05\xe1\xf7\x75\x5e\x07\x61\x98\xad\xd3\x5f\x51\x31\x67\xc0\xef\x96\x33\xde\x23\x8e\xc0\x85\x6c\xbd\x23\x1a\x5a\xfd\x42\x10\x57\xd5\x6f\x06\xa3\xe7\xee\xf8\x14\x27\x91\xdd\x06\x6e\x54\xdc\x50\xb8\xb2\xe9\xe9\x52\x46\x9c\x90\x0d\x6c\x85\x04\xa2\x3e\x98\x6e\xf6\xf8\x1e\x99\x1d\xa0\xf6\xda\x67\xa3\x6c\xa3\x5c\xbf\x26\x36\x80\xc6\x68\x08\x2d\x19\x07\x33\x6b\x33\xb3\x22\x2a\xab\xac\x88\xae\xed\x24\x28\x2d\x24\xe3\x3b\x63\x31\x8d\x47\x01\x4a\x8c\xb2\x81\xeb\x1c\xce\xae\xf9\xd3\xcb\x9d\x44\xe2\x6d\x0d\x7b\x9a\x99\x49\xb1\x1e\x53\xbf\x81\x4e\xe0\x6a\xd2\xe2\x9c\xab\x2a\x7c\x38\x88\x01\xa4\xdb\x71\xd3\x3c\x0d\x20\x51\x8c\xb9\x89\xc2\xd5\x69\x37\xeb\xb4\x9f\x6d\x35\xca\x03\x6f\xf6\x52\x70\xf6\x07\xe6\x49\x81\xb4\xdb\xef\xaf\x6e\x0f\x27\xd9\x73\x9c\x5e\xda\xac\xe7\xf2\x03\xb7\xc5\x83\x3b\x7d\xda\xa7\xd5\xe9\x61\x39\x48\xb1\x67\x1b\xa6\x15\xc1\x33\x2e\xc6\x56\x8a\x9e\x74\x62\xb7\xc3\x2a\x31\xfe\xdb\x3d\xea\xc5\x7b\x6c\x98\xf2\xc2\xb8\x34\x2c\x70\x49\x0d\x28\xa3\x99\x22\x9a\xaa\xf7\x4b\x1a\x40\xd3\x1f\x7d\x68\xb8\xd7\x7b\x5d\xd5\x61\x96\x3e\xc5\xcf\xa7\xd7\x4b\x38\x67\xe5\xab\x3d\x78\x32\xb8\x7c\x02\x57\x97\x8c\xfe\x59\xb5\x5a\x18\x3a\x71\xe8\x0d\xa1\x74\x94\xdf\x5d\x35\x36\xe0\x7e\x98\x70\x62\x3c\xe0\x1a\x24\xb4\xf8\xe4\x50\xb0\x33\x2e\x11\x42\xc7\x1a\xad\x4e\x43\x69\xb0\x63\x6a\x4f\xc7\xbe\x92\xe1\xfc\xf9\x42\x77\x94\xf1\xe9\x47\x83\xf9\x7b\x25\xce\x51\x4c\x23\xc2\xa6\x19\x07\x06\x2d\xa1\xbc\x9d\x81\x94\x60\x3c\xb5\x16\xe2\x5f\x06\x21\x3a\x74\x93\x67\x59\x72\x33\x47\x71\x4e\xf0\xcc\x6c\xf9\xdc\xe0\x91\xe9\x79\x64\x57\xfa\x79\xc4\x69\xc3\x58\x51\xa2\xb4\x3c\x78\xb8\x0d\xcb\xaa\x78\xbb\x7e\x8d\x56\xf3\x1f\x3a\xc4\xd6\x3e\xae\xa9\x6c\xf6\x4c\x43\xa3\x47\x09\x86\xb0\xaf\x05\xcf\xff\x03\x00\x00\xff\xff\xc4\x5e\x09\xe5\x6b\x11\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4459, mode: os.FileMode(420), modTime: time.Unix(1643103494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x5f\x57\xe2\xda\x15\x7f\xcf\xa7\x60\xc1\xba\x6f\x6d\x57\x9f\xe7\x2d\x13\xa2\xa6\x13\x92\xac\x24\x78\x6b\x5f\xb2\xbc\x0c\xbd\xb5\x57\x81\x25\xda\xb5\xda\xa7\x8b\xff\x00\x2f\x11\x3a\xa3\x76\x54\xee\x08\x8e\x3a\x56\x07\xf0\xcf\x1d\x61\x00\xf5\xcb\xe4\x9c\x93\x3c\xf9\x15\xba\xce\x39\x49\x08\x30\x76\x7c\x14\xf7\x6f\xef\x7d\xf6\x9f\xdf\x6f\x27\x92\x48\x2f\x2c\xa4\x53\x8c\xc4\xc6\x78\x83\xff\xb3\xa0\xe9\xda\x8b\x50\x18\x54\x4c\xf4\xf1\x12\xb4\xaf\x41\xe3\x1d\xa8\x9e\x85\x19\x41\x31\x24\x59\x1f\x18\xd8\xad\x36\xa8\x9e\xa1\x9b\x1e\xea\x1d\xda\xcd\x7b\x74\xd7\x74\xea\x9f\x9d\x5f\x8f\x40\xfd\x02\x6c\xec\x59\xbd\xb7\xa0\xfb\x56\x50\xc2\x0c\x13\x49\xcc\x2f\x67\x97\x92\x8b\x0c\x27\xc6\x35\x9d\x57\x8d\x28\x2f\xf2\x3a\x6f\x4c\xb0\x82\xc8\x47\x5f\x84\xc2\xf0\x3f\x35\x78\xb3\x03\x0a\x35\x67\xef\x18\xdc\xbd\x05\x45\x13\x6d\xde\xc2\x9f\x73\x68\x7f\xcd\x39\xd8\x40\xf7\xc7\x61\x1f\x2a\x68\x24\x09\x35\x2e\x49\x82\x34\xf9\x22\x14\xa6\x06\x56\xc7\x04\xd5\x33\xfb\xa1\x62\xd7\x4b\x56\xa7\xf1\xd8\xcf\x8d\x41\x44\x99\x63\x45\xfc\xae\x56\x1f\xac\x9f\x50\x98\x1b\xd8\xcc\xa3\xee\x47\x92\xe8\x62\xf2\x75\x32\xb5\x34\x37\x3b\xcf\x0c\xe5\x68\xa8\xbc\x26\xc7\x55\x8e\xc7\x78\x9a\xe6\xf1\x95\xfd\xdb\xc9\x63\x3f\x67\xb7\x4e\xd0\xc7\x77\xce\x9b\x13\xab\xf3\x0b\xac\x16\xc1\xfa\x8d\x9d\xdb\xb6\x3a\x3d\x58\xed\x86\x9f\x70\x62\xfc\x45\x96\x9e\xeb\x09\x94\x5b\x68\xfb\x0c\x94\x88\xb3\x09\x36\x2e\xea\x06\xa7\xf2\x51\x5e\xd2\x05\x56\x34\x38\x56\x22\x6f\xa3\x71\x70\x35\x7a\xef\xec\xe6\x31\xc8\x37\xa0\xd9\xb4\x3a\xa6\xbd\x7a\x47\x83\x90\x82\x90\xfe\x72\x53\x3c\xf7\x6a\x50\x7a\x1a\x91\xf6\x9a\x02\xac\xce\x16\xda\x3e\x83\x85\x36\xfe\xf1\xa0\x03\x2a\x25\x5c\x99\xbf\xa5\xb3\x4b\xcc\x94\xac\xe9\x06\x2b\xaa\x3c\x1b\x9d\x19\xcc\x01\x7d\x6c\x60\x50\xdc\x57\x13\x6b\x3f\xd0\xf8\x63\x7d\x1c\xea\x95\xe9\x63\xbd\x66\x8f\x3b\x30\x5e\xce\x18\x8a\x2a\xff\x89\xe7\xf4\xe7\xfa\xaa\x7f\x41\x07\x4d\xf2\x6e\x6d\x46\xd3\xf9\x98\xe1\xce\xef\x84\x1c\x97\xa2\xee\xf8\xae\x17\xe8\xb0\xc2\xea\x27\x58\xed\x0a\x0a\x2d\x93\x8c\x4d\xd9\x69\x56\x10\xd9\x97\x22\xae\xaa\xa0\x84\xec\xcf\x6b\xb0\x5b\xc1\x15\xba\xbd\x09\x33\x82\x46\xc7\x89\xa4\x48\x7c\xb9\x19\x58\x9d\x2d\x3a\xf8\x21\x41\x09\x81\x8d\x6b\x74\x9e\x7b\xec\x97\x60\xf5\xdc\x5e\xbd\x83\x85\x0a\xd8\x3c\x84\xed\x1e\xd8\xac\x85\x69\x2d\x85\x98\x22\xab\xba\xc1\xab\xaa\xac\x1a\x52\x5c\xc4\xf3\x09\xab\xe7\xb0\x78\x0f\x0a\x97\xa0\xdc\xa2\xb3\x8a\xf6\xd7\xe0\xce\x25\x34\x9b\xe4\xad\x6d\xf8\xe1\x67\x78\x78\x42\xff\x05\x77\xf3\x56\xef\x96\xa4\x1d\x74\x88\x5d\x19\xd3\xac\x18\xc7\xd9\x7f\x97\x0d\xd9\xf5\x12\xac\x16\xd1\x7f\xbb\xd4\xcf\xb0\xf1\xf7\xaa\x2c\x4d\x1a\x13\xb2\x1a\x63\x75\xdf\x1c\x5d\xb4\x40\xf9\x03\xac\xf5\x41\xbf\x6c\x75\x4c\xd8\xf8\x80\xea\x23\xb8\xc0\x1c\x06\xeb\xea\x86\x2b\xde\xe3\x9d\x2c\x5c\x82\xd6\x86\xf3\xe6\x64\x18\xe9\xf6\x54\x8a\xc7\x70\x33\xd7\xaf\x42\x2e\x86\x24\x47\xa3\x81\x4e\xe7\xb1\x5f\xb2\xdb\x37\xf6\x43\xfe\xab\x60\x8d\x9d\xe6\xfd\xe1\xc3\x0e\xac\x87\x5f\xf1\x00\xba\x43\x51\x02\x5b\x87\xe0\xa0\xf6\xd8\xdf\xff\x2e\x1b\x66\x18\x26\xb2\x9c\x4d\x2e\x32\x0a\xab\x69\xdf\xcb\x6a\x94\x24\x1c\x63\x75\x6e\x8a\x10\xc2\x06\xaa\xe5\x9c\xed\x3d\xbb\xd5\x0a\x33\xb2\x2a\x4c\x0a\x92\xfb\x26\xdf\x64\xeb\x70\xd8\x2a\xae\x0d\x88\x85\xe5\x74\x81\xe4\x42\xd7\x06\x56\xcf\x41\x05\x2f\x2d\xed\x96\x9d\xdb\xc6\x14\xd9\xac\xa3\xca\x06\xf8\xf7\x3b\xd2\x2a\x82\x0e\xd6\x0c\xf3\x50\xe3\x98\xe2\x89\x05\x1b\x8d\x09\xd2\x53\xeb\x1d\x9a\x7d\xbd\x30\x97\x0a\x51\x73\xba\xb4\xf6\xd1\x45\x60\xd1\x83\xd9\xa9\xbc\xc8\xea\x7c\x34\xb0\x3d\x6e\x9a\xd7\x75\x9f\x64\xe8\xae\x84\x19\x31\xca\x2a\x7e\xd0\xb8\x12\x65\x49\x50\xfc\xeb\x50\x30\xeb\xa1\x09\xb7\xbf\x90\x48\xd3\xbc\x2a\x4c\xcc\x18\x9c\x1c\x0d\xd0\xb9\x73\x5e\xb2\x5b\xb9\x40\xb5\xf8\x18\x2b\x88\x46\x54\xd0\xdc\x7d\x72\x56\x9a\x56\xef\x96\x6a\x86\x7d\x74\x81\x4e\x73\x4f\x95\xcb\xc3\x06\x9b\x41\xd1\xa0\xf4\xc5\x59\x37\x7d\x0e\x70\xd9\xcd\x6f\xb0\x86\xff\x1a\x90\x0f\x69\x1e\xe8\x77\x41\xf7\xd4\xea\x98\xe8\xd3\x29\xa8\x14\x5c\xe5\x3a\xcd\xc1\xab\x95\x51\x38\xd9\x48\xbf\x56\xa0\x62\xc2\xc2\xee\xf0\x04\xd0\xbc\x08\x09\xd2\x9c\x50\xf3\x2a\xc0\x81\x0c\x13\x59\x4c\xfe\x38\x97\x4e\x79\x64\xa6\xf2\x93\x82\x2c\x3d\x4b\x4f\x40\xa9\x0b\x0e\x0f\x83\x64\x16\x50\x01\x26\xf2\xaf\x74\x2a\xe9\x79\xc5\x4a\xf2\x3c\x9f\x9e\x87\x21\x8e\x5c\x3d\x43\x77\xd7\x76\xb3\x0e\x0a\x6f\x86\xf5\x92\x52\x91\xbd\xd5\x06\xe5\x5d\xba\xc7\x94\x9b\x83\x0c\xe4\xac\x9b\xe8\x8e\x32\xac\x10\x63\x27\xf9\xa7\x80\x3b\x55\xb0\x5a\x7e\x0a\xa8\x18\xda\x94\xac\xe2\x12\x0a\x99\x90\x47\xaf\x0c\x13\x49\x67\x92\xa9\xec\xd2\x6c\xe2\x27\x66\x92\xd7\xbd\xe2\x79\x5d\x19\x90\x0b\xa9\x14\x2e\x4a\x66\x31\xfd\xf7\x64\x62\x29\x96\x5c\xf8\x21\xb9\xe8\x2f\x00\x1b\x8d\x0e\x9a\x48\x1e\xee\xd1\xaf\x8f\xf0\x65\xd5\x5d\x90\xa7\x96\x8e\xee\xc8\x98\xa6\x7a\xa8\x29\x56\x33\xdc\x02\x62\x08\x31\x0e\x8a\xda\x63\x3f\x37\x86\x65\x22\xa9\xf4\xeb\x24\x23\xe1\xe5\xf1\x54\xd5\x3d\x6c\x0c\x9d\xd5\x5e\x11\x72\xbc\xb5\x7a\xbb\xf6\xe6\x0a\x5a\xf9\x02\x77\x2e\x9d\x7c\x19\xbe\x35\xad\xbb\x2a\x66\xc8\xea\x19\x2c\x7e\xb4\xeb\xa5\xdf\x85\xec\x56\x1b\x35\x8a\xe0\x7e\x1d\x34\x57\xad\xde\x27\xfa\x33\x68\x96\x60\x6b\xe7\x0f\x38\xcc\x0f\xb3\x89\x9f\x96\x33\x6c\x22\x91\x5e\x4e\x2d\x31\x0a\xab\xb2\x31\x83\x8f\x29\xfa\x0c\x8e\x50\x5e\x81\x3b\x97\x5e\xe5\xf1\xc3\xb5\xb8\xa2\xd0\x96\x60\x2a\xde\x6e\xc1\x12\x3e\xc4\xd0\x55\x0f\xbc\xff\x25\xcc\x8c\xdc\x0f\xb0\x56\x77\xce\x4b\x81\x35\x74\x07\xf3\x25\xcb\xbd\x8a\x2b\x06\xcb\x71\x72\x5c\x7a\xae\x8a\x83\xe3\xbc\xd5\xbb\xb3\x7f\x3b\x05\xe5\xf6\x13\x5a\xce\x44\x32\xf3\xb3\xa9\x91\xc3\xea\x1b\x6e\x83\x63\x3e\xee\x36\x70\xa0\xbe\x24\x75\x62\xdc\xdc\x27\x04\x91\xa7\x1c\xea\x4d\x35\xbd\x18\x5c\xff\x38\x55\x2a\xbf\x60\xc3\x04\x85\x3c\x34\x8f\x82\xf9\x0f\xed\x13\xf5\xe8\x5f\xab\xb4\x7b\xd4\xfa\x2b\xd7\xaa\xca\x6b\xba\xac\xf2\x23\xe6\x30\x77\x04\x8e\x4d\xcf\xdc\x9f\x5f\x35\x99\x4d\x2f\x2f\x26\x92\xe3\x25\x09\x3c\xe3\xff\x24\x1f\x6c\xda\xc8\xc1\x35\x98\xe7\xa1\xf3\xea\xea\xbd\xd5\xdd\x1a\x99\x6a\xfb\xe1\x00\x0b\x78\xe3\x98\x8e\xa7\x9b\xe2\xfc\xeb\xd9\x0c\x15\x15\x5f\x91\x68\x25\x41\xa5\x04\x1b\x27\xa0\x70\x89\x07\xcb\x55\x96\xee\x1f\x5d\x01\x12\xe5\x49\x41\x1a\x45\xf8\xfa\x43\x09\x96\x04\x20\xd6\x03\x55\xa1\x7c\x8e\x4e\x73\xb0\x71\x84\xff\x45\x21\x68\xaf\xe7\xec\x6d\x84\x9e\x50\x62\x26\x92\x98\xcb\x32\x9c\xa0\x91\x85\x1b\xdd\x42\x9c\xa9\x47\xe9\xb0\x78\x01\xcb\x65\xab\xd3\x40\xfb\x6b\x56\xaf\x07\x36\xeb\x18\xfd\x8f\x05\x2e\x9d\xfa\xeb\xdc\x8f\xcc\x74\xcc\xe0\x64\x69\x42\x98\x1c\xdc\xc5\x94\xe6\x02\x9a\x30\xb0\x19\xfd\x00\xf2\x4d\x07\xf5\x0d\xcc\xec\x37\xaa\x3c\x97\xc1\x34\x3a\xf8\x6e\x23\x17\x2d\xda\x5f\x13\x14\xd8\xfc\x6c\x75\xb6\x40\xfb\x1a\x56\x8b\xe4\x2f\xff\x22\xb5\x5b\x6d\x27\x6f\xc2\xdd\x4b\x6a\xed\x7f\xdc\x8d\x5c\xbd\xf8\x2e\x3b\xba\x00\x66\x8d\xe8\x73\xc9\xbf\x35\x9c\xfc\x26\xdc\xbe\xa7\xc1\x7f\x9f\x49\xa7\xe7\x31\x5e\x91\x65\x71\xec\x65\x42\x26\x04\xaf\x6a\x5f\xd5\x32\x7c\x18\x07\x3e\xfc\xc2\xae\x64\x66\x97\x16\xff\xc9\x60\xc2\xd7\x74\x75\x66\xfc\x6b\xc3\x6e\x9d\xc0\xf7\xb7\xf0\xbd\x4b\x48\xa4\x1b\xf8\xe0\x76\x43\x78\xf2\xfb\xbf\x00\x00\x00\xff\xff\xf6\x99\x91\xf5\xd4\x0e\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3796, mode: os.FileMode(420), modTime: time.Unix(1643103473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
