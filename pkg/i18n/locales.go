// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcd\x72\xab\x3a\x12\xde\xf3\x14\x0a\xa9\xec\xce\xdc\x9a\xb5\x77\x1c\x4c\x12\xe6\x60\xa0\x00\xe7\x4e\x66\x43\xc9\xd0\xb6\x35\x01\x89\x92\x44\x32\xbe\xbb\x79\xaf\x79\xa7\x79\x85\xa9\x16\xe2\xc7\x3f\x99\x93\x53\x77\x15\x3b\xa5\xee\xfe\xd4\xdd\xdf\xd7\x2d\xdf\x57\xa2\x6d\x05\x77\x62\x6f\x13\x94\xc1\xdf\xc3\xbc\xc8\x57\xc4\x8d\x69\x0b\x84\x36\x12\x68\x7d\x22\xf0\x2f\xa6\xb4\x72\x9d\x30\x2d\xe3\xa4\x98\x0f\xa5\x0d\x50\x05\x64\xcf\x9a\x86\x30\x4e\xf4\x11\x88\x84\x03\x53\x5a\x9e\x48\x98\x12\x31\xfc\x4b\x9d\x94\x86\x96\x28\xd0\x9a\xf1\x03\xe9\xe8\x01\x5c\xc7\x71\xee\xab\xa6\x57\x1a\xa4\xe3\x47\xdb\xbc\x08\xb2\x72\x1d\x44\x41\x11\x94\x8f\x5e\x18\x05\xeb\x15\x71\x2b\xca\x09\x17\x9a\xd4\xd0\x80\x06\x62\x8f\x63\xa0\xaa\x97\x12\xb8\x26\x4a\x53\x0d\xee\xe4\x20\xcc\x0d\xbc\x6c\x1b\xc7\x61\xfc\xb4\x22\x6e\x71\x5c\x98\x29\xe3\x4c\xf6\x9c\x33\x7e\xb8\x32\x8a\x12\xdf\x8b\x56\xc4\x0d\xdb\x4e\x48\x3d\x59\x55\x94\xa3\xd5\x0e\x48\xdf\x1d\x24\xad\xa1\x76\x11\xb9\x84\x1a\xb8\x66\xb4\x71\xce\x40\x97\x59\x90\x27\xdb\xcc\x0f\x56\xc4\x7d\xa4\xac\x81\x9a\x68\x61\xf1\xdf\x91\xe2\x08\x12\x10\x07\xe5\x84\x2a\x25\x2a\x46\x35\xd4\xe4\x28\x94\x26\x3d\xaf\x41\x12\x7d\x64\x8a\xbc\xc1\xc9\xfd\xc4\x6d\xf9\x8f\x24\xfe\x25\xdf\x7f\x08\x0e\x37\x7c\x3f\x7a\xdb\xa8\x28\xfd\x2c\x58\x07\x71\x11\x7a\x51\xe9\x7b\xb1\xc9\xc2\x10\x76\x45\xdc\x35\xec\x69\xdf\x68\x32\xdf\x74\x91\x8a\x21\x68\xed\x0e\x2d\xe3\x3f\x07\xfe\x8f\xb9\x6a\x26\xe7\xb3\x15\xc7\x3e\x9a\x4d\x4d\x3f\x98\xd6\x52\xe6\x73\xaf\x40\x9a\x33\xae\x93\x7a\x79\xfe\x7b\x92\xad\x27\x30\xf1\x36\xc2\x8a\x74\x54\xa9\x0f\x21\x6b\x32\xf6\xc3\x0e\xc8\xae\xa1\xfc\xed\xbf\xff\xf9\xb7\xeb\xa4\x59\xf8\xe2\x15\x41\xf9\x23\x78\xbd\x34\x44\x24\x9d\x64\xef\x54\x03\x5e\x7c\x81\x62\x36\x77\xee\x31\xfd\xce\x73\x92\x17\xa5\x17\x65\x81\xb7\x7e\x9d\xdb\xfb\x19\x2b\x73\xc9\x01\x5b\x19\x63\x31\x5d\xfa\x66\x41\x86\xca\x62\x4d\xac\x8b\x45\x61\x3e\x98\x3e\x9a\x04\xd8\x46\xbb\xe5\xb7\xfc\xfe\x5a\xa6\x59\xf2\xb7\xc0\x2f\xfe\x54\x88\x4e\x8a\x7f\x42\xa5\x5d\x27\x7f\xcd\x8b\x60\x53\x5a\x16\x3f\x26\xdb\x78\x7d\x9b\xc4\x8d\xa8\x68\x83\x0c\xde\x33\xa9\xb4\x49\x54\x9c\xa0\x9d\xf7\xe2\x85\x91\xf7\x3d\xc2\x16\x89\x05\x09\x3b\x42\xdf\x29\x6b\xe8\xae\x01\xd7\x09\xf3\x81\x45\xe6\x0e\x0b\xfe\xb2\x81\x52\x83\x53\x04\xec\x0e\xf9\x0e\x37\x69\x92\x15\x65\x90\x65\x49\x36\xd6\x2c\x16\xa4\xa6\x9a\xe2\x35\xad\xd9\x07\x55\x64\x2f\x7a\x5e\xdf\x11\x8b\xb4\x3a\x42\xf5\x66\x70\xda\x23\x7b\xd6\xc0\xdd\xb9\x53\x74\x57\xbe\x78\xd1\x16\x91\x06\x6d\xa7\x4f\x83\x5f\xc1\x49\xc3\x38\x90\x07\x75\x7e\xfe\xf7\x2c\x89\x9f\xca\xc7\x24\xdb\x78\x08\x3d\xe4\x95\x90\x12\x2a\x4d\x86\x00\x42\xb6\x54\x7f\x6a\xbc\x20\xd2\x32\xb1\xfe\x82\x05\x42\x0f\x97\xf8\xd4\x87\x2d\x79\xbc\xdd\xac\x88\xeb\x11\x2d\x34\x6d\x88\xd8\x93\x07\x45\xa4\xf8\x50\xf8\xd1\x5c\x80\x4a\x20\x74\xc7\x11\x50\xf3\x8d\xa8\x37\xd6\xdd\xf4\x93\x7b\x2f\xe7\x42\xa1\xe8\xbb\xed\x96\x07\xf5\x8d\x48\xa0\x4a\xf0\x15\x82\x70\x9c\x7b\x24\xe1\x4c\x3f\xbc\xc2\xc6\x2b\xfc\xe7\x91\x42\x23\xff\x98\x22\x6c\xcc\x8b\xeb\x24\x59\xf8\x14\xc6\xf6\xca\xcb\xf3\x42\xb2\x03\xe3\xb4\xf9\xcc\x70\x9b\xcf\xaa\xeb\xf9\x45\x68\x80\x16\xa3\x16\x58\x99\x06\x8e\x3d\xb5\xa8\xb9\xe0\x9a\x56\xda\x54\x9d\xd6\x2d\xe3\x38\x64\xa8\x16\xf2\xce\x3a\x5c\x26\x3e\x16\x44\xf5\xd5\xd1\x38\x34\xcd\xeb\xad\x37\x61\x7c\x2d\x72\x18\xb4\xb6\x42\x67\x9c\x0e\x10\xae\x84\xee\xee\x1c\x74\x16\x44\x5e\x11\xac\x17\xdc\xdc\xa2\xd9\x91\x22\xf4\x25\x03\x2d\xf1\x0c\x84\x68\xed\xa5\x13\x82\x6d\xba\xf6\x26\x04\x4d\x4d\xbb\xcb\xc0\x50\xb3\x21\xee\x4b\x90\x85\x8f\xaf\xa5\x9f\xac\x17\x83\xf1\x05\x24\xdb\xb3\x8a\x6a\x26\x38\xa9\x44\x0d\x04\xa4\x14\xd2\x75\x82\x8d\x17\x46\xe5\x3a\xcc\x2d\x45\x37\x94\x35\xe3\xdc\x55\xa6\x75\x6a\xa6\xbe\x98\xd8\xd1\xdb\xb2\xbc\x41\x8b\x0e\x5b\xaa\xab\x23\xd9\x9b\xd6\x1a\xb4\x01\xc7\xc0\xd4\x3f\x39\x7e\x9b\xb0\x62\x6a\xfe\xcf\x0c\x18\x7b\xe4\xd2\x89\x11\x85\x15\x71\x3f\xa4\xe0\x87\x79\x4a\x10\x21\x17\x26\x03\x40\x23\xd7\x13\xb8\x4b\xb9\x76\xee\x71\x23\x11\x7c\xd4\xd7\x2c\x78\x0a\x93\xf8\xab\xf3\x9a\x0c\xc6\x3f\x53\x58\x1c\xb3\x18\x0a\xff\x8e\x81\x70\x54\x7f\x39\x8c\x99\xd3\x3f\x93\xf1\x86\xf2\xf3\xb5\x65\x90\x4c\x7f\x48\xec\x01\xf4\x72\xa0\xdc\x50\xcb\x4a\xf0\x3d\x3b\xf4\xd2\xf4\x8d\x29\x5c\xb8\xf1\x9e\x82\xcf\x5d\xb1\x96\x1e\xe0\x6b\x8e\xd2\x32\x7f\x4e\xb2\x41\x3a\x55\xbf\xdf\xb3\x8a\xe1\x82\x16\x76\x98\x16\xd1\x01\x57\x9a\x56\x6f\xce\x53\x50\x8c\x15\x18\x2b\x1c\x8b\x31\xc9\x46\x20\xf1\xbc\xe5\xcd\x06\xda\x1d\xc8\x89\x7a\xde\x1a\xfb\xe9\x41\x91\x89\x6d\x3b\x00\x4e\x68\x6d\x96\xb2\x25\x41\x47\x1d\x78\x50\x67\x9a\x62\xfc\xdb\xa9\x6f\x43\x4c\xbb\x90\xe5\xf2\xe7\x8b\x90\x35\xb8\xb5\x05\x8d\xb6\xcf\x5e\x5e\xda\xf2\xe0\x58\xb5\x06\x8b\x52\x4e\xa5\xf1\x6f\x28\x8c\x73\xcf\x45\x0d\x4e\x8c\x4c\x1f\x37\x11\xbb\xc9\x96\x85\x97\xff\xc0\xb1\x50\xd7\x04\x0f\x21\x0b\xec\x52\x6c\xbe\x8e\x5d\x63\x77\xdb\x6f\xdd\x50\xb0\x0f\xca\x34\x61\x9a\xd4\x82\xc3\x6f\x18\x60\x47\xab\xb7\xbe\xf3\xaa\x4a\xf4\x5c\x3b\xa9\x97\x79\x9b\x32\xd8\xa4\xc5\xeb\x65\xd9\x3a\x2a\x69\x0b\x1a\xa4\xc2\xc1\x5f\x94\xf9\x36\x4d\x87\xea\x6e\xb9\xea\x3b\x9c\x89\xd8\xc3\xa7\x0e\x97\xef\xf3\xf5\xef\x4c\x9b\x06\x8d\x98\x76\x9b\xef\x9e\xff\x63\x9b\x96\x9e\xef\x27\xdb\xf8\x57\xb6\x9c\x33\xe0\x5f\x5e\x77\x9c\x7b\xa4\xcc\xc5\x2a\xfd\x85\x68\x68\xf5\x0b\x41\x6c\x55\xbf\x1b\x8c\x8e\xbd\xe3\x63\x18\x05\xf9\x72\x19\xb5\x24\xb2\x65\xd3\xd3\xa5\xcc\xf2\x42\x76\xb0\x17\x12\x88\xfa\x60\xba\x3a\xe2\x23\x69\x71\x80\x0e\xd7\x3e\xa3\xfe\x10\xe5\xfa\x85\xb3\x03\x34\x46\x43\xa8\x49\xdf\x99\x66\x5f\x98\x65\x41\x5e\x24\x59\x70\x6d\x27\x41\x69\x21\x19\x3f\x9c\xd3\x23\x03\x25\x7a\x59\xc1\x75\x0e\x17\xd7\xfc\xe9\xe5\xe6\x25\xf2\xf6\x8e\x3b\x73\x66\xda\x68\xc7\xd4\xef\xa0\x11\x38\xba\xb4\x38\xd7\xb6\x02\x1f\x33\xa2\x03\x69\x67\xe0\xc4\xa7\x0e\x24\x2e\x6b\x96\x51\x38\x5a\x87\xc9\x3b\xc9\xc3\x50\x8d\xfc\xc4\xab\xa3\x14\x9c\xfd\x81\x79\x52\x20\x87\xe9\xf8\x57\x3b\xa7\xa3\xe4\x29\x8c\x2f\x6d\xb6\xcb\xf5\x04\xa7\xcb\x9d\x3d\x3d\xcf\xdb\x62\x7e\xed\x76\x52\x1c\xd9\x8e\x69\x45\xf0\x8c\x8d\xb1\x97\xa2\x25\x8d\x38\x1c\xb0\x4a\x8c\xff\xf6\x95\xed\xc6\xb9\xaf\x98\x72\xfc\x30\x37\x2a\x70\x29\x0d\xb8\x66\x33\x45\x34\x55\x6f\x97\x32\x80\xa6\xef\xad\x6f\xb4\xda\x79\xd9\x94\x7e\x12\x3f\x86\x4f\xf3\xeb\xc6\x5f\xaa\xf8\xd5\xdc\x9c\x0d\x2e\x9f\xe5\xc5\xe5\x04\xf8\xac\x5a\x35\x74\x8d\x38\xb5\x46\x50\x1a\xca\xbf\x5c\x35\xd6\xe1\x3c\x99\x70\x62\x3c\xe0\x1a\x24\xd4\xf8\x24\x51\x70\x30\x2e\x11\x42\xc3\x2a\xad\x66\x52\x1a\xec\x98\xda\xf9\xd8\x37\xd2\x9d\x3f\x6f\xe8\x81\x32\x3e\xfd\x92\xb1\x7c\xcf\x84\x29\x2e\xdb\x88\xb0\xaa\xfa\x8e\x41\x4d\x28\xaf\x17\x20\x25\x18\x4f\xf5\x00\xf1\x2f\x9d\x10\x0d\xba\x49\x93\x24\xba\x99\xa3\x30\x25\x78\x66\x31\xa9\x6e\xe8\xc8\xf4\x7c\x1a\x56\x80\xf3\x88\xd3\x84\x19\x96\x18\xa5\xe5\xc9\xc1\xe9\x99\x17\xd9\xeb\xf5\x6b\xb5\x58\xfe\xfa\x22\xf6\xc3\x83\x9f\xca\xea\xc8\x34\x54\xba\x97\x60\x04\xfb\x7a\x41\xfa\x5f\x00\x00\x00\xff\xff\xbc\xd2\x64\xe6\x00\x12\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4608, mode: os.FileMode(420), modTime: time.Unix(1617183391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x5f\x53\xe2\x58\x16\x7f\xcf\xa7\xa0\xa0\xe6\x6d\x77\x6b\x9f\xfb\xed\x76\x88\x9a\xed\x90\xa4\x92\xe0\xac\xfb\x92\x72\x68\x76\xd6\x1d\x05\x4a\x74\xab\x76\x9f\x86\xf6\x0f\xe0\x80\xb8\xdd\xea\xb6\xca\xb4\x60\x6b\xb7\xa3\x03\xf8\x67\x5a\x68\x40\xfd\x32\xb9\xf7\x26\x4f\x7e\x85\xad\x7b\x6f\x12\x02\xb4\xd3\x3e\x8a\xe7\x77\xce\xb9\xe7\xcf\xef\x77\x12\x49\xa4\x17\x16\xd2\x29\x4e\x06\x31\xc1\x14\xfe\x2a\xea\x86\xfe\x2c\x14\x86\x5b\x65\xfc\xf1\x02\xb6\xaf\x60\xe3\x2d\xac\x9e\x86\x39\x51\x35\x65\xc5\x18\x18\xd8\xad\x36\xac\x9e\xe2\xeb\x1e\xee\x1d\xda\xcd\x3b\x7c\xdb\x74\xea\x9f\x9c\x9f\x8f\x60\xfd\x1c\xae\xef\x59\xbd\x37\xb0\xfb\x46\x54\xc3\x1c\x17\x49\xcc\x2f\x67\x97\x92\x8b\x1c\x2f\xc5\x75\x43\xd0\xcc\xa8\x20\x09\x86\x60\x4e\x00\x51\x12\xa2\xcf\x42\x61\xf4\xbf\x1a\xba\xde\x81\x85\x9a\xb3\x77\x0c\x6f\xdf\xc0\x62\x19\x6f\xdc\xa0\x1f\x73\x78\x7f\xd5\x39\x58\xc7\x77\xc7\x61\x1f\x2a\xea\x34\x09\x2d\x2e\xcb\xa2\x3c\xf9\x2c\x14\x66\x06\x56\xa7\x0c\xab\xa7\xf6\xfd\x96\x5d\x2f\x59\x9d\xc6\x43\x3f\x37\x06\x91\x14\x1e\x48\xe4\x5d\xad\x3e\x5c\x3b\x61\x30\x37\x70\x39\x8f\xbb\x1f\x69\xa2\x8b\xc9\x97\xc9\xd4\xd2\xdc\xec\x3c\x37\x94\xa3\xa9\x09\xba\x12\xd7\x78\x81\xe0\x59\x9a\xc7\x97\xf6\x6f\x27\x0f\xfd\x9c\xdd\x3a\xc1\x1f\xdf\x3a\xaf\x4f\xac\xce\x4f\xa8\x5a\x84\x6b\xd7\x76\x6e\xdb\xea\xf4\x50\xb5\x1b\x7e\xc4\x89\xf9\x37\x45\x7e\xaa\x27\x58\x69\xe1\xed\x53\x58\xa2\xce\x26\x40\x5c\x32\x4c\x5e\x13\xa2\x82\x6c\x88\x40\x32\x79\x20\xd3\xb7\xb1\x38\xa4\x1a\xbd\xb7\x76\xf3\x18\xe6\x1b\xa8\xdc\xb4\x3a\x65\x7b\xe5\x96\x05\xa1\x05\xa1\xfd\xe5\xa7\x04\xfe\xc5\xa0\xf4\x2c\x22\xeb\x35\x03\x58\x9d\x4d\xbc\x7d\x8a\x0a\x6d\xf2\xe3\x41\x07\x6e\x95\xc2\x9c\x0a\x74\xfd\x5b\x45\x8b\xfa\x01\xe5\xb8\xc4\x6a\xb9\x8e\x6b\x39\x0f\xd7\xc5\xbf\x74\x69\x20\x55\x13\xa7\x81\x21\x98\x2f\x84\x99\x51\x84\xf7\xc2\x11\x04\xc7\x45\xfe\x91\xce\x2e\x71\x53\x8a\x6e\x98\x40\xd2\x04\x10\x9d\x19\x4c\x1a\x2b\x67\x60\x14\xdd\xba\x52\x6b\xff\x29\xe3\xe5\xf4\x71\xb8\x57\x61\xe5\xf4\xc6\x69\xdc\x81\xf9\x7c\xc6\x54\x35\xe5\x2f\x02\x6f\x3c\xd5\x57\xfd\x33\x3e\x68\xd2\xf4\xf5\x19\xdd\x10\x62\xa6\xbb\x21\x13\x4a\x5c\x8e\xba\x0b\xb2\x56\x60\xeb\x80\xaa\xbf\xa2\x6a\x57\x54\x59\x23\x14\x62\x0a\xa6\x81\x28\x81\xe7\x12\xe9\x9b\xa8\x86\xec\x4f\xab\xa8\xbb\x45\x2a\x73\x73\x1d\xe6\x44\x9d\x0d\x2c\x4d\x91\xfa\x72\x33\xb0\x3a\x9b\x6c\xb5\x42\xa2\x1a\x82\xeb\x57\xf8\x2c\xf7\xd0\x2f\xa1\xea\x99\xbd\x72\x8b\x0a\x5b\x70\xe3\x10\xb5\x7b\x70\xa3\x16\x66\xb5\x14\x63\xaa\xa2\x19\xa6\xa0\x69\x8a\xe6\xf5\x00\x55\xcf\x50\xf1\x0e\x16\x2e\x60\xa5\xc5\xb6\x01\xef\xaf\xa2\x9d\x0b\x54\x6e\xd2\xb7\xb6\xd1\xfb\x1f\xd1\xe1\x09\xfb\x17\xda\xcd\x5b\xbd\x1b\x9a\x76\xd0\x21\x71\x65\x4e\x03\x29\x4e\xb2\xff\x26\x1b\xb2\xeb\x25\x54\x2d\xe2\x5f\xba\xcc\xcf\xb0\xf1\xb7\x9a\x22\x4f\x9a\x13\x8a\x16\x03\x86\x6f\x8e\xcf\x5b\xb0\xf2\x1e\xd5\xfa\xb0\x5f\xb1\x3a\x65\xd4\x78\x8f\xeb\x23\xb8\xc0\xa4\x07\xeb\xea\x86\x2b\xde\x91\xad\x2f\x5c\xc0\xd6\xba\xf3\xfa\x64\x18\xe9\xf6\x54\x8e\xc7\x48\x33\xd7\x2e\x43\x2e\x86\x26\xc7\xa2\xc1\x4e\xe7\xa1\x5f\xb2\xdb\xd7\xf6\x7d\xfe\x8b\x60\x1d\x4c\x0b\xfe\xf0\x11\x07\xd6\xfd\xcf\x64\x00\xdd\xa1\x28\xc1\xcd\x43\x78\x50\x7b\xe8\xef\x7f\x93\xa5\x03\xbc\x9c\x4d\x2e\x0e\x36\x85\x24\x1c\x03\x06\x3f\xe5\xaf\x89\xb3\xbd\x67\xb7\x5a\x61\x4e\xd1\xc4\x49\x51\x76\xdf\xe4\x9b\x6c\x1e\x0e\x5b\xc5\xf5\x01\x75\x01\xde\x10\x69\x2e\x6c\x31\x51\xf5\x0c\x6e\x11\x5a\x60\xdd\xb2\x73\xdb\x84\x84\x9b\x75\xbc\xb5\x0e\xff\xfb\x96\xb6\x8a\xa2\x83\x35\x23\x4c\xd7\x38\x66\x78\x6a\x01\xa2\x31\x51\x7e\x8c\x40\x42\xb3\x2f\x17\xe6\x52\x21\x66\xce\x96\xd5\x3e\x3a\x0f\x50\x49\x30\x3b\x4d\x90\x80\x21\x44\x03\xdb\xe3\xa6\x79\x55\xf7\x69\x8c\xed\x4a\x98\x93\xa2\x40\xf5\x83\xc6\xd5\x28\xa0\x41\xc9\xaf\x43\xc1\xac\xfb\x26\xda\xfe\x4c\x23\x4d\x0b\x9a\x38\x31\x63\xf2\x4a\x34\x20\x18\xce\x59\xc9\x6e\xe5\x02\xd5\x12\x62\x40\x94\xcc\xa8\xa8\xbb\xfb\xe4\xbc\x6a\x5a\xbd\x1b\xa6\x4a\xf6\xd1\x39\xfe\x90\x7b\xac\x5c\x1e\x36\xd8\x0c\x86\x86\xa5\xcf\xce\x5a\xd9\xe7\x00\x97\x3f\xfd\x06\xeb\xe4\xaf\x01\x8f\x7a\x94\xe9\x93\x28\x6b\xa7\xc7\xa0\xc3\x58\xba\x8e\x41\x14\x2a\xec\x0e\xb7\x9f\x25\x45\x19\x90\x25\x84\x9b\x97\x01\x02\xe4\xb8\xc8\x62\xf2\xfb\xb9\x74\xca\x63\x32\x4d\x98\x14\x15\xf9\x49\x72\x05\x4b\x5d\x78\x78\x18\x64\xb2\x80\xc8\x70\x91\xff\xa4\x53\x49\xcf\x2b\x11\xaa\xa7\xf9\xf4\x3c\x0c\x11\xe4\xca\x29\xbe\xbd\xb2\x9b\x75\x58\x78\x3d\x2c\xc7\x8c\x87\xec\xcd\x36\xac\xec\xb2\x25\x66\xc4\x1c\xa4\x1f\x67\xad\x8c\x6f\x19\xbd\x8a\x31\x30\x29\x3c\x06\xdc\xa9\xc2\x95\xca\x63\x40\xd5\xd4\xa7\x14\x8d\x94\x50\xcc\x84\x3c\x6e\xe5\xb8\x48\x3a\x93\x4c\x65\x97\x66\x13\x3f\x70\x93\x82\xe1\x15\xcf\xeb\xca\x80\x59\x68\xa5\x48\x51\x32\x8b\xe9\x7f\x26\x13\x4b\xb1\xe4\xc2\x77\xc9\x45\x7f\xfa\x41\xd4\xa5\x23\xb7\x8f\xf4\xed\x1e\xfd\x06\x57\x24\xc0\x5c\xfe\x0a\x33\x0a\x66\xea\xe7\xf9\xf7\x35\xde\xdd\xa5\xc7\xf6\x93\xad\xd3\x98\xc0\x7b\xa8\x29\xa0\x9b\x6e\xb9\x09\x84\x1a\x07\xf5\xef\xa1\x9f\x1b\xc3\x72\x91\x54\xfa\x65\x92\x93\xc9\x9e\x79\x02\xec\x5e\x59\xa6\x01\xf4\x17\x94\x47\x6f\xac\xde\xae\xbd\xf1\x0a\xbf\xfa\x8c\x76\x2e\x9c\x7c\x05\xbd\x29\x5b\xb7\x55\x42\xa6\xd5\x53\x54\xfc\x68\xd7\x4b\x7f\x08\xd9\xad\x36\x6e\x14\xe1\xdd\x1a\x6c\xae\x58\xbd\x5f\xd9\xcf\xb0\x59\x42\xad\x9d\x3f\x91\x30\xdf\xcd\x26\x7e\x58\xce\x80\x44\x22\xbd\x9c\x5a\xe2\x54\xa0\x81\x98\x29\xc4\x54\x63\x86\x44\xa8\xbc\x42\x3b\x17\x5e\x9f\xc8\xc3\xf5\xb8\xaa\xb2\x06\x12\xd6\xde\x6e\xa1\x12\xb9\x0a\xf1\x65\x0f\xbe\xfb\x29\xcc\x8d\x1c\x33\xa8\x56\x77\xce\x4a\x81\x8d\x75\xc7\xf8\x39\xe0\x5f\xc4\x55\x13\xf0\xbc\x12\x97\x9f\x2a\xf8\xf0\x38\x6f\xf5\x6e\xed\xdf\x3e\xc0\x4a\xfb\x11\xd9\xe7\x22\x99\xf9\xd9\xd4\xc8\x95\xf7\x15\xb7\xc1\xa5\x18\x77\x1b\xb8\x96\x9f\xd3\x3a\x71\x6e\xee\x13\xa2\x24\xe8\xc1\x43\xca\x3d\x2e\x5c\xff\x24\x55\xa6\xd4\x70\xbd\x0c\x0b\x79\x54\x3e\x0a\xe6\x3f\xb4\x7d\xcc\xa3\x7f\x3a\xb3\xee\x31\xeb\x2f\x9c\xce\x9a\xa0\x1b\x8a\x26\x8c\x98\xa3\xdc\x11\x3c\x2e\x7b\xe6\xfe\xfc\x6a\xc9\x6c\x7a\x79\x31\x91\x1c\x2f\x49\xe0\x19\xbf\x93\x7c\xb0\x69\x23\xb7\xd9\x60\x9e\x87\x2e\xb1\xcb\x77\x56\x77\x73\x64\xaa\xed\xfb\x03\xa2\xf5\x8d\x63\x36\x9e\x6e\x8a\xf3\x2f\x67\x33\x4c\x7f\xfc\xcd\x74\x8f\xd8\xad\x12\x6a\x9c\xc0\xc2\x05\x19\x2c\x57\x84\xba\x7f\x76\xb5\x4a\x52\x26\x45\x79\x14\xe1\x4b\x15\xa3\x63\x1a\x80\x5a\x0f\x04\x88\x7d\x16\xe1\x0f\x39\xd4\x38\x22\xff\x62\x10\xbc\xd7\x73\xf6\xd6\x43\x8f\x88\x36\x17\x49\xcc\x65\x39\x5e\xd4\xe9\xc2\x8d\x6e\x21\xc9\xd4\x13\x00\x54\x3c\x47\x95\x8a\xd5\x69\xe0\xfd\x55\xab\xd7\x83\x1b\x75\x82\xfe\xd7\x02\x9f\x4e\xfd\x7d\xee\x7b\x6e\x3a\x66\xf2\x8a\x3c\x21\x4e\x0e\x4e\x68\x46\x8a\x01\x05\x19\xd8\x8c\x7e\x8d\xf9\xa6\x83\xfa\x06\x66\xf6\x2b\x55\x9e\xcb\x10\xd2\x1d\x7c\x44\xd2\xe3\x17\xef\xaf\x8a\x2a\x6a\x7e\x22\xaa\xd8\xbe\x42\xd5\x22\xfd\xcb\x3f\x5e\xed\x56\xdb\xc9\x97\xd1\xee\x05\xb3\xf6\xbf\x34\x47\x0e\x64\x72\xc2\x1d\x9d\xc3\x72\x8d\x4a\x79\xc9\x3f\x4b\x9c\xfc\x06\xda\xbe\x63\xc1\xff\x98\x49\xa7\xe7\x09\x5e\x55\x14\x69\xec\x65\x62\x26\x84\x2e\x6b\x5f\x54\x3e\x72\x43\x07\xbe\x42\xc3\xae\xc0\x66\x97\x16\xff\xcd\x11\x79\xd0\x0d\x6d\x66\xfc\xc3\xc4\x6e\x9d\xa0\x77\x37\xe8\x9d\x4b\x48\xb4\x1b\xe4\x36\x77\x43\x78\x62\xfd\xff\x00\x00\x00\xff\xff\xef\x99\x3b\x23\x61\x0f\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3937, mode: os.FileMode(420), modTime: time.Unix(1617183391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
