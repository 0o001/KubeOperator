// Code generated for package i18n by go-bindata DO NOT EDIT. (@generated)
// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x4f\x73\xa3\x3c\xf2\xbe\xf3\x29\x14\x52\x73\x9b\x5f\xea\xfd\x5d\x73\x23\x98\x38\xec\xd8\x40\x01\xce\xbb\x99\x0b\x25\x43\xdb\xd6\x06\x24\x56\x12\x93\xf1\x7b\xdb\xef\xb5\xdf\x69\xbf\xc2\x56\x4b\x32\x60\xc7\xa9\xc9\xd4\x5e\x66\x92\x94\xfa\x8f\xba\xfb\xe9\xe7\x11\xb7\xb5\xe8\x3a\xc1\xbd\x24\x58\x47\x55\xf4\xf7\xb8\x28\x8b\x7b\xe2\x27\xb4\x03\x42\x5b\x09\xb4\x39\x12\xf8\xc9\x94\x56\xbe\x17\x67\x55\x92\x96\xd3\xa1\xac\x05\xaa\x80\xec\x58\xdb\x12\xc6\x89\x3e\x00\x91\xb0\x67\x4a\xcb\x23\x89\x33\x22\xec\x9f\xd4\x51\x69\xe8\x88\x02\xad\x19\xdf\x93\x9e\xee\xc1\xf7\xbc\xdb\xba\x1d\x94\x06\xe9\x85\xab\x4d\x51\x46\x79\xb5\x88\x56\x51\x19\x55\x8f\x41\xbc\x8a\x16\xf7\xc4\xaf\x29\x27\x5c\x68\xd2\x40\x0b\x1a\x88\x3b\x8e\x71\xea\x41\x4a\xe0\x9a\x28\x4d\x35\xf8\xa3\x83\xb8\x30\xd9\xe5\x9b\x24\x89\x93\xe5\x3d\xf1\xcb\xc3\xcc\x4c\x19\x67\x72\xe0\x9c\xf1\xfd\x3b\xa3\x55\x1a\x06\xab\x7b\xe2\xc7\x5d\x2f\xa4\x1e\xad\x6a\xca\xd1\x6a\x0b\x64\xe8\xf7\x92\x36\xd0\x98\xcc\x25\x34\xc0\x35\xa3\xad\x77\x96\x74\x95\x47\x45\xba\xc9\xc3\xe8\x9e\xf8\x8f\x94\xb5\xd0\x10\x2d\x5c\xfe\x37\xa4\x3c\x80\x04\xcc\x83\x72\x42\x95\x12\x35\xa3\x1a\x1a\x72\x10\x4a\x93\x81\x37\x20\x89\x3e\x30\x45\x5e\xe1\xe8\x7f\xe0\xb6\xfa\x9e\x26\xbf\xe5\xfb\x2f\xc1\xe1\x8a\xef\xc7\x60\xb3\x2a\xab\x30\x8f\x16\x51\x52\xc6\xc1\xaa\x0a\x83\xc4\x54\xc1\x86\xbd\x27\xfe\x02\x76\x74\x68\x35\x99\x6e\x3a\x2b\x85\x0d\xda\xf8\x76\x62\xc2\xa7\x28\xfc\x36\x75\xcd\xd4\x7c\xb2\xe2\x38\x46\x93\xa9\x19\x07\x33\x59\xca\xfc\x3c\x28\x90\xe6\x8c\xef\x79\xde\x2d\x96\xc2\x7b\x4a\x8b\xb2\x0a\x56\x79\x14\x2c\x5e\xa6\x49\x7b\xc2\x2a\x5d\x8e\xa3\xab\x92\xb1\x18\x13\xb8\x5a\x1c\x5b\x65\xac\x8f\x73\x31\x2b\xd2\x1b\xd3\x07\x93\x8c\x6b\xfa\x35\xbf\xd5\xc3\x4b\x95\xe5\xe9\xdf\xa2\xb0\xfc\x9f\x42\xf4\x52\xfc\x03\x6a\xed\x7b\x41\x96\x59\xff\xf1\x3a\x4b\xf3\xb2\x7a\x8c\x57\x51\x55\xc4\xdf\xa3\x2a\xca\xf3\x34\xbf\x27\x7e\xca\xdb\x23\x22\x0b\x94\x31\x67\x9c\xfc\xff\x1f\xeb\x07\xac\xa5\x1d\xc7\x56\xd8\x71\xbc\xea\xe9\x31\xcd\xd7\x41\x79\xee\x0b\xe3\xdf\xfd\x6c\xd5\x9d\xf9\xf7\xa7\xf1\x4d\x76\x42\x76\x54\xbf\xf7\x5a\xbc\x14\x65\xb4\xae\x1c\xe0\x1f\xd3\x4d\xb2\xb8\x8e\xf7\x56\xd4\xb4\x45\xb0\xef\x98\x54\xfa\x3f\xff\xfe\x97\xef\x25\x29\xda\x05\xcf\x41\xbc\x0a\x1e\x56\x38\x4e\x89\x20\x71\x4f\xe8\x0f\xca\x5a\xba\x6d\xc1\xf7\xe2\xc2\x22\xce\x64\x3e\xc3\x3a\xb3\xf0\xb3\x4e\xb1\xa0\xbe\x37\xbf\x9b\xb9\x4f\x95\x6c\x56\x2b\xeb\xb4\xa1\x9a\x62\x1b\x9c\xd9\x1b\x55\x64\x27\x06\xde\xdc\x10\x97\x69\x7d\x80\xfa\xd5\xe4\xe9\x8e\xe0\xa5\x6f\xce\x9d\xa2\xbb\xea\x39\x58\x6d\x30\xd3\xa8\xeb\xf5\xd1\xfa\x15\x9c\xb4\x8c\x03\xf9\xa2\xce\xcf\xff\x99\xa7\xc9\xd2\x55\x18\x37\x06\xaf\x85\x94\x50\x6b\x62\x03\xd8\x82\x7e\x64\x3c\x03\xdd\xbc\xb0\xe1\x0c\x31\x42\xdb\x4b\x7c\xe8\xc3\x8d\x64\xb2\x59\xdf\x13\x3f\x20\x5a\x68\xda\x12\xb1\x23\x5f\x14\x91\xe2\x4d\xe1\x8f\xe6\x02\x54\x02\xa1\x5b\x8e\x09\xb5\x5f\x89\x7a\x65\xfd\x55\x3f\x45\xf0\x7c\xbe\x54\x14\xfd\xe1\xa6\xf9\x8b\xfa\x4a\x24\x50\x25\xf8\x3d\x26\xe1\x79\xb7\x08\x58\x2f\x0b\x8a\xe2\xcf\x34\x5f\x98\x2b\xac\x83\x32\x7c\x72\xc0\xef\xa9\x52\x6f\x42\x36\x08\x03\x76\xaa\x8b\xef\xa5\x79\xbc\x8c\x13\x77\xe5\xf9\x79\x21\xd9\x9e\x71\xda\x7e\x64\x58\xa6\x69\xb5\x0e\x92\x17\x93\xea\x26\x8f\x70\x13\x94\x42\x90\x8e\xf2\x23\xd9\xd9\x84\xa9\xd6\xd0\xf5\x5a\xdd\x9d\x7a\x8e\xe4\x43\xf7\xd4\xcc\xa7\x04\x20\x1d\xe3\x83\x06\x45\x5a\xaa\x41\x9a\x01\xdd\x14\xd3\xe2\x0f\xc2\x32\x36\xf7\x2f\x4f\xeb\xc8\x31\x05\x70\x1c\xd5\xd9\x28\x09\xae\x69\xad\xcd\x30\xd1\xa6\x63\x1c\x69\x8e\x6a\x21\x6f\x9c\xc3\x79\x3f\x13\x41\xd4\x50\x1f\x8c\x43\x13\x32\x58\xac\xe3\xe4\xfd\x9e\xc5\xa0\x8d\xdb\xb5\xc6\xa9\x4d\xe1\xdd\xae\xbd\x39\x4f\x3a\x8f\x56\x41\x19\x2d\x66\x2b\x69\x83\x66\x07\x8a\xa9\xcf\x17\x8f\xdb\x37\x26\x85\xd5\x22\xc8\xc6\x0c\x36\xd9\x22\x18\x33\x68\x1b\xda\x5f\x06\x86\x86\xd9\xb8\xcf\x51\x1e\x3f\xbe\x54\x61\xba\x98\x71\xf3\x33\x48\xb6\x63\x35\xd5\x4c\x70\x52\x8b\x06\x08\x48\x29\xa4\xef\x45\xeb\x20\x5e\x55\x8b\xb8\x70\xc8\x5f\x53\xd6\x9e\x98\x5f\x99\x89\x6c\x98\xfa\x64\x61\x4f\xde\xe6\x53\x13\x75\xe8\xb0\xa3\xba\x3e\xb8\x01\xb0\x2b\x07\x99\x68\x1c\xcb\x02\x7f\x3b\x63\xa4\x71\xbe\x94\x96\xc0\xf7\xfa\x40\x1a\x01\xb6\xcf\x1d\x80\x3e\x49\x14\x09\xff\x1c\x98\x84\x0e\x38\xd2\x0b\xc6\x2d\x36\x99\xc5\xed\x53\x90\x2c\xa3\x2a\x2d\x9f\xa2\x1c\xa7\xf0\x45\x0c\xa7\x62\xd5\x07\xca\xf7\x96\xda\x4e\x61\x0c\x06\x85\x3e\x80\x34\x65\x55\x97\x09\x9e\xf6\xf2\x9b\x14\x7c\x3f\x91\x20\x11\x72\x74\x71\xba\xbc\x61\xc0\xf1\xe2\x97\x0c\xe8\xdd\xa2\xde\x12\xfc\x44\x59\x79\xb4\x8c\xd3\xe4\xb3\x72\x84\x58\xe3\x5f\x91\x16\xaa\x08\x0c\x85\xff\x9f\x02\xa1\x12\xf9\x74\x18\x23\x43\x7e\xc5\x8c\x2d\xe5\xe7\xaa\xcc\x6e\xf9\xd0\x16\x79\x0f\x7a\xce\xd1\x57\x16\x7c\x2d\xf8\x8e\xed\x07\x69\x66\xd2\x0c\x45\xbc\x0e\x96\xd1\xc7\xae\x58\x47\xf7\xf0\x39\x47\x59\x55\x3c\xa5\xb9\xdd\xf6\x6a\xd8\xed\x58\xcd\x50\x7f\xc6\x3d\x96\x45\xf4\xc0\x95\xa6\xf5\xab\xb7\x8c\xca\x53\x07\x4e\x1d\x4e\xc4\xa9\xc8\x66\xa7\xe3\x79\x87\xc9\x35\x74\x5b\x90\x23\xac\x83\xc5\x62\x0e\xe3\x2d\x00\x27\xb4\x71\x82\xd3\x99\x8c\xd2\xcd\xe1\xfe\x63\xdd\xe6\x0c\xae\x89\xb6\x93\xed\x53\x50\x54\xae\xdc\xc8\xec\xce\x60\xd6\x9a\xb1\xd4\xe1\x95\x6d\xe4\xdd\x72\xd1\x80\x97\xe0\x56\x38\x89\x35\x27\xbc\xab\x32\x28\xbe\x21\x33\x35\x0d\xc1\x43\x38\xd5\x4e\xc3\x9b\x5f\x4f\x53\xe0\xa4\xf8\xd7\xde\x36\xe0\x8d\x32\x4d\x98\x26\x8d\xe0\x70\x87\x01\xb6\xb4\x7e\x1d\xfa\xa0\xae\xc5\xc0\xb5\x97\x05\x79\xb0\xae\xa2\x75\x56\xbe\x5c\xb6\xa1\xa7\x92\x76\xa0\x2d\xce\x26\xcc\x62\x39\xb9\x1a\x7a\xa4\x65\x9c\xc9\x63\x8f\x6f\x85\x73\xb5\x7a\xb6\xc7\xec\x3e\x19\xe5\xdf\x43\x10\x7e\xdb\x64\x55\x10\x86\xe9\x26\xf9\x1d\x21\x78\x96\xf8\xa7\x15\xa1\x77\x8b\x10\xb8\x50\xfe\x9f\x88\x86\x56\xbf\x11\xc4\x75\xf5\xc1\xe4\xe8\xb9\x3b\xa2\x66\xb4\xcc\xe2\xa0\xe2\x40\xe1\xda\xa6\xc7\x4b\x59\xd1\xb8\x85\x9d\x90\x40\xd4\x1b\xd3\xf5\x01\x9f\x74\xb3\x03\xd4\x5e\xfb\x0c\xca\x36\xca\xfb\x07\xd9\x16\xd0\x18\x0d\xa1\x21\x43\x6f\xb0\x36\x33\xcb\xa3\xa2\x4c\xf3\xe8\xbd\x9d\x04\xa5\x85\x64\x7c\x6f\x2c\x46\x78\xe4\xa0\xc4\x20\x6b\x78\x5f\xc3\xd9\x35\x7f\x79\xb9\x49\xc7\x5e\x7f\x06\x4c\x98\x19\x45\xff\xa9\xf4\x5b\x68\x05\xd2\x9c\x16\xe7\xbb\xaa\xc4\xb7\x97\xe8\x41\x3a\xbe\x1c\xf1\xd4\x83\x44\xbd\xe8\x10\x85\x34\x6c\x59\x7a\xe4\x7a\xdb\x8d\xe2\xc8\xeb\x83\x14\x9c\xfd\x85\x75\x42\x42\x31\x4c\xfa\x87\xe3\xf4\x55\xba\x8c\x93\x4b\x9b\xcd\x5c\xca\x20\x5b\xdc\xb8\xd3\x13\x37\x97\xd3\xdb\xbc\x97\xe2\xc0\xb6\x4c\x2b\x82\x67\x5c\x8c\x9d\x14\x1d\x69\xc5\x7e\x8f\x5d\x62\xfc\xee\x33\x4a\xc8\xbb\xad\x99\xf2\xc2\xb8\x30\x5b\xe0\x72\x35\xa0\xd2\x67\x8a\x68\xaa\x5e\x2f\xd7\x00\x9a\xfe\xe8\x42\xb3\x7b\xbd\xe7\x75\x15\xa6\xc9\x63\xbc\x9c\x1e\x80\xe1\x7c\x2b\xbf\xe3\xc1\xc9\xe0\xf2\x2b\x42\x79\xb9\xd1\x3f\xea\x56\x03\x7d\x2b\x8e\x9d\x59\x28\x2d\xe5\x9f\xee\x1a\xeb\x91\x1f\xc6\x3c\x31\x1e\x70\x0d\x12\x1a\x7c\x15\x29\xd8\x1b\x97\x98\x42\xcb\x6a\xad\x26\x50\x9a\xdc\xb1\xb4\xd3\xb1\xaf\xa4\x3f\x7f\x61\x19\x1d\x3b\x7e\x77\x99\x3f\xa9\xe2\x0c\xf5\x3e\x66\x58\xd7\x43\xcf\x50\x08\xf3\x66\x96\xa4\x04\xe3\xa9\xb1\x29\xfe\x5f\x2f\x44\x8b\x6e\xb2\x34\x5d\x5d\xad\x51\x9c\x11\x3c\x33\x23\x9f\x2b\x7b\x64\x7c\xc1\x59\x4a\x3f\x8f\x38\x32\x8c\x15\x25\x4a\xcb\xa3\x87\x6c\x58\x94\xf9\xcb\xfb\x07\x7d\x39\xff\x56\x24\x76\xf6\xfb\x04\x95\xf5\x81\x69\xa8\xf5\x20\xc1\x2c\xec\x2b\x82\xc7\x7e\xad\x22\xde\x5c\x6e\xc7\xdc\x3e\xbb\xb0\x4f\xe3\xfb\xc9\xf7\xb2\x28\x5f\xc7\x45\x81\x7c\xbc\x88\x92\xd8\xdc\x35\x03\xd9\x31\xa5\xf0\x64\x03\x9c\x61\xbe\x9b\x24\x8f\xc2\x74\x99\xc4\xdf\xa3\x85\x81\x91\x61\x0e\x09\xb5\xd8\x4f\x90\x23\x6c\x8a\xe1\x7b\xff\x0d\x00\x00\xff\xff\x58\xa1\x88\x2f\x34\x13\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4916, mode: os.FileMode(420), modTime: time.Unix(1645002014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x4b\x57\xe2\x58\x1e\xdf\xe7\x53\xe4\xe0\xe9\xdd\x4c\x9d\x9e\x6d\xed\x22\x5c\x31\x53\x90\xe4\x24\xc1\x1e\x6b\x93\x63\x5b\x4c\x8f\xd3\x0a\x1e\xd1\x39\x35\xb3\x6a\x54\x5e\x36\x08\x53\xa5\x4e\xa9\x54\x09\x96\x5a\x8e\x16\xc4\x47\x97\x50\x04\xf5\xcb\xe4\xde\x24\x2b\xbf\xc2\x9c\x7b\x6f\x08\x01\x8b\x69\x97\x84\xff\xfb\xf1\xfb\xfd\xef\xd8\x6c\x72\x61\x21\x99\x60\x04\x2e\x0a\x34\xf0\x17\x5e\x51\x95\xe7\x6c\x00\x56\x4a\xd6\xa7\x0b\xd8\xba\x82\x8d\x77\xb0\x7a\x1a\x60\x78\x49\x13\x44\xb5\x2f\x60\xeb\x2d\x58\x3d\xb5\xae\x0d\xcb\x38\xb0\x9b\x77\xd6\x6d\xd3\xa9\x7f\x71\xde\x1f\xc2\xfa\x39\xcc\xee\x9a\xc6\x5b\xd8\x79\xcb\x4b\x01\x86\x19\x9b\x9d\x5f\x49\x2d\xc7\x97\x98\x60\x24\xa6\xa8\x40\xd6\x42\x20\x02\x54\xa0\x4d\x70\x7c\x04\x84\x9e\xb3\x01\xf4\x9f\x1a\xba\xde\x86\xf9\x9a\xb3\x7b\x04\x6f\xdf\xc2\x42\xc9\xda\xb8\x41\xbf\xa4\xad\xbd\x75\x67\x3f\x6b\xdd\x1d\x05\x3c\x55\x5e\x21\x41\xc8\x31\x41\xe0\x85\xf0\x73\x36\x40\x05\xcc\x76\x09\x56\x4f\xed\xfb\x8a\x5d\x2f\x9a\xed\xc6\x43\x37\xfd\x48\x25\x22\x06\xb9\x08\xce\x4b\xef\xc2\xcc\x31\x55\x73\x1d\x97\x72\x56\xe7\x13\x09\x74\x29\xfe\x2a\x9e\x58\x9e\x9b\x99\x67\x06\x62\xd4\x64\xa0\x88\x31\x39\x08\xb0\x3e\x0d\xf3\xe8\xd2\xfe\xed\xf8\xa1\x9b\xb6\xf5\x63\xeb\xd3\x3b\xe7\xcd\xb1\xd9\xfe\x15\x55\x0b\x30\x73\x6d\xa7\xb7\xcc\xb6\x81\xaa\x9d\xc0\x08\x23\xda\x4b\x51\x78\xaa\x25\x58\xd6\xad\xad\x53\x58\x24\xc6\x26\xb8\x58\x44\xd5\x82\x32\x08\x01\x41\xe5\xb9\x88\x16\xe4\x04\x92\x1b\xf5\x83\xab\x61\xbc\xb3\x9b\x47\x30\xd7\x40\xa5\xa6\xd9\x2e\xd9\x6b\xb7\xd4\x09\x29\x08\xe9\x6f\x70\x12\x04\x5f\xf4\x4b\x4f\x3d\xd2\x5e\x53\x05\xb3\xbd\x69\x6d\x9d\xa2\x7c\x0b\x7f\xdc\x6f\xc3\x4a\x11\x57\xe6\x6f\xc9\xd4\x32\x33\x29\x2a\xaa\xc6\x45\x64\xc0\x85\xa6\xfb\x73\x40\x93\xf5\x0d\x8a\x9b\x35\x91\xf6\x1c\x3d\x4e\xd6\xd3\xb3\x8c\x32\x4d\xb6\xd7\xec\xc7\x06\xb4\xf1\x69\x4d\x92\xc5\x3f\x83\xa0\xfa\x54\x5b\xf5\xaf\xd6\x7e\x93\xe4\xcd\x49\x12\xb5\xc5\x47\x25\x51\x56\xb5\x09\x3e\x02\x34\x85\x7f\x09\x34\x20\xcb\xa2\x8c\x53\x30\x32\x68\x4b\x47\xc5\xb4\xd9\xde\x30\xbb\x35\xf6\x4f\xdf\x47\xc7\x59\xd3\x38\x86\xd9\x8c\xb5\xb7\x8e\x76\x72\xa6\x71\x33\xc2\xce\x28\x13\xcf\x5e\xcf\xa7\xd8\x67\xaf\x53\xf3\xaf\x59\xaa\x8f\x6a\x5d\xd8\x2d\x07\x18\x65\x5a\x51\x41\x54\x73\xb7\x69\x42\x8c\x09\x21\x77\x99\x32\x79\xba\x3a\xa8\xfa\x19\x55\x3b\xbc\x44\x9b\x26\x62\x51\x6e\x8a\xe3\x23\xdc\x78\x04\xf7\x98\x97\x58\xfb\xcb\x3a\xea\x54\x70\xbf\x6e\xae\x03\x0c\xaf\xd0\xe1\x26\xc1\x11\x5b\x6e\x3d\xcc\xf6\x26\x5d\x43\x96\x97\x58\x98\xbd\xb2\xce\xd2\x0f\xdd\x22\xaa\x9e\xd9\x6b\xb7\x28\x5f\x81\x1b\x07\xa8\x65\xc0\x8d\x5a\x80\xf1\xa7\x45\x32\xd2\x84\x58\x04\x6f\x0b\xaa\x9e\xa1\xc2\x1d\xcc\x5f\xc0\xb2\x4e\x37\x07\x17\x64\xfb\x02\x95\x9a\xa4\xf2\x2d\xf4\xf1\x17\x74\x70\x4c\xff\xa2\x89\x92\xb0\xfd\x06\xb1\x29\x6d\x8a\x8b\xc4\x70\xf4\xdf\xa5\x58\xbb\x5e\x44\xd5\x82\xf5\xdf\x0e\xb5\x33\x28\xfc\x83\x2c\x0a\x61\x6d\x42\x94\xa3\x9c\xea\x89\x5b\xe7\x3a\x2c\x7f\xa4\x15\x34\xdb\x25\xd4\xf8\x68\xd5\x87\xf4\x7c\x5b\xe1\xaf\xab\xeb\xae\x70\x87\x11\x22\x7f\x01\xf5\xac\xf3\xe6\x78\x50\xd3\x9d\x30\x21\x16\xc5\xa3\x95\xb9\x64\x5d\x1d\x12\x1c\xf5\x06\xdb\xed\x87\x6e\xd1\x6e\x5d\xdb\xf7\xb9\x6f\x2a\x2b\xdc\x14\xf0\x56\x01\x1b\x30\xef\xdf\xe3\x75\x70\x47\xb4\x08\x37\x0f\xe0\x7e\xed\xa1\xbb\xf7\x5d\x2a\xc0\x30\xcc\xd8\x4a\x2a\xbe\xc4\x48\x9c\xa2\xfc\x20\xca\x21\x12\x70\x94\x53\x83\x93\x04\x9e\xb2\x56\x2d\xed\x6c\xed\xda\xba\x1e\x60\x44\x99\x0f\xf3\x82\x9b\x93\x27\xb2\x79\x30\x28\xa5\x8a\xa2\x16\xe5\x84\x69\x12\x4d\x4c\x06\x04\xbe\x89\x6b\xf4\xb9\x8e\xb6\x2f\xec\xfb\x1c\x3c\xda\xc3\x19\xe8\x2d\xb3\x5d\x80\xf9\xac\xf3\xe6\x00\x56\x36\x9d\x5c\xc9\xd6\xb7\x49\xbf\x62\x4a\x1f\x29\xb9\xa0\xca\x93\x74\x28\x0e\xa0\xea\x19\xac\x60\x14\xa2\x0d\xb7\xd3\x5b\x18\xf3\x9b\x75\xab\x92\x85\xff\x7e\xd7\xd7\xf6\x97\x1d\x03\x6b\xe3\x88\xea\xd3\x1d\x0c\x45\x79\x61\x14\x5e\xb1\x33\xaf\x16\xe6\x12\x2c\x15\xa7\x28\x64\x1f\x9e\xfb\x90\xcb\x1f\x9d\x0c\x22\x9c\x0a\x42\x3e\x38\x70\xc3\xbc\xaa\x7b\xa8\x49\x97\x3f\xc0\x44\x42\x9c\xe4\x39\x8d\x49\x21\x8e\x38\xc5\x5f\x07\x9c\x99\xf7\x4d\xb4\xf5\x95\x78\x9a\x02\x32\x3f\x31\xad\x05\xc5\x90\x8f\x9f\x9c\xb3\xa2\xad\xa7\x7d\x05\x07\x51\x8e\x8f\x68\x21\x5e\x71\x57\xd2\x59\x6d\x9a\xc6\x0d\x25\x41\xfb\xf0\xdc\x3a\x49\x8f\x2a\x57\x4f\xd7\xdf\x4f\xaa\x0d\x8b\x5f\x9d\x4c\xc9\x03\x35\x17\xae\xbd\x19\x51\xf0\xaf\x3e\x9a\x92\xfe\xc3\x6e\x07\x76\x4e\xcc\x76\xc9\xfa\x7c\x02\x2b\x79\x97\x8a\x4f\xd2\xe8\x72\x15\x03\x87\xaa\x29\x31\x89\x2e\xc7\x24\x27\x84\x81\x26\xaa\x93\x40\xc6\xc3\x81\xf6\x56\xf1\x60\x53\xbc\x22\xc9\xc3\xcc\x8d\x69\xec\xb8\xc0\x4f\x8c\x0f\x07\xd0\x03\x3a\x8f\x1c\x50\x7e\x67\x70\x0c\x69\x66\x84\x17\x68\x56\x56\xf3\xd2\x47\x0b\x0c\x33\xb6\x14\xff\x69\x2e\x99\xe8\xe1\xbb\x0c\xc2\xbc\x28\x3c\x89\x62\x61\xb1\x03\x0f\x0e\xfc\xf8\xee\x23\x46\x66\xec\x5f\xc9\x44\xbc\x67\x15\x93\xeb\xd3\x6c\xf6\x2c\x0c\xd0\xc6\xda\xa9\x75\x7b\x65\x37\xeb\x30\xff\x66\xf0\x84\xa0\x78\x68\x6f\xb6\x60\x79\x87\x82\x09\xa5\x2b\x3f\x0c\x3a\x99\x92\x75\x4b\x49\x87\x8f\x72\x61\x30\x4a\x71\xbb\x0a\xd7\xca\xa3\x14\x25\x4d\x99\x14\x65\x5c\x42\x7e\x91\xed\x61\x3c\xc3\x8c\x25\x17\xe3\x89\xd4\xf2\xcc\xec\xcf\x4c\x18\xa8\xbd\xe2\xf5\xba\xd2\x47\x38\x52\x29\x5c\x94\xc5\xa5\xe4\xdf\xe3\xb3\xcb\xd1\xf8\xc2\x8f\xf1\x25\x6f\x85\xb8\x50\xa8\xdf\x44\x92\x78\x8f\x03\x3c\x0d\xef\xd2\x70\x57\x6c\xd4\xda\xd2\x2d\x7b\x74\x66\xf4\xb4\x26\x39\x45\x73\x0b\x88\x55\x88\xb0\x9f\xe7\x1f\xba\xe9\x47\xba\xcc\x58\x22\xf9\x2a\xce\x08\x78\xfd\x7a\x87\x86\x7b\xeb\x69\x2a\xa7\xbc\x20\x08\x8d\x27\xd5\xde\x58\xb5\x56\xbf\xa2\xed\x0b\x27\x57\x46\x6f\x4b\xe6\x6d\x15\xc3\x74\xf5\x14\x15\x3e\xd9\xf5\xe2\x1f\x58\x5b\x6f\x59\x8d\x02\xbc\xcb\xc0\xe6\x9a\x69\x7c\xa6\x9f\x61\xb3\x88\xf4\xed\x67\xd8\xcd\x8f\x33\xb3\x3f\xaf\x2c\x72\xb3\xb3\xc9\x95\xc4\x32\x23\x71\x32\x17\xd5\x40\x54\x52\xa7\xb1\x87\xf2\x2a\xda\xbe\xe8\x55\xde\xb7\x47\x04\xe1\xdd\xb5\xb1\xf6\xd6\xad\x4b\x03\x7e\xf8\x35\xc0\x0c\x9d\x54\xa8\x56\x77\xce\x8a\xbe\x45\x76\x07\x73\x9c\x0b\xbe\x88\x49\x1a\x17\x0c\x8a\x31\xe1\xa9\x87\x0d\x3c\xca\x99\xc6\xad\xfd\xdb\x09\x2c\xb7\x46\x9c\x37\xcc\xd8\xe2\xfc\x4c\x62\xe8\xd6\xfc\x1d\xb3\xfe\x31\x7f\x6c\xd6\x77\xb3\x8f\x93\x3a\x31\x6e\xec\xf8\xe2\xa1\x28\xdc\x9b\x6a\x7a\xb6\xb8\xf6\x71\xa8\xf4\x06\x80\xd9\x12\xcc\xe7\x50\xe9\xd0\x1f\xff\xc0\x3e\x51\x8b\xde\x01\x4f\xbb\x47\xa5\xbf\x71\xc0\xcb\x40\x51\x45\x19\x0c\x89\xa3\xf4\x21\x3c\x2a\xf5\xc4\xbd\xf9\x95\xe3\xa9\xe4\xca\xd2\x6c\xfc\x71\x49\x7c\x69\xfc\x9f\xe0\xfd\x4d\x1b\xba\x41\xfb\xf3\x3c\x70\x71\x5e\x7e\x30\x3b\x9b\x43\x53\x6d\xdf\xef\xe3\x2b\xa2\x71\x44\xc7\xd3\x0d\x71\xfe\xd5\xcc\x22\xa5\x25\x8f\xd3\x68\x25\x61\xa5\x88\x1a\xc7\x30\x7f\x81\x07\xcb\xe5\xa6\xce\xf7\x2e\x85\x45\xc4\x30\x2f\x0c\x6b\x78\x0c\x46\x01\x96\x38\x20\xd2\x7d\x5e\xa2\x8c\x60\x9d\xa4\x51\xe3\x10\xff\x45\x55\xac\x5d\xc3\xd9\xcd\xb2\x23\xb8\x9c\x19\x9b\x9d\x4b\x31\x41\x5e\x21\x0b\x37\xbc\x85\x38\xd2\x1e\xa4\xa3\xc2\x39\x2a\x97\xcd\x76\xc3\xda\x5b\x37\x0d\x03\x6e\xd4\xb1\xf6\x3f\x16\x82\xc9\xc4\x5f\xe7\x7e\x62\xa6\xa2\x5a\x50\x14\x26\xf8\x70\xff\xa9\x40\x61\xce\xc7\x09\x7d\x99\xe1\x37\xa1\x27\xda\xaf\xaf\x6f\x66\x7f\xa7\xca\x73\x8b\x18\x46\xfb\x4f\x59\x72\x56\x5b\x7b\xeb\xbc\x84\x9a\x5f\xcc\xf6\x26\x6c\x5d\xa1\x6a\x81\xfc\xf2\xce\x62\x5b\x6f\x39\xb9\x12\xda\xb9\xa0\xd2\xde\x7b\x77\xe8\xf4\xc6\xc7\xe1\xe1\x39\x2c\xd5\x08\xc3\x17\xbd\x6b\xc5\xc9\x6d\xa0\xad\x3b\xea\xfc\x8f\x8b\xc9\xe4\x3c\xd6\x97\x44\x31\xf2\x28\x33\x7e\x91\x45\x97\xb5\x6f\x72\x19\xbe\xce\x7d\x6f\xe1\x80\x4b\x99\xa9\xe5\xa5\x7f\x32\x18\xf0\x15\x55\x9e\x7e\xfc\x00\xb3\xf5\x63\xf4\xe1\x06\x7d\x70\x01\x89\x74\x03\x5f\xfd\xae\x8b\x1e\xfd\xba\xcf\x7c\x96\xf1\x1f\x6a\xe6\x7d\x1d\xa5\x75\xf7\x49\x40\x0e\xfd\x00\x23\x01\x39\xca\x2b\x0a\xa6\x97\x10\x10\x78\x0a\x6a\xef\xd7\x9c\x5d\xef\xc5\x11\x13\x64\x10\x14\xc3\x02\xff\x12\x84\xc8\x58\xd2\x97\x02\xae\x84\x9e\x85\xf9\x73\x6f\x86\x03\x0c\xf3\xbf\x00\x00\x00\xff\xff\x3a\x2e\x4c\x9c\x5e\x10\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 4190, mode: os.FileMode(420), modTime: time.Unix(1645001999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
