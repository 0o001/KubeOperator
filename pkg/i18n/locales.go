// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x72\xab\x38\x16\xde\xf3\x14\x0a\xd9\x4e\xdd\x9a\xb5\x77\x0a\xc8\x0e\x73\x31\xb8\xf8\xc9\x4c\x66\x43\xc9\x70\x8c\xd5\x01\x89\x92\xc4\x4d\xe7\xee\xfa\xbd\xfa\x9d\xfa\x15\xba\x24\x64\x4c\xec\xa4\xe2\x5b\xbd\x4a\xb9\xc2\x77\x7e\xbe\xf3\x9d\xef\xe8\xbe\x16\x7d\x2f\xb8\x97\xe0\x2d\xa9\xc8\xff\xa2\xbc\xc8\x57\xc8\x4f\x68\x0f\x88\x76\x12\x68\xf3\x86\xe0\x77\xa6\xb4\xf2\xbd\x68\x57\x25\x69\x71\xfe\x68\xd7\x01\x55\x80\x0e\xac\xeb\x10\xe3\x48\x1f\x01\x75\xa2\xa6\x1d\x8a\x76\x48\x4c\xbf\xd5\x9b\xd2\xd0\x23\x05\x5a\x33\xde\xa2\x81\xb6\xe0\x7b\xde\x7d\xdd\x8d\x4a\x83\xf4\x82\xb8\xcc\x0b\x92\x55\x21\x89\x49\x41\xaa\x35\x8e\x62\x12\xae\x90\x5f\x53\x8e\xb8\xd0\xa8\x81\x0e\x34\x20\xf7\xb9\x49\x52\x8f\x52\x02\xd7\x48\x69\xaa\xc1\x9f\x03\x44\xb9\x2d\x2d\x2b\x93\x24\x4a\x36\x2b\xe4\x17\xc7\x05\x4c\xd9\x60\x72\xe4\x9c\xf1\xf6\x0a\x14\xa7\x01\x8e\x57\xc8\x8f\xfa\x41\x48\x3d\xa3\x6a\xca\x0d\x6a\x0f\x68\x1c\x5a\x49\x1b\x68\x6c\xe5\x12\x1a\xe0\x9a\xd1\xce\x7b\x57\x74\x95\x91\x3c\x2d\xb3\x80\xac\x90\xbf\xa6\xac\x83\x06\x69\xe1\xea\xbf\x43\xc5\x11\x24\x98\x3a\x28\x47\x54\x29\x51\x33\xaa\xa1\x41\x47\xa1\x34\x1a\x79\x03\x12\xe9\x23\x53\xe8\x05\xde\xfc\x4f\xc2\x56\xff\x4f\x93\x5f\x8a\xfd\x53\x70\xf8\x20\xf6\x1a\x97\x71\x51\x05\x19\x09\x49\x52\x44\x38\xae\x02\x9c\x58\x16\xa6\xb4\x2b\xe4\x87\x70\xa0\x63\xa7\xd1\xb9\xd3\x05\x15\x53\x52\xcb\x84\x29\xde\x7b\x4c\xf3\xa2\xc2\x71\x46\x70\xf8\x7c\x16\xc6\xa3\xe9\xeb\x52\x3d\xae\x2f\x8b\x98\x07\xfd\x61\x3b\x13\x2f\xa6\x23\x17\x62\xd1\xd6\x2b\xd3\x47\xab\x2c\x37\xa6\x8f\xe2\x56\x0f\xcf\xd5\x2e\x4b\xff\x43\x82\xe2\x1f\xa5\x18\xa4\xf8\x0d\x6a\xed\x7b\xf9\x73\x5e\x90\x6d\xe5\xf4\xbf\x4e\xcb\x24\xfc\x42\xfe\x07\x26\x95\xfe\xeb\xcf\x3f\x7c\x2f\x49\x0d\x0e\x3f\xe1\x28\xc6\x0f\xb1\x21\x38\x11\x28\x1a\x10\xfd\x41\x59\x47\xf7\x1d\xf8\x5e\x94\x4f\x1a\xb4\x3d\x2c\xd4\xcf\x26\x41\x4e\x41\x4d\xc1\x86\xf6\x51\x81\xf4\x76\x38\xcf\xff\x9b\x66\xa1\xad\x67\x8b\x8b\xe0\xd1\x49\x7e\xa0\x4a\xbd\x0a\xd9\x98\xd6\x18\xaf\x85\x94\xb6\x81\x34\x8b\x36\x51\x82\xe3\xab\xef\x85\x64\x2d\xe3\xb4\xfb\x0c\x58\xe6\xe7\x3d\xc1\x41\x11\x3d\x11\x07\x34\x65\x9c\x16\x0b\xb8\xe9\xa3\xb9\x43\x8e\x91\x5a\x70\x4d\x6b\x6d\x19\xa1\x4d\xcf\x38\x53\x5a\x52\x2d\xe4\x9d\x0b\xb8\x64\x31\x11\x48\x8d\xf5\xd1\x06\xb4\x84\xe1\x70\x1b\x25\xd7\xb2\x34\x49\x1b\x27\x4d\x1b\x74\x2a\xe1\x4a\x9a\x77\xef\x8b\xce\x48\x8c\x0b\x12\x2e\xf4\x50\x1a\xd8\x91\x9a\xd2\x97\x53\x77\xc3\xb6\x25\xc4\x21\xde\xcd\x15\x94\xbb\x10\xcf\x15\x74\x0d\x1d\x2e\x13\x43\xc3\xa6\xbc\x4f\x24\x8b\xd6\xcf\x55\x90\x86\x0b\x2b\x7b\x02\xc9\x0e\xac\xa6\x9a\x09\x8e\x6a\xd1\x00\x02\x29\x85\x34\xa3\x94\xd0\x32\xc1\x4f\x02\xce\xc8\x26\x4a\x93\x5b\xed\x04\x4d\xe0\xaf\x24\x6c\x5c\xc0\xa4\x32\x7f\x4f\x89\x8c\x93\xdc\x9c\xc6\xda\xc8\x57\x7b\xd2\x51\xfe\xde\x55\xcb\xd8\x18\x6a\x30\x51\xd4\x82\x5e\x6e\xec\x59\x26\x47\xa8\x5f\xa6\xff\x08\x7e\x60\xed\x28\x2d\x49\x76\x02\xd1\x16\x6f\xc8\xe7\xa1\x58\x4f\x5b\xb8\x29\x90\xe7\xdd\x8b\x01\xb8\xd2\xb4\x7e\xf1\x36\xa4\x38\xd1\x4c\xb2\x2c\xcd\x26\xf9\x39\x26\x0f\x62\xe4\xd6\xd8\x9c\x12\xb6\xd0\xef\x41\xce\x62\xc2\x61\xb8\x14\xcf\x1e\x80\x23\xda\xb8\xab\xe0\x20\xb3\xbf\x3a\xb5\x7d\x6e\xae\x0e\xf0\x91\xb3\x9e\xb0\x8f\x38\xaf\x1c\xa7\xc6\x6c\x1c\x60\xc1\xff\xcc\x67\xf0\xc1\x0e\x78\xf7\x5c\x34\xe0\x25\x46\x8b\x27\x7f\x76\xd7\xb1\x2a\x70\xfe\x7d\x85\x7c\xdc\x34\xc8\x7c\x84\x84\x3c\x1d\x5a\xfb\xf3\x34\x6a\x77\x2f\xff\x35\x4c\x2c\xbf\x52\xa6\x11\xd3\xa8\x11\x1c\xbe\x99\x04\x7b\x5a\xbf\x8c\x03\xae\x6b\x31\x72\xed\xed\x70\x86\xb7\x15\xd9\xee\x8a\x67\x73\x4b\xb9\x1a\x0f\x07\x56\x33\x73\xab\x07\x2a\x69\x0f\x1a\xa4\x32\x76\x58\x54\x79\xb9\xdb\xa5\x99\xdd\x45\xae\xc6\xc1\x98\x9c\x11\xde\xdb\x60\x0e\xfa\x23\x09\xbe\x7f\xb2\x3d\x07\xab\xd0\xd9\xf1\x1f\x70\xf0\xbd\xdc\x55\x38\x08\xd2\x32\xf9\x15\xef\x7f\x57\xf8\xcd\x47\xc0\xbb\x37\x3a\xbf\x38\xcf\x37\x64\x33\xa8\x5f\x48\xe2\xa6\xfa\x60\x6b\xf4\x5c\x8f\xeb\x28\x26\x93\x9f\xb9\x7d\x70\xca\x77\x63\xd3\x73\x53\xe6\x1a\x01\xda\xc3\x41\x48\x40\xea\x95\xe9\xfa\x68\xde\x5d\x8b\x0f\xe8\xd4\xf6\xbb\x7d\x9d\xb2\x5c\xbf\x9a\xf6\x60\xc0\x06\x08\x0d\x1a\x07\xbb\x50\x0b\x58\x46\xf2\x22\xcd\xc8\x35\x4e\x82\xd2\x42\x32\xde\x4e\x2b\x78\x5a\x8f\x0c\x94\x18\x65\x0d\xd7\x1c\x2e\xda\xfc\xb2\xb9\xf3\x69\xfd\xf8\xf2\x9f\x77\x66\xbe\xf3\x27\xea\xf7\xd0\x09\xde\x2a\x33\xa1\x77\x86\x54\x98\x07\x92\x18\x40\x3a\x97\x9e\xf7\x69\x00\x79\x10\xb2\x77\x1b\x65\xcc\x7f\xba\x0d\xf3\x85\x99\xa6\x91\xbf\xf1\xfa\x28\x05\x67\x3f\x0d\x4f\x0a\xa4\x42\x54\x02\xfa\xb7\xbb\x24\x71\xba\x89\x92\x4b\x4c\xb9\x3c\xa0\xe6\x89\x74\xe7\xbe\x0e\xa3\xdc\x3d\x14\x8a\xf3\x03\x7a\x90\xe2\xc8\xf6\x4c\x2b\x64\xbe\x71\x39\x0e\x52\xf4\xa8\x13\x6d\x6b\xa6\xc4\xf8\xb7\x5b\xee\xaf\x77\x5f\x33\xe5\x05\x51\x6e\x5d\xe0\xd2\x1a\xcc\xe3\x83\x29\xa4\xa9\x7a\xb9\xb4\x01\x03\xfd\xd1\x07\xd6\x60\xbd\xa7\x6d\x15\xa4\xc9\x3a\xda\x9c\xdf\x7c\xc1\xd2\x7a\xaf\x1e\x7f\x67\xc0\xe5\x53\xbf\xb8\xb4\xed\xcf\xa6\xd5\xc0\xd0\x89\xb7\xde\x1a\x4a\x47\xf9\xad\x53\xf3\xbc\xbf\x03\x00\x00\xff\xff\x5b\x58\x7c\xbe\xe2\x0c\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 3298, mode: os.FileMode(420), modTime: time.Unix(1604909962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x41\x57\xdb\x46\x17\xdd\xcf\xaf\xf0\xb1\xb7\xdf\xf9\x4e\xd7\xd9\x0d\xd2\x60\xd4\xc8\x92\x8e\x24\xd3\xd2\x8d\x0e\x31\x6a\x4a\x03\x36\xc7\x40\x17\x5d\xc5\x21\x80\x21\x76\x4c\x13\x93\x42\xe2\x06\x4c\x4c\xf0\x49\x62\x9b\x84\x04\x13\x0b\x93\x3f\xa3\x19\xc9\xab\xfc\x85\x9e\xd1\xc8\xb2\x6c\xe2\x94\xad\x74\xdf\x7b\x77\xde\xbb\x73\xdf\xc4\x52\x99\xc5\xc5\x4c\x1a\x48\x30\x81\x0c\xf4\xb3\xa0\xe9\xda\xad\x48\x14\xef\x14\x9d\x93\x53\xdc\xfe\x80\x1b\x7b\xb8\x52\x8f\x02\x41\x31\x24\x59\x1f\x00\xdc\x56\x1b\x57\xea\xce\x99\xe5\x58\x07\x6e\xf3\xca\xe9\x36\x7b\xd5\x4f\xbd\x7f\x8e\x70\xf5\x2d\xde\xd8\x67\xdf\x05\x25\x0a\x40\x2c\xb5\xb0\xba\xbc\x62\x66\x01\x27\x26\x35\x1d\xa9\x06\x8f\x44\xa4\x23\x63\x12\x0a\x22\xe2\x6f\x45\xa2\xe4\xef\x43\x72\xb6\x8b\xf3\x87\xbd\xfd\x1a\xee\x3e\xc5\x5b\x45\x67\xfb\x9c\xdc\xcf\x39\xcf\x1f\xf6\x5e\x6c\x38\x57\xb5\x68\x10\x2a\x68\x1e\x09\x35\x29\x49\x82\x14\xbf\x15\x89\x32\x80\x7d\x51\xc4\x95\xba\xfb\x65\xc7\xad\x16\xec\x8b\xc6\xd7\xcb\xdc\xb5\x10\x51\xe6\xa0\x48\xcf\xd5\xba\xc4\xeb\xc7\x2c\xcc\x2f\x5c\xdc\x74\x3a\x27\x1e\xd1\xac\x39\x67\xa6\x57\xe6\x67\x17\xc0\x10\x47\x43\x45\x9a\x9c\x54\x39\x44\xe3\x19\xcd\xda\x7b\xf7\xe3\xf1\xd7\xcb\x9c\xdb\x3a\x76\x4e\xf6\x7a\x4f\x8e\xed\x8b\x47\xa4\xb2\x85\xd7\xcf\xdc\x5c\xd9\xbe\xb0\x48\xa5\x13\x1d\x93\xc4\xf8\x45\x96\x6e\x9a\x09\x97\x5a\x4e\xb9\x8e\x0b\x5e\xb2\x49\x98\x14\x75\x83\x53\x11\x8f\x24\x5d\x80\xa2\xc1\x41\xc9\x3b\x1b\xab\x43\xbb\x61\xed\xb9\xcd\x1a\xde\x6c\x90\x62\xd3\xbe\x28\xba\x6b\x5d\x56\xc4\x6b\x08\x88\xfd\x96\x59\x5e\x01\x53\xb2\xa6\x1b\x50\x54\x11\xe4\x67\x06\xd3\x64\x94\x43\xe3\xf6\xb9\x7b\xe8\x60\x52\xd7\x29\x07\x71\x8e\x55\x62\x94\xfb\x23\xbb\x9e\xc0\x98\x98\x31\x14\x55\xfe\x11\x71\xfa\x4d\x73\x55\x3f\x3b\x2f\x9a\x1e\x7b\x6d\x46\xd3\x51\xc2\xf0\x55\x38\x29\x27\x25\xde\x17\xe1\x7a\x9e\x49\x8e\x54\xde\x91\x4a\x47\x50\x3c\xb8\x24\x53\x28\x9c\x86\x82\x08\x27\x44\xda\x1b\x41\x89\xb8\x9f\x1e\x92\xce\x0e\x6d\xcc\xf9\x59\x14\x08\x1a\x13\x85\x47\x71\x20\x43\x4f\x1f\x2c\x57\x14\x00\x10\x5b\x5d\x36\xb3\x40\x81\x9a\xf6\x93\xac\xf2\x5e\xf1\x04\xd4\xb9\x29\x4f\x4a\x1b\xce\x61\xae\x57\xde\x77\x5b\xad\x28\x90\x55\x21\x2e\x48\x50\x1c\x86\x3c\x3e\x18\x46\x25\xb5\x81\x24\x21\xa7\x0b\xd3\x94\x9a\x53\xae\x93\x7c\x9b\x54\xde\xe0\x1d\x3a\x6e\xaf\x1b\x6d\x37\x57\xa6\x97\xa8\x59\x75\x76\x36\xf0\x5f\x7b\xde\xa9\xbc\xe8\xf0\xf9\x29\xe7\x46\x8d\xc5\x7b\x08\xc8\x27\x04\x69\x9c\x30\x22\xb3\x73\x8b\xf3\xe9\x08\x83\x33\x7d\xb8\x47\x6f\x43\x12\x09\xb3\x53\x91\x08\x75\xc4\x87\x26\xe6\xd3\xfc\x50\x0d\xe4\xc9\xe6\x13\x05\x22\x0f\x95\xa0\x68\x52\xe1\xa1\x57\x94\x7e\x1d\x2a\x66\x7f\x69\x92\xf2\x67\xaf\xd2\x34\x52\x85\xc9\x19\x83\x93\xf9\x90\x11\xf4\xde\x14\xdc\x56\x2e\xd4\x2d\x10\xcb\x9a\x77\xe7\x33\xe9\xbe\x98\x54\x14\x17\x64\xe9\x46\xb7\x12\x17\x3a\xf8\xe0\x20\x2c\xa6\xd0\x5d\x02\xb1\x3f\x33\x69\xb3\x9f\x95\xde\xc7\x9b\xe5\xec\x67\x18\xd2\xe8\x5a\xdd\xe9\x7e\x70\x9b\x55\x9c\x7f\x32\xec\x3a\x49\x91\x1a\x8e\xfb\xb8\x8d\x4b\xcf\xa8\x43\xe5\x4f\xd9\xdd\x60\xf3\x25\xaf\xee\x93\x83\xe3\xde\x7a\xd1\xe9\x32\x85\x0b\x09\x18\x47\xe3\x02\x77\x2b\x78\xad\x34\x26\x10\xc4\x32\x4b\x66\x7a\x79\x65\x36\x75\x0f\xc4\x91\xde\xef\x12\x52\x55\x59\xa5\x1a\xd9\xba\x62\x49\x58\x4b\x28\x7e\x29\x9b\xf9\xdd\x4c\xad\x24\xcc\xc5\x3b\x66\x36\x98\x3a\xe4\xf9\x60\xca\xec\x84\xa4\x6d\xe1\xed\xc3\x50\x44\xe0\x42\xbe\x2a\xc6\x29\x8d\x09\xe3\x9a\x05\xf5\xa3\xa6\xa0\x66\xf8\x9d\xa2\x21\x1e\x38\xec\x1e\x5f\x2f\x73\xdf\xb0\xaf\x74\x66\xce\x04\x12\x55\x4c\xdf\xbe\xfc\x3d\x60\xe8\x50\xbb\x4d\x27\xb6\x7e\x6e\x5b\xcf\xdc\xed\x07\xce\x83\xcf\x64\xf7\xb4\xb7\x59\x22\x4f\x8b\x76\xb7\x42\x1a\xaf\x70\xa5\x4e\xb6\x4e\xdc\x6a\xe1\x7f\x11\xb7\xd5\x76\x1a\x5b\xf8\x6a\x1d\x37\xd7\x6c\xeb\x1d\xfb\x8c\x9b\x05\xd2\xda\xfd\x3f\x2d\x73\x67\x36\x75\x6f\x75\x09\xa6\x52\x99\xd5\xf4\x0a\x50\xa0\x0a\x13\x06\x4a\x28\xfa\x0c\xad\x50\x7a\x40\x76\x4f\xfb\x0e\x42\x0f\xae\x25\x15\x45\x56\x75\xcf\x42\x8b\xa4\xdc\x22\x05\xba\xb7\x9c\xf7\x16\x7e\xf9\x28\x0a\xb8\x29\xc4\xdd\x0e\x6d\xba\xc3\x6a\xef\x4d\x21\x90\x54\x60\x92\x13\x90\xbb\x9d\x54\x0c\xc8\x71\x72\x52\xba\xa9\x5d\xe2\xda\xa6\x6d\x75\xdd\x8f\xaf\x71\xa9\x3d\xc6\x34\x41\x6c\x69\x61\x36\x3d\xb2\x87\xfe\x23\x6d\x58\xcf\xd7\xd3\x86\xf6\xf9\x84\xd7\x27\xe0\x73\x9f\x14\x44\xc4\x8c\xa3\x2f\x5f\x66\xcd\x7e\x7e\x4a\x95\x3c\xdb\xb4\xad\x73\xbc\x51\xc4\xf9\x4d\x52\x3c\x0a\xf3\x1f\xba\x38\x2c\x63\xb0\xdc\xd9\xf4\x18\xfa\x1b\xcb\x5d\x45\x9a\x2e\xab\x68\x04\x4e\x72\x47\xb8\x56\xec\xc3\x03\xfd\xaa\xe6\x72\x66\x35\x9b\x32\xaf\xb7\x24\x74\x8c\xef\x90\x0f\x0f\x6d\x64\xb3\x0d\xf4\x3c\xb4\xc7\xde\xbf\xb4\x3b\x8f\x47\x54\xed\x7e\x79\xe1\x56\x0b\xa4\x51\x63\xf2\xf4\x29\x2e\xcc\xcd\x2e\x31\x27\x0d\x6c\x98\x75\x12\xef\x14\x48\xe3\x18\xe7\x4f\xa9\xb0\x7c\x3b\xed\xfc\xe0\xbb\xae\x28\xc7\x05\x69\x34\x22\x30\x5d\xb6\xcd\xbd\x02\x1e\x9a\x17\x34\x7f\x1d\xb2\x07\x9a\xf3\x3a\x47\x1a\x47\xf4\x17\x0b\x71\xf6\xad\xde\xfe\x46\x64\xcc\xfa\x01\xb1\xd4\xfc\x32\xe0\x04\xcd\xbb\x70\xa3\xb7\x90\x32\xed\xbf\x1f\xc8\xd6\x5b\x52\x2a\xd9\x17\x0d\xe7\xf9\x43\xdb\xb2\xf0\x76\x95\x46\xff\xb1\xc8\x65\xd2\xbf\xce\xdf\x05\xd3\x09\x83\x93\xa5\x49\x21\x3e\x78\x80\x30\x3f\x0b\x3d\x40\x06\x98\xd1\xf7\x62\x00\x1d\xf4\x37\xa4\xd9\xef\x77\x19\x00\xf0\x6f\x00\x00\x00\xff\xff\xbd\x53\xee\x8a\xf0\x0a\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2800, mode: os.FileMode(420), modTime: time.Unix(1604909944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
