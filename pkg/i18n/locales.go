// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xcf\x6e\xe3\xbe\x11\xbe\xf3\x29\x18\x19\x7b\x5b\xfc\xd0\xb3\x6f\x5c\x59\x49\xd4\x95\x25\x43\x92\xf3\x6b\x7a\x11\x68\x69\x6c\xb3\x91\x49\x81\xa4\x36\xcd\xde\xfa\x5e\x7d\xa7\xbe\x42\x31\x14\x2d\xc9\x4e\xd2\xf5\xa2\x27\x5b\x00\x67\xe6\xe3\x37\xff\x3e\x2e\x6a\x75\x3a\x29\x49\x52\xb6\x8e\xaa\xe8\x6f\x71\x51\x16\x4b\x1a\xa4\xfc\x04\x94\xb7\x1a\x78\xf3\x46\xe1\x9f\xc2\x58\x13\x90\x78\x53\xa5\x59\x39\x1d\xda\xb4\xc0\x0d\xd0\xbd\x68\x5b\x2a\x24\xb5\x47\xa0\xad\xaa\x79\x4b\xe3\x0d\x55\xc3\xb7\x79\x33\x16\x4e\xd4\x80\xb5\x42\x1e\x68\xc7\x0f\x10\x10\xb2\xa8\xdb\xde\x58\xd0\x24\x4c\xb6\x45\x19\xe5\xd5\x2a\x4a\xa2\x32\xaa\xee\x59\x9c\x44\xab\x25\x0d\x6a\x2e\xa9\x54\x96\x36\xd0\x82\x05\xea\x8f\x63\x90\xba\xd7\x1a\xa4\xa5\xc6\x72\x0b\xc1\xe8\x20\x2e\x1c\xb4\x7c\x9b\xa6\x71\xfa\xb0\xa4\x41\x79\x9c\x99\x19\xe7\x4c\xf7\x52\x0a\x79\x78\x67\x94\x64\x21\x4b\x96\x34\x88\x4f\x9d\xd2\x76\xb4\xaa\xb9\x44\xab\x1d\xd0\xbe\x3b\x68\xde\x40\xe3\x90\x6b\x68\x40\x5a\xc1\x5b\x72\x01\xba\xca\xa3\x22\xdb\xe6\x61\xb4\xa4\xc1\x3d\x17\x2d\x34\xd4\x2a\x8f\xff\x8e\x96\x47\xd0\x80\x38\xb8\xa4\xdc\x18\x55\x0b\x6e\xa1\xa1\x47\x65\x2c\xed\x65\x03\x9a\xda\xa3\x30\xf4\x05\xde\x82\x4f\xdc\x56\x7f\xcf\xd2\xdf\xf2\xfd\x53\x49\xf8\xc0\xf7\x3d\xdb\x26\x65\x15\xe6\xd1\x2a\x4a\xcb\x98\x25\x55\xc8\x52\xc7\xc2\x10\x76\x49\x83\x15\xec\x79\xdf\x5a\x3a\xdd\x74\x46\xc5\x10\xb4\x09\x86\x72\x09\x1f\xa3\xf0\xfb\x94\x35\xc7\xf9\x64\x25\xb1\x86\x26\x53\x57\x0e\xae\xac\x8c\xfb\xdf\x1b\xd0\xee\x4c\x40\x08\x59\x20\x15\xe4\x31\x2b\xca\x8a\x25\x79\xc4\x56\xcf\x53\x99\x3d\x22\x4b\xd7\xb5\xe8\x59\x72\x16\x23\x80\x0f\xc9\x19\x58\x46\x7e\xbc\x8b\x19\x49\xaf\xc2\x1e\x1d\x18\x9f\xf4\x8f\xfc\x56\xdf\x9e\xab\x4d\x9e\xfd\x35\x0a\xcb\xff\x2b\x44\xa7\xd5\x3f\xa0\xb6\x01\x29\x9e\x8b\x32\x5a\x57\xbe\x9b\xee\xb3\x6d\xba\xfa\x45\x33\xed\x85\x36\xf6\x3f\xff\xfe\x57\x40\xd2\x0c\xed\xd8\x13\x8b\x13\xf6\x2d\xc1\x74\xa5\x8a\xc6\x1d\xe5\x3f\xb8\x68\xf9\xae\x85\x80\xc4\xc5\x50\xd1\xee\x0e\xb3\x5e\x12\x43\x79\x0f\x4e\x11\x70\x30\xf0\x1d\xaf\x37\x59\x5e\x56\x51\x9e\x67\x79\x95\x6e\x93\x64\x70\xda\x70\xcb\xf1\x9a\xde\xec\x95\x1b\xba\x57\xbd\x6c\xee\xa8\x47\x5a\x1f\xa1\x7e\x71\x38\xfd\x91\xbd\x68\xe1\xee\xd2\x29\xba\xab\x9e\x58\xb2\x45\xa4\xd1\xa9\xb3\x6f\x83\x5f\x25\x69\x2b\x24\xd0\x2f\xe6\xf2\xfc\x9f\x79\x96\x3e\x54\xf7\x59\xbe\x66\x08\x3d\x96\xb5\xd2\x1a\x6a\x4b\x87\x00\x4a\x9f\xb8\xfd\xd4\x78\x56\xd4\x73\x62\xc3\x59\x45\x2a\x3b\x5c\xe2\x53\x1f\x3e\xe5\xe9\x76\xbd\xa4\x01\xa3\x56\x59\xde\x52\xb5\xa7\x5f\x0c\xd5\xea\xd5\xe0\x5f\x77\x01\xae\x81\xf2\x9d\x44\x40\xed\x57\x6a\x5e\x44\xf7\xa1\x9f\x82\x3d\x5d\x36\xad\xe1\x3f\x7c\xb5\x7c\x31\x5f\xa9\x06\x6e\x94\x5c\x22\x08\x42\x16\xd8\x10\x64\xc3\x8a\xe2\xcf\x2c\x5f\xb9\x2b\xac\x59\x19\x3e\xfa\xc6\xea\xb8\x31\xaf\x4a\x37\x58\x66\xe2\xcc\x4b\x40\xb2\x3c\x7e\x88\x53\x7f\xe5\xf9\x79\xa5\xc5\x41\x48\xde\x7e\x66\xb8\x2d\xa6\x09\xc8\xc2\x32\x76\x40\xcb\x73\x5f\xfa\x91\x09\x12\x6b\x6a\x96\x73\x25\x2d\xaf\xad\xcb\x3a\x6f\x4e\x42\x0a\x63\x35\xb7\x4a\xdf\x79\x87\x73\xe2\x53\x45\x4d\x5f\x1f\x9d\x43\x57\xbc\x6c\xb5\x8e\xd3\xf7\x03\x07\x83\x36\x7e\xe8\x38\xa7\x03\x84\x77\x43\xe7\xee\x12\x74\x1e\x25\xac\x8c\x56\xb3\xde\xdc\xa2\xd9\x91\x23\xf4\x79\x07\xfa\xc6\x73\x10\x92\x15\xdb\x8c\x08\xb6\x9b\x15\x1b\x11\xb4\x0d\xef\xae\x03\x43\x23\x86\xb8\x4f\x51\x1e\xdf\x3f\x57\x61\xb6\x9a\x2d\xa9\x27\xd0\x62\x2f\x6a\x6e\x85\x92\xb4\x56\x0d\x50\xd0\x5a\xe9\x80\x44\x6b\x16\x27\xd5\x2a\x2e\x7c\x8b\xae\xb9\x68\xcf\x2b\xd0\xb8\xd2\x69\x84\xb9\x91\xd8\xb3\xb7\x79\x7a\xa3\x13\x3a\x3c\x71\x5b\x1f\xe9\xde\x95\xd6\x30\x1b\x70\x24\x8f\xf5\x53\xe0\xd7\x88\x15\xa9\xf9\x1f\xf3\xf8\x5c\x23\xd7\x4e\xdc\x50\x58\xd2\xe0\x55\x2b\x79\x98\x26\x36\x55\x7a\x66\x42\x16\x1a\x0e\x42\xc9\xf3\xec\xcc\xa3\x87\x38\x4b\x6f\xdd\x8b\x74\x30\xfe\xd5\xf4\xc4\x75\x86\xa1\xf0\xf7\x1c\x08\x57\xe2\xcd\x61\xdc\x3e\xfc\xd5\x88\x6e\xb9\xbc\x94\x07\xc3\x38\x0c\x07\xd2\x0e\x60\xe7\xcb\xe2\x83\x49\x58\x2b\xb9\x17\x87\x5e\xbb\x9a\x70\x49\x89\xd7\xec\x21\xfa\xdc\x95\x38\xf1\x03\xdc\xe4\x88\x90\x85\xea\x40\x1a\xcb\xeb\x17\xf2\x10\x95\x67\x9a\xcf\x29\x4a\xd5\x99\x49\x37\xe1\x90\x2b\x5f\xf8\x6b\x38\xed\x40\x8f\xbd\xc3\x56\xab\x79\xaf\xec\x00\x24\xe5\x8d\x97\x37\xde\x64\x14\x0a\xbe\xb9\x3e\x57\x09\xde\xe0\x23\x89\x70\xb6\x7d\x64\x45\xe5\x39\xc5\x3d\xe7\x0d\x66\xfc\x8f\x7c\x86\x1f\xb4\x3c\x59\x48\xd5\x00\x49\xb1\xf5\xce\xd2\xc0\xcb\xbc\xaa\x64\xc5\x77\x9c\xd3\x4d\x43\xf1\x10\x96\xa5\x57\x8c\xee\xf3\x9c\x6a\x2f\xfc\xbe\x76\x03\xcb\xaf\x5c\x58\x2a\x2c\x6d\x94\x84\x3f\x30\xc0\x8e\xd7\x2f\x7d\xc7\xea\x5a\xf5\xd2\x92\x0d\xcb\xd9\xba\x8a\xd6\x9b\xf2\xd9\xad\x20\xd3\xef\xf7\xa2\x16\x28\x3a\x3b\xae\xf9\x09\x2c\x68\x83\x9b\xb8\xac\x8a\xed\x06\xa7\x3d\xd2\x29\x4d\xdf\xe1\x92\xc2\xc2\x7b\xeb\x50\x99\x5e\x6a\xa3\x8b\x61\x31\x34\xed\x28\x36\xbe\xb1\xf0\xfb\x76\x53\xb1\x30\xcc\xb6\xe9\xef\xc8\x8e\x0b\xe0\x37\xeb\x0f\xb2\xc0\x3a\xbf\xd2\x99\x37\x44\x43\xab\xdf\x08\xe2\xb3\xfa\xcd\x61\x24\xfe\x8e\xf7\x71\x12\x0d\xe3\xdb\xf7\x83\xaf\x7c\x9f\x36\x3b\x5e\xca\xa9\x09\xba\x83\xbd\xd2\x40\xcd\xab\xb0\xf5\x11\x1f\x10\xb3\x03\x7c\xb8\xf6\x45\xbf\x0e\x51\xde\xcb\xff\x1d\xa0\x31\x1a\x42\x43\xfb\xce\x35\xd4\xcc\x2c\x8f\x8a\x32\xcb\xa3\xf7\x76\x1a\x8c\x55\x5a\xc8\xc3\xd0\x82\xe7\xf6\xc8\xc1\xa8\x5e\xd7\xf0\x9e\xc3\xd9\x35\x7f\x79\xb9\x49\xd5\x7d\x2c\x3a\xa7\x9e\x19\x25\xe6\x99\xfa\x1d\xb4\x0a\x77\x89\x55\x97\x03\xa9\x44\xa5\xaf\x3a\xd0\x7e\x29\x8d\xfd\xd4\x81\x46\xf5\xe4\x3b\x0a\x77\xdd\xb0\x0a\xc7\x85\x3a\x64\xa3\x78\x93\xf5\x51\x2b\x29\x7e\x22\x4f\x06\xf4\xb0\xae\xfe\xe2\x17\x67\x92\x3d\xc4\xe9\xb5\xcd\x76\xae\x17\x50\x9d\xdf\xf9\xd3\xd3\x02\x2c\xa7\x97\x60\xa7\xd5\x51\xec\x84\x35\x14\xcf\xf8\x18\x7b\xad\x4e\xb4\x55\x87\x03\x66\x49\xc8\x3f\x6e\x91\x1b\x64\x51\x0b\x43\xc2\xb8\x70\x53\xe0\x7a\x34\xa0\xee\x15\x86\x5a\x6e\x5e\xae\xc7\x00\x9a\xfe\x38\x85\x6e\xc0\x92\xa7\x75\x15\x66\xe9\x7d\xfc\x30\x3d\x37\xc2\xf9\xe8\x7d\xf7\xee\x98\x0c\xae\xdf\xac\xe5\xf5\xd8\xfe\x2c\x5b\x0d\x74\xad\x7a\x3b\xb9\x81\xd2\x72\x79\x73\xd6\x44\x87\x2f\xf0\x11\x27\xc6\x03\x69\x41\x43\x83\x6f\x04\x03\x07\xe7\x12\x21\xb4\xa2\xb6\x66\x6a\x4a\x87\x1d\xa9\x9d\x8e\x7d\xa5\xdd\xe5\x7b\x83\x1f\xb8\x90\xe3\x13\x7f\xfe\xc0\x88\x37\xa8\x7e\x11\x61\x5d\xf7\x9d\x80\x86\x72\xd9\xcc\x40\x6a\x70\x9e\x70\x7d\x10\xf2\xdf\x00\x00\x00\xff\xff\x04\x53\xff\xb1\x4e\x10\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4174, mode: os.FileMode(420), modTime: time.Unix(1608273886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x5b\x57\xda\xda\x16\x7e\xcf\xaf\x60\xc0\xe8\xdb\x19\x67\x9c\xe7\xbe\xc5\x10\x31\xa7\x21\x61\x24\xc1\x1e\xcf\x4b\x86\x45\x4e\x8f\xbb\x0a\x0e\xd1\xfd\xb0\x9f\x8a\x17\x2e\x96\x88\xbb\x45\xb7\x17\x5a\xc1\x62\x75\x6b\xb9\xa8\xad\x20\xa0\xfe\x99\xac\x95\xe4\xc9\xbf\xb0\xc7\x5a\x2b\x84\x80\x65\xd7\x47\x71\x7e\x73\xce\x35\xe7\x37\xe7\x37\xe3\x8b\xc4\xe7\xe7\xe3\x31\x4a\xa0\x83\xac\xca\xfe\x87\x93\x15\xf9\xb9\xc7\x0b\xb6\x34\xe3\xa4\x01\x9a\x97\xa0\xba\x0b\x8a\xa7\x5e\x8a\x0b\xa9\x82\xa8\xf4\x0d\xcc\x7a\x13\x14\x4f\x8d\xab\x8e\xd1\x39\x34\x6b\x77\xc6\x6d\xcd\x2a\x7f\xb7\x3e\x1e\x81\xf2\x39\x48\xed\x91\xdf\xb9\x90\x97\xa2\x7c\x91\xb9\xe5\xc4\x52\x74\x91\x62\xf8\xb0\xac\xb0\x92\xea\x67\x79\x56\x61\xd5\x71\x9a\xe3\x59\xff\x73\x8f\x17\xfe\x51\x82\x57\xdb\x20\x53\xb2\xf6\x2a\xe0\xf6\x03\xc8\x6a\xc6\xc6\x35\x7c\x9b\x34\xf6\xd7\xac\x83\x94\x71\x57\xf1\x3a\x50\x4e\xc6\x49\x48\x61\x41\xe0\x84\xc0\x73\x8f\x97\x18\xe8\x2d\x0d\x14\x4f\xcd\xfb\x2d\xb3\x9c\xd3\x5b\xd5\x87\x6e\xf2\x11\x84\x17\x19\x9a\x47\xef\xaa\x77\xc1\xfa\x31\x81\xd9\x81\xb5\xb4\xd1\x3e\xc1\x89\x2e\x46\x67\xa2\xb1\xa5\xd9\xe9\x39\x6a\x20\x47\x55\x62\x65\x31\x2c\x31\x2c\xc2\x93\x34\x2b\x17\xe6\xb7\xe3\x87\x6e\xd2\xac\x1f\x1b\x27\xbb\xd6\xfb\x63\xbd\xf5\x0e\x16\xb3\x60\xfd\xca\x4c\x16\xf4\x56\x07\x16\xdb\xde\x11\x4e\xd4\xff\x8a\xc2\x53\x3d\x81\x7c\xdd\x28\x9c\x82\x1c\x76\x36\x4e\x87\x79\x45\x65\x24\xd6\xcf\x0a\x0a\x47\xf3\x2a\x43\x0b\xf8\x6d\x24\x0e\xaa\x46\x67\xd7\xac\x55\x40\xba\x0a\xb5\x9a\xde\xd2\xcc\xd5\x5b\x12\x04\x17\x04\xf7\x97\x99\x60\x99\x17\xfd\xd2\x93\x88\xa4\xd7\x04\xa0\xb7\x36\x8d\xc2\x29\xcc\x34\xd1\x8f\x07\x2d\xb0\x95\x43\x95\xf9\x7f\x3c\xb1\x44\x4d\x88\xb2\xa2\xd2\xbc\xc4\xd2\xfe\xa9\x3e\x0f\xc8\x63\x5d\x44\xb1\x5f\x8d\xad\x9d\x40\x8f\x1f\xeb\xe0\x8c\x4e\x9e\x3c\xb6\xd7\xec\xc7\x0e\xd4\xb1\x29\x35\x24\x89\xff\x66\x19\xe5\xa9\xbe\xca\x37\xc6\x41\x0d\xbf\x5b\x9e\x92\x15\x36\xa8\xda\xfc\x1d\x17\xc3\x82\xdf\xa6\xef\x7a\x86\x90\x15\x16\xbf\xc2\x62\x9b\x0b\x91\x32\x89\xc8\x94\x9e\xa4\x39\x9e\x1e\xe3\x51\x55\xb9\x90\xc7\xfc\xbe\x06\xdb\x5b\xa8\x42\xd7\x57\x5e\x8a\x93\x09\x9d\x70\x8a\x7d\x02\x63\x66\x11\x5f\x5e\x52\x2c\x2e\x18\x12\x25\x45\x65\x25\x49\x94\x54\x21\xcc\x23\x02\xc2\xe2\x19\xcc\xde\x81\x4c\x03\xe4\xeb\x04\x62\xec\xaf\xc1\xed\x06\xd4\x6a\xf8\x31\x4d\xf8\xf9\x2d\x3c\x3c\xb6\xbd\xed\xa4\xf5\xce\x35\xce\xcb\xed\x10\xb9\x52\x27\x69\x3e\x8c\xd2\x7b\x96\xf0\x98\xe5\x1c\x2c\x66\x8d\x3f\xdb\xc4\xcf\xa0\xf1\x4b\x49\x14\x02\xea\xb8\x28\x05\x69\xc5\x31\x37\xce\xeb\x20\xff\x19\x96\xba\xa0\x9b\xd7\x5b\x1a\xac\x7e\x36\xca\x43\x38\x17\xd1\xdc\x85\xb3\xc3\x65\xef\xd0\xd0\x65\x1a\xa0\x9e\xb2\xde\x1f\x0f\x22\xed\xa6\x09\xe1\x20\xea\xd6\xfa\x85\xc7\xc6\xe0\xe4\x48\x34\xd0\x6a\x3d\x74\x73\x66\xf3\xca\xbc\x4f\xff\x10\x2c\xd3\x93\xac\xc3\x2e\xe4\x40\xbf\xff\x88\x18\x66\x77\x3d\x07\x36\x0f\xc1\x41\xe9\xa1\xbb\xff\x2c\xe1\xa5\x28\xca\xb7\x9c\x88\x2e\x52\x21\x5a\x96\x5f\x8a\x92\x1f\x27\x1c\xa4\x15\x66\x02\x4f\x7c\xca\x28\x25\xad\xc2\x9e\x59\xaf\x7b\x29\x51\xe2\x02\x9c\x60\xbf\xc9\x31\xd9\x3c\x1c\xb4\x0a\xcb\xfd\xcd\x41\x33\x0a\x87\x73\x21\x73\x01\x8b\x67\x60\x0b\x4d\x25\xe9\x96\x99\x2c\xa0\x5d\x57\x2b\x1b\x5b\x29\xf0\xfb\x2e\x6e\x15\x46\xbb\x6b\x86\x08\x52\xad\x10\x3c\xb6\xa0\xfd\x41\x4e\x18\x35\xbf\x9e\xe9\x99\xf9\xd9\x98\x87\x98\x93\xa9\x34\x8f\xce\x5d\x93\xec\xce\x4e\x62\x79\x5a\x61\xfd\xae\xf1\xb0\xd3\xbc\x2c\x3b\x5b\x84\x0c\x83\x97\xe2\xfd\x74\xc8\x09\x1a\x0e\xf9\x69\x1c\x14\xfd\x3a\x10\x4c\xbf\xaf\xc1\xc2\x0d\x8e\x34\xc9\x4a\xdc\xf8\x94\xca\x88\x7e\xd7\xbe\xb6\xce\x72\x66\x3d\xe9\xaa\x16\x1b\xa4\x39\x5e\xf5\x73\xb2\x3d\x30\xd6\x4a\x4d\xef\x5c\x13\x51\x30\x8f\xce\x8d\x2f\xc9\x51\xe5\xea\x61\xdd\xcd\x20\x68\x90\xbb\xb1\xd6\x35\x67\xc8\xed\xf5\xe5\x34\x58\x46\x7f\xf5\xd7\x58\x6f\x63\x39\x3b\x8c\xb4\xb3\xb7\xc0\x06\xb1\x78\x1c\xdd\x28\x98\xd9\x19\x6c\x3f\x45\xf9\x16\xa3\xaf\x67\xe3\xb1\xde\x2e\x92\xd8\x00\x27\x0a\x4f\x92\x03\x90\x6b\x83\xc3\x43\xf7\x2e\x72\x2d\x71\xca\xf7\x5b\x3c\x16\xed\x79\x45\x42\xf0\x34\x9f\x3d\x0f\x03\x2b\x6e\xf5\xd4\xb8\xbd\x34\x6b\x65\x90\x79\x3f\x28\x77\x64\xd1\x98\x9b\x4d\x90\xdf\x21\x53\x4a\x56\xab\x7b\xbf\x58\xeb\x9a\x71\x4b\x16\x24\x17\xa4\x03\xec\x28\xe0\x76\x11\xac\xe6\x47\x00\x29\x5f\x7c\x21\x1a\x4b\x2c\x4d\x47\xde\x50\x01\x56\xe9\x55\xa9\x57\xdf\xfe\x8e\xc0\x25\x41\xf6\x0b\x8b\xf1\x5f\xa2\x91\xa5\x60\x74\xfe\x55\x74\xd1\xe1\x31\xed\x77\x35\x11\xbf\x10\x36\x3b\x60\xa3\xe4\x42\x38\xf2\x67\xf3\x7c\xd4\xec\x10\xaa\x3f\xd2\xbe\x1e\x6a\x82\x96\x55\xbb\x52\x08\x82\x8d\xdd\xe2\xf3\xd0\x4d\x3e\xc2\x52\xbe\x58\x7c\x26\x4a\x09\x68\x06\x7a\xea\x67\x1f\x20\xaa\x42\xcb\x2f\xf0\x8e\xbb\xd6\x3b\x3b\xe6\xc6\x8a\xb1\x72\x03\xb7\x1b\x56\x3a\x0f\x3f\x68\xfa\x6d\x11\x2d\xba\xe2\x29\xcc\x9e\x98\xe5\xdc\x3f\x3c\x66\xbd\x69\x54\xb3\xe0\x6e\x1d\xd4\x56\xf5\xce\x57\xf2\x33\xa8\xe5\x60\x7d\xfb\x9f\x28\xcc\xab\xe9\xc8\x9b\xe5\x05\x3a\x12\x89\x2f\xc7\x96\xa8\x10\x2d\xd1\x41\x95\x0d\x86\x94\x29\x14\x21\xbf\x02\xb7\x1b\x3d\x01\x42\x0f\x97\xc3\x21\xb4\x2f\xf1\x8e\xd4\x60\xa1\x0e\x73\xe8\x60\x32\x2e\x3a\xe0\xd3\x3b\x2f\x35\xa4\xf3\xb0\x54\xb6\xce\x72\xae\x69\xb2\x19\x38\x46\x33\x2f\xc2\x21\x95\x66\x18\x31\x2c\x3c\x55\x6d\x41\x25\xad\x77\x6e\xcd\x6f\x5f\x40\xbe\x39\x42\x73\x29\xdf\xc2\xdc\x74\x6c\xe8\x00\xfa\x89\x5b\x37\x9f\x1f\xbb\x75\x1d\x92\x63\xb8\x4e\x94\x9d\xfb\x38\xc7\xb3\x64\x15\xf6\xe8\x4b\x94\xdd\xf6\x8f\x52\x25\x2a\x0a\x52\x1a\xc8\xa4\xa1\x76\xe4\xce\x7f\x60\x70\x88\x47\xe7\xaa\x24\xdd\x23\xd6\x3f\xb8\x2a\x25\x56\x56\x44\x89\x1d\x32\x87\xc9\x23\x50\xd1\x7a\xe6\x0e\x7f\xa5\x68\x22\xbe\xbc\x18\x89\x3e\x2e\x89\xeb\x19\x7f\x93\xbc\xbb\x69\x43\x87\x51\x9f\xcf\x03\x67\xd0\xc5\x27\xbd\xbd\x39\xc4\x6a\xf3\xfe\x00\xe9\x70\xb5\x42\xe8\x69\xa7\x38\x37\x33\xbd\x40\xb4\xc1\x11\x16\x52\x49\xb0\x95\x83\xd5\x63\x90\x69\x20\x62\xd9\x02\xd1\xfe\x97\xad\x23\xbc\x18\xe0\x84\x61\x84\x23\x23\xe4\x18\xc4\x01\xb0\x75\x5f\x1c\xc8\x97\x81\xf1\x25\x09\xab\x47\xe8\x5f\x04\x62\xec\x75\xac\xbd\x94\x67\x84\xa0\x52\xbe\xc8\x6c\x82\x62\x38\x19\x0f\xdc\xf0\x14\xa2\x4c\x7b\xe7\x27\xcc\x9e\xc3\x7c\x5e\x6f\x55\x8d\xfd\x35\xbd\xd3\x01\x1b\x65\x84\xfe\x75\x9e\x89\xc7\xfe\x37\xfb\x9a\x9a\x0c\xaa\x8c\x28\x8c\x73\x81\xfe\xfd\x4a\xf6\x99\xeb\x7e\xed\xdb\x0c\x7f\xa8\x38\xa6\xfd\xfa\xba\x38\xfb\x93\x2a\xcf\x2e\xa0\x4f\xa8\xfe\xf7\x15\xf9\x4c\xda\x5f\xe3\x42\xb0\xf6\x1d\x29\x56\xf3\x12\x16\xb3\xf8\x2f\x90\xba\x34\xce\x92\xe8\x3e\xaa\x37\xad\xb4\x06\x77\x1a\xc4\xda\xf9\x08\x1b\xba\x4e\xd1\x79\x75\x74\x0e\xb4\x12\x96\xd9\x9c\x73\x32\x58\xe9\x0d\x58\xb8\x43\x72\x46\x51\x7f\x05\x00\x00\xff\xff\x0c\xe7\x4b\xa4\xe6\x0d\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3558, mode: os.FileMode(420), modTime: time.Unix(1608273886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
