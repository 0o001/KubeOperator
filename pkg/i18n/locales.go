// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xc1\x72\xab\x36\x14\xdd\xeb\x2b\x14\xb2\xed\xbc\xe9\xda\x3b\x05\x64\x87\x3e\x0c\x1e\xc0\x69\xd3\x0d\x23\xc3\xb5\xad\x06\x4b\x8c\x24\x5e\x9a\xb7\xeb\x7f\xf5\x9f\xfa\x0b\x1d\x09\x19\x63\x3b\x69\xfc\xa6\xab\x84\x89\x8e\xee\xd5\xb9\xe7\x9e\x7b\x73\x5f\xcb\xc3\x41\x0a\x94\x92\x25\xad\xe8\x6f\x71\x51\x16\x33\x1c\xa4\xec\x00\x98\xb5\x0a\x58\xf3\x86\xe1\x4f\xae\x8d\x0e\x50\xbc\xaa\xd2\xac\x3c\x1d\x5a\xb5\xc0\x34\xe0\x2d\x6f\x5b\xcc\x05\x36\x7b\xc0\xad\xac\x59\x8b\xe3\x15\x96\xc3\xb7\x7e\xd3\x06\x0e\x58\x83\x31\x5c\xec\x70\xc7\x76\x10\x20\x74\x5f\xb7\xbd\x36\xa0\x50\x98\xac\x8b\x92\xe6\x55\x44\x13\x5a\xd2\x6a\x4e\xe2\x84\x46\x33\x1c\xd4\x4c\x60\x21\x0d\x6e\xa0\x05\x03\xd8\x1f\xb7\x41\xea\x5e\x29\x10\x06\x6b\xc3\x0c\x04\xe3\x05\x71\xe1\x52\xcb\xd7\x69\x1a\xa7\x8b\x19\x0e\xca\xfd\x04\xa6\xdd\x65\xaa\x17\x82\x8b\xdd\x15\x28\xc9\x42\x92\xcc\x70\x10\x1f\x3a\xa9\xcc\x88\xaa\x99\xb0\xa8\x0d\xe0\xbe\xdb\x29\xd6\x40\xe3\x32\x57\xd0\x80\x30\x9c\xb5\xe8\x2c\xe9\x2a\xa7\x45\xb6\xce\x43\x3a\xc3\xc1\x9c\xf1\x16\x1a\x6c\xa4\xcf\xff\x0e\x97\x7b\x50\x60\xf3\x60\x02\x33\xad\x65\xcd\x99\x81\x06\xef\xa5\x36\xb8\x17\x0d\x28\x6c\xf6\x5c\xe3\x17\x78\x0b\x3e\xb8\xb6\xfa\x3d\x4b\x7f\xe8\xee\xef\x52\xc0\x3b\x77\xcf\xc9\x3a\x29\xab\x30\xa7\x11\x4d\xcb\x98\x24\x55\x48\x52\xc7\xc2\x10\x76\x86\x83\x08\xb6\xac\x6f\x0d\x3e\xbd\x74\x42\xc5\x10\xb4\x09\x06\xb9\x84\x8f\x34\xfc\x7a\xaa\x9a\xe3\xfc\x84\x12\x56\x43\x27\xa8\x93\x83\x93\x95\x76\xbf\xf7\x1a\x94\x3b\x13\x20\x84\xee\x2d\x15\xe8\x31\x2b\xca\x8a\x24\x39\x25\xd1\xf3\x49\x66\x8f\x96\xa5\x4b\x2d\x7a\x96\x1c\x62\x4c\xe0\x5d\x72\x06\x96\x2d\x3f\xfe\x8a\x09\x49\xaf\xdc\xec\x5d\x32\xbe\xe8\xef\xdd\x5b\x3d\x3c\x57\xab\x3c\xfb\x85\x86\xe5\xff\x0a\xd1\x29\xf9\x07\xd4\x26\x40\xc5\x73\x51\xd2\x65\xe5\xbb\x69\x9e\xad\xd3\xe8\x93\x66\xda\x72\xa5\xcd\x3f\x7f\xff\x15\xa0\x34\xb3\x38\xf2\x44\xe2\x84\x3c\x24\xb6\x5c\xa9\xc4\x71\x87\xd9\x37\xc6\x5b\xb6\x69\x21\x40\x71\x31\x28\xda\xbd\x61\xd2\x4b\x7c\x90\xf7\x70\xa9\x4d\xd8\xca\xd9\x16\x01\xad\x48\x51\xfc\x9a\xe5\x91\xcb\x67\x49\xca\xf0\xd1\x17\xb3\x63\x5a\xbf\x4a\xd5\xd8\xa7\x71\x51\x4b\xa5\xdc\x03\xb2\x3c\x5e\xc4\x29\x49\xae\xce\x4b\xc5\x77\x5c\xb0\xf6\x23\xe0\xba\x38\x75\x1d\x09\xcb\xf8\x89\x7a\xa0\xd3\x82\x6f\x53\x10\xf6\x1d\xcd\x1d\xf6\x8c\xd4\x52\x18\x56\x1b\xc7\x08\x6b\x0e\x5c\x70\x6d\x14\x33\x52\xdd\xf9\x0b\xa7\x2c\xa6\x12\xeb\xbe\xde\xbb\x0b\x1d\x61\x24\x5a\xc6\xe9\xb5\xc8\x6d\xd0\xc6\x0b\xdd\x5d\x3a\xa4\x70\x25\xf4\xbb\xf3\xa4\x73\x9a\x90\x92\x46\x13\x3d\xac\x2d\x6c\xcf\x6c\xea\xd3\xaa\xfb\x62\xbb\x14\x92\x88\xac\xc6\x0c\xd6\xab\x88\x8c\x19\xb4\x0d\xeb\x2e\x03\x43\xc3\x87\xb8\x4f\x34\x8f\xe7\xcf\x55\x98\x45\x13\x63\x7c\x02\xc5\xb7\xbc\x66\x86\x4b\x81\x6b\xd9\x00\x06\xa5\xa4\xf2\xfd\x38\x16\xb2\xb0\x5f\x23\xc8\xe6\xf8\x1f\xcd\x78\x2c\x96\xd5\x83\x82\x1d\x97\xe2\xd8\x05\x39\x5d\xc4\x59\x7a\xab\xc3\xe1\x01\xfc\x59\x1f\x58\x63\xb2\xa1\xec\xcf\x63\x20\x6b\x6e\x37\x87\x71\xce\xf6\x59\xb3\xb5\x4c\x9c\x1b\xfd\x3a\xb1\x1e\x1f\x0e\x0c\xec\xc0\x4c\xdb\xfe\xa4\xb5\x3d\xd4\x2f\xc3\x5f\xa4\xd8\xf2\x5d\xaf\x1c\xd3\xae\x8c\xf1\x92\x2c\xe8\xc7\x57\xf1\x03\xdb\xc1\x4d\x17\x21\x74\x2f\x3b\x10\xda\xb0\xfa\x05\x2d\x68\x79\xa4\x99\xe6\x79\x96\x0f\x1a\xf6\x4c\x6e\x65\x2f\x5c\x59\xbc\x9c\x96\x70\xd8\x80\x1a\x15\x49\xa2\x68\xaa\xc0\x0d\x80\xc0\xac\xf1\x83\xca\x43\x46\xcb\xf7\x92\xfd\xd8\xef\x3d\xe0\x3d\xb3\x3f\x62\x1f\x49\x51\x79\x4e\xad\x63\x79\xc0\x84\xff\x91\xcf\xf0\x9d\x46\x42\xf7\x42\x36\x80\x52\x2b\xe8\xa3\xc9\xfb\x81\x5d\x95\xa4\xf8\x3a\xc3\x01\x69\x1a\x6c\x0f\x61\xa9\x8e\xb3\xdf\x7d\x1e\x4b\xed\x47\xf8\x4f\xdd\xc0\xf2\x2b\xe3\x06\x73\x83\x1b\x29\xe0\x8b\x0d\xb0\x61\xf5\x4b\xdf\x91\xba\x96\xbd\x30\x68\x45\x72\xb2\xac\xe8\x72\x55\x3e\xdb\xf1\x2e\x74\xbf\xdd\xf2\x9a\xdb\xf5\xa1\x63\x8a\x1d\xc0\x80\xd2\xd6\x53\xcb\xaa\x58\xaf\x56\x59\xee\x1a\x5a\xe8\xbe\xb3\x4e\x69\x85\xf7\xd6\xd9\x1d\xe3\x7c\xca\x9d\xb5\xe0\xd6\x29\x74\x1c\x1b\x0f\x24\xfc\xba\x5e\x55\x24\x0c\xb3\x75\xfa\x23\x03\xe4\x2c\xf1\x9b\x27\x09\xba\xb7\x3a\xbf\xd8\x18\x6e\x88\x66\x51\x3f\x10\xc4\x57\xf5\xc1\xe5\x88\xfc\x1b\xe7\x71\x42\x07\x53\xf4\xfd\xe0\x95\xef\xcb\x66\xc6\x47\xd9\x91\x06\x78\x03\x5b\xa9\x00\xeb\x57\x6e\xea\xbd\x5d\x05\x27\x07\xd8\xf0\xec\xb3\x7e\x1d\xa2\x5c\x2f\x72\x1b\xb0\x60\x0b\x84\x06\xf7\x9d\x6b\xa8\x09\x2c\xa7\x45\x99\xe5\xf4\x1a\xa7\x40\x1b\xa9\xb8\xd8\x0d\x2d\x78\x6c\x8f\x1c\xb4\xec\x55\x0d\xd7\x1c\x4e\x9e\xf9\xe9\xe3\x4e\xf3\xf9\xfd\xf5\xe1\xd4\x33\xe3\xb2\x70\xa4\x7e\x03\xad\x14\x3b\x6d\x2b\x74\x66\x48\xa5\xdd\xd9\x64\x07\xca\x5b\xfd\xd8\x4f\x1d\xa8\xad\x54\x07\xdf\x51\x76\x82\x0c\x03\x66\x1c\x53\x43\x35\x8a\x37\x51\xef\x95\x14\xfc\xbb\xe5\x49\x83\xd2\x98\x29\xc0\x3f\xfb\x71\x94\x64\x8b\x38\xbd\xc4\xac\xa7\x53\xd8\xee\x59\x77\xfe\x74\x14\x17\x7e\xdb\x28\x4f\x3b\x7d\xa7\xe4\x9e\x6f\xb8\xd1\xd8\x9e\xf1\x31\xb6\x4a\x1e\x70\x2b\x77\x3b\x5b\x25\x2e\xbe\xdc\x32\xc4\xd1\x7d\xcd\x35\x0a\xe3\xc2\xb9\xc0\xa5\x35\xd8\x0d\x86\x6b\x6c\x98\x7e\xb9\xb4\x01\x0b\xfd\x76\x08\x9d\xc1\xa2\xa7\x65\x15\x66\xe9\x3c\x5e\x9c\x16\xc7\x70\x6a\xbd\x57\x1b\xe4\x09\x70\xf9\xdf\x47\x79\x69\xdb\x1f\x55\xab\x81\xae\x95\x6f\x07\x67\x28\x2d\x13\xb7\x56\x0d\xa1\x7f\x03\x00\x00\xff\xff\x2d\xbc\x21\xa9\x75\x0d\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 3445, mode: os.FileMode(420), modTime: time.Unix(1605686028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\xdf\x56\xda\x48\x1c\xc7\xef\xe7\x29\x38\x70\xbb\x67\xcf\x5e\xf7\x6e\x0c\x11\xb3\x0d\x09\x27\x09\xee\xba\x37\x39\x16\xb3\x5d\xb7\x0a\x1e\xd4\xbd\xd8\xab\x52\xab\xa2\x05\x61\x5b\xec\x6a\x65\xab\x58\xac\x9c\xb6\x80\xad\xad\x50\x22\xf6\x65\x32\x93\x70\xd5\x57\xd8\x33\x33\x21\x04\x58\xba\x5e\x12\x7e\xff\x7f\x9f\xf9\xce\x84\x12\xa9\xe5\xe5\x54\x12\x48\x30\xca\xeb\xfc\xcf\x82\xaa\xa9\x77\x02\x41\x54\xcc\xdb\xe7\x17\xa8\xf5\x01\xd5\x0f\x50\xb9\x16\x04\x42\x4c\x97\x64\x6d\x60\xe0\x34\x5b\xa8\x5c\xb3\x2f\x4d\xdb\x3c\x76\x1a\x37\x76\xb7\xd1\xab\x7c\xea\xfd\x73\x8a\x2a\x6f\xd1\xd6\x21\xfb\x2e\xc4\x82\x00\x84\x12\x4b\xeb\xab\x6b\x46\x1a\x70\x62\x5c\xd5\x78\x45\x0f\xf3\x22\xaf\xf1\xfa\x34\x14\x44\x3e\x7c\x27\x10\xc4\x7f\x9f\xe0\xcb\x7d\x94\x3d\xe9\x1d\x56\x51\xf7\x19\xda\xc9\xdb\xbb\x57\xf8\x61\xc6\x7e\xf1\xb8\x77\xb4\x65\xdf\x54\x83\x9e\xab\xa0\xd2\x22\x94\xb8\x24\x09\x52\xe4\x4e\x20\xc8\x0c\xac\x76\x1e\x95\x6b\xce\x97\xa2\x53\xc9\x59\xed\xfa\xd7\xeb\xcc\x98\x8b\x28\x73\x50\x24\x7d\x35\xaf\xd1\xe6\x19\x73\x73\x13\xe7\xb7\xed\xce\x39\x2d\x34\x6d\x2c\x18\xc9\xb5\xc5\xf9\x25\x30\x54\xa3\xae\xf0\xaa\x1c\x57\x38\x9e\xf8\xb3\x32\xab\xef\x9d\x8f\x67\x5f\xaf\x33\x4e\xf3\xcc\x3e\x3f\xe8\x3d\x3d\xb3\xda\x4f\x70\x79\x07\x6d\x5e\x3a\x99\x92\xd5\x36\x71\xb9\x13\x9c\x10\x44\xff\x45\x96\x6e\x1b\x09\x15\x9a\x76\xa9\x86\x72\x34\xd8\x34\x8c\x8b\x9a\xce\x29\x7c\x98\x97\x34\x01\x8a\x3a\x07\x25\xda\x1b\xcb\x43\xa6\x61\x1e\x38\x8d\x2a\xda\xae\xe3\x7c\xc3\x6a\xe7\x9d\x8d\x2e\x4b\x42\x07\x42\xf7\xcb\xcd\xf0\xdc\xdd\xc1\xe8\x59\x46\xb6\x6b\xe6\x60\xb5\xf7\xec\x52\x0d\x67\x5b\xe4\xe3\x51\x1b\x15\x73\x64\x32\xbf\xa5\x56\xd7\xc0\x8c\xac\x6a\x3a\x14\x15\x1e\x86\xe7\x06\x1c\xb0\x66\x7d\xa0\xb8\x5d\x53\x6b\x2f\xd1\x78\xb3\x9e\x9f\x6d\x16\x58\xb3\xfd\x65\x8f\x07\xd0\xa7\xe6\xf4\x98\x22\xff\xc8\x73\xda\x6d\x63\x55\x3e\xdb\x47\x0d\xda\xb7\x3a\xa7\x6a\x7c\x54\x77\xf9\x9d\x96\xe3\x52\xd8\xc5\x77\x33\xcb\x60\xc5\xe5\x77\xb8\xdc\x11\x62\x6c\x4c\x32\x31\x85\xb3\x50\x10\xe1\x94\x48\xa6\x2a\xc4\x02\xce\xa7\xc7\xb8\x53\x24\x13\xba\xba\x0c\x02\x41\x65\x38\xd1\x12\x07\x00\x53\xb2\x58\xac\x20\x00\x20\xb4\xbe\x6a\xa4\x41\x0c\xaa\xea\x4f\xb2\x12\xa6\xc9\xa3\x50\xe3\x66\x28\x84\x5b\xf6\x49\xa6\x57\x3a\x74\x9a\xcd\x20\x90\x15\x21\x22\x48\x50\x1c\x36\xd9\x3b\x1e\xb6\x8a\xab\x03\x98\x21\xa7\x09\xb3\xa4\x34\xb6\x2a\x5c\x7e\x83\x8a\x04\x14\x3a\x8d\x96\x93\x29\x91\xe3\xd7\xa8\xd8\xc5\x2d\xf4\xd7\x01\xed\x8a\x7a\xfb\xfb\x27\x35\xd7\xab\xcc\x9f\x5a\xc0\x70\x54\x90\x26\x21\x15\x98\x5f\x58\x5e\x4c\x06\x98\x39\x03\xc5\x39\x7d\xeb\x83\xcb\x5f\x9d\xc2\x8b\x50\xe3\xc3\xbe\x8d\xb9\x65\x7e\xa8\x78\x60\xb3\xfd\x04\x81\x18\x86\x31\x2f\x69\x3c\x16\x86\x34\x29\xf9\x3a\x94\xcc\xfa\xd2\xc0\xa5\xcf\x34\xd3\x2c\xaf\x08\xd3\x73\x3a\x27\x87\x7d\x12\xd2\x7b\x93\x73\x9a\x19\xdf\xb4\x28\xec\xde\xec\x55\xf2\x6b\x00\x7d\x9f\x6f\x8f\x78\x36\xe9\x01\xee\x69\xe3\xfe\x62\x2a\xd9\x07\x51\xe1\x23\x82\x2c\xdd\x4a\x0b\x50\xae\x83\x8e\x8f\xfd\x20\xfa\x4e\x30\x08\xfd\x99\x4a\x1a\xfd\xa8\x44\x05\x6e\x17\xb3\x1f\x61\x88\xef\x8d\x9a\xdd\xfd\xe0\x34\x2a\x28\xfb\x74\x58\xeb\xe2\x22\x91\x39\x67\xaf\x85\x0a\xcf\x89\x2e\x66\x2f\xd8\xb9\x62\x6c\xe0\x57\x0f\xf1\xf1\x59\x6f\x33\x6f\x77\xd9\xe9\x10\xa2\x30\xc2\x4f\x72\xdc\x2f\xa3\x8d\xc2\x04\x47\x10\x4a\xad\x18\xc9\xd5\xb5\xf9\xc4\x03\x10\xe1\xb5\xfe\x94\x78\x45\x91\x15\xc2\xd7\xce\x0d\x0b\xc2\x46\x42\xec\x57\xd2\xa9\xdf\x8d\xc4\x5a\xd4\x58\xbe\x67\xa4\x3d\x62\x60\xd8\xb7\x13\xda\x21\x6e\x99\x68\xf7\xc4\xe7\xe1\x69\x9f\x4b\xd4\x24\x4a\x19\x54\x63\xc2\xd7\xf7\x9a\x81\xaa\xee\x4e\x8a\xb8\x50\x63\xbf\xf2\x7c\xbd\xce\x8c\xf9\x82\x50\x32\xb5\x60\x00\x89\xd0\xd6\x97\x3e\xf7\xf6\xd1\x35\xa8\xde\x25\x1b\xdb\xbc\xb2\xcc\xe7\xce\xee\x23\xfb\xd1\x67\xbc\x7f\xd1\xdb\x2e\xe0\x67\x79\xab\x5b\xc6\xf5\x57\xa8\x5c\xc3\x3b\xe7\x4e\x25\xf7\x5d\xc0\x69\xb6\xec\xfa\x0e\xba\xd9\x44\x8d\x0d\xcb\x7c\xc7\x3e\xa3\x46\x0e\x37\xf7\xbf\x27\x69\xee\xcd\x27\x1e\xac\xaf\xc0\x44\x22\xb5\x9e\x5c\x03\x31\xa8\xc0\xa8\xce\x47\x63\xda\x1c\xc9\x50\x78\x84\xf7\x2f\xfa\xea\x43\x1a\x57\xe3\xb1\x98\xac\x68\x54\x7e\xf3\xb8\xd4\xc4\x39\x72\x5b\xda\xef\x4d\xf4\xf2\x49\x10\x8c\x88\x3c\x3e\xa9\xf4\xde\xe4\x3c\xa4\x3c\x81\x9d\x82\xdc\xdd\x78\x4c\x87\x1c\x27\xc7\xa5\xdb\x4a\x2d\xaa\x6e\x5b\x66\xd7\xf9\xf8\x1a\x15\x5a\x13\x04\x17\x84\x56\x96\xe6\x93\x23\xb7\xdf\xff\x84\xf5\xf3\x3c\x1e\xd6\xf7\x8a\x98\xa2\x73\x02\x6e\xed\xd3\x82\xc8\x33\xd1\xe9\xe3\xcb\x64\xdd\x8d\x4f\x4a\xc5\xcf\xb7\x2d\xf3\x0a\x6d\xe5\x51\x76\x1b\xe7\x4f\xfd\xf5\x0f\x1d\x1c\x16\xd1\x7b\x52\xb0\xed\x31\xeb\xff\x78\x52\x28\xbc\xaa\xc9\x0a\x3f\x62\x8e\x33\xa7\xa8\x9a\xef\x9b\x7b\xfc\x2a\xc6\x6a\x6a\x3d\x9d\x30\xc6\x47\xe2\x6b\xe3\x1b\xc5\xfb\x97\x36\x72\x2b\x0e\x78\x1e\xba\x03\xdf\xbf\xb4\x3a\x7b\x23\x54\x3b\x5f\x8e\x9c\x4a\x0e\xd7\xab\x0c\x4f\xb7\xc4\xa5\x85\xf9\x15\xa6\xc2\x9e\x84\xb3\x49\xa2\x62\x0e\xd7\xcf\x50\xf6\x82\x80\xe5\x4a\x71\xe7\x07\x57\xb1\x45\x39\x22\x48\xa3\x1e\x9e\x60\xb3\x97\x00\x4d\x40\xad\xc3\x82\xea\x5e\xa5\xec\x59\x68\xbf\xce\xe0\xfa\x29\xf9\x8b\xb9\xd8\x87\x66\xef\x70\x2b\x30\xe1\xea\x02\xa1\xc4\xe2\x2a\xe0\x04\x95\x1e\xb8\xd1\x53\x48\x2a\xed\xbf\x3d\xf0\xce\x5b\x5c\x28\x58\xed\xba\xfd\xe2\xb1\x65\x9a\x68\xb7\x42\xbc\xff\x58\xe6\x52\xc9\x5f\x17\xef\x83\xd9\xa8\xce\xc9\xd2\xb4\x10\x19\x3c\x5e\x98\x9e\xf9\x1e\x2f\x03\x9b\xd1\x57\xaa\x67\x3a\x98\xaf\x8f\xd9\x6f\x4f\x19\x00\xf0\x6f\x00\x00\x00\xff\xff\x05\x46\x19\xbe\x66\x0b\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2918, mode: os.FileMode(420), modTime: time.Unix(1605685992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
