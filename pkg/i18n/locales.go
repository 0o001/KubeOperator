// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcb\x72\xe3\xba\x11\xdd\xf3\x2b\x60\xba\x66\x37\xb9\x95\xb5\x76\x1c\x8a\xb6\x99\xa1\x48\x16\x49\xf9\xc6\xd9\xb0\x20\xb2\x25\x21\xa6\x00\x16\x00\x8e\xa3\xbb\xcb\x7f\xe5\x9f\xf2\x0b\xa9\x06\x20\x92\x7a\x38\xa3\xa9\xbb\xb2\xe4\x42\x77\x1f\xf4\xe3\xf4\x81\x1e\x1b\x71\x38\x08\xee\xa5\xc1\x2a\xaa\xa3\xbf\xc7\x65\x55\x2e\x88\x9f\xd2\x03\x10\xda\x49\xa0\xed\x91\xc0\xbf\x98\xd2\xca\xf7\xe2\xbc\x4e\xb3\x6a\x3a\x94\x77\x40\x15\x90\x2d\xeb\x3a\xc2\x38\xd1\x7b\x20\x12\x76\x4c\x69\x79\x24\x71\x4e\x84\xfd\x97\x3a\x2a\x0d\x07\xa2\x40\x6b\xc6\x77\xa4\xa7\x3b\xf0\x3d\xef\xb1\xe9\x06\xa5\x41\x7a\x61\xb2\x2e\xab\xa8\xa8\x97\x51\x12\x55\x51\xfd\x14\xc4\x49\xb4\x5c\x10\xbf\xa1\x9c\x70\xa1\x49\x0b\x1d\x68\x20\xee\x38\xc6\x69\x06\x29\x81\x6b\xa2\x34\xd5\xe0\x8f\x0e\xe2\xd2\xa0\x2b\xd6\x69\x1a\xa7\xcf\x0b\xe2\x57\xfb\x99\x99\x32\xce\xe4\xc0\x39\xe3\xbb\x2b\xa3\x24\x0b\x83\x64\x41\xfc\xf8\xd0\x0b\xa9\x47\xab\x86\x72\xb4\xda\x00\x19\xfa\x9d\xa4\x2d\xb4\x06\xb9\x84\x16\xb8\x66\xb4\xf3\xce\x40\xd7\x45\x54\x66\xeb\x22\x8c\x16\xc4\x7f\xa2\xac\x83\x96\x68\xe1\xf0\x3f\x90\x6a\x0f\x12\x10\x07\xe5\x84\x2a\x25\x1a\x46\x35\xb4\x64\x2f\x94\x26\x03\x6f\x41\x12\xbd\x67\x8a\xbc\xc3\xd1\xff\xc4\x6d\xfd\x8f\x2c\xfd\x25\xdf\x7f\x08\x0e\x37\x7c\x3f\x05\xeb\xa4\xaa\xc3\x22\x5a\x46\x69\x15\x07\x49\x1d\x06\xa9\xc9\x82\x0d\xbb\x20\xfe\x12\xb6\x74\xe8\x34\x99\x6e\x3a\x4b\x85\x0d\xda\xfa\xb6\x63\xc2\x97\x28\xfc\x3e\x55\xcd\xe4\x7c\xb2\xe2\xd8\x46\x93\xa9\x69\x07\xd3\x59\xca\x7c\x1e\x14\x48\x73\xc6\xf7\x3c\xef\x11\x53\xe1\xbd\x64\x65\x55\x07\x49\x11\x05\xcb\xb7\xa9\xd3\x5e\x30\x4b\x97\xed\xe8\xb2\x64\x2c\x46\x00\x37\x93\x63\xb3\x8c\xf9\x71\x2e\x66\x49\xfa\x60\x7a\x6f\xc0\xb8\xa2\xdf\xf2\x5b\x7f\x7b\xab\xf3\x22\xfb\x5b\x14\x56\x7f\x2a\x44\x2f\xc5\x3f\xa1\xd1\xbe\x57\xbe\x95\x55\xb4\xaa\xdd\x40\x3d\x65\xeb\x74\x79\x7b\x9e\x3a\xd1\xd0\x0e\x87\x69\xcb\xa4\xd2\xff\xfd\xcf\xbf\x7d\x2f\xcd\xd0\x2e\x78\x0d\xe2\x24\xf8\x96\x60\xb9\x52\x41\xe2\x9e\xd0\x1f\x94\x75\x74\xd3\x81\xef\xc5\xa5\xed\x68\x73\x87\xd9\x2c\x31\xdb\xde\xd6\x29\x02\xf6\x6d\xbe\xe3\x55\x9e\x15\x55\x1d\x15\x45\x56\xd4\xe9\x3a\x49\xac\xd3\x96\x6a\x8a\xd7\x74\x66\x1f\x54\x91\xad\x18\x78\xfb\x40\x1c\xd2\x66\x0f\xcd\xbb\xc1\xe9\x8e\x6c\x59\x07\x0f\xe7\x4e\xd1\x5d\xfd\x1a\x24\x6b\x44\x1a\x1d\x7a\x7d\xb4\x7e\x05\x27\x1d\xe3\x40\xbe\xa8\xf3\xf3\xbf\x17\x59\xfa\x5c\x3f\x65\xc5\x2a\x40\xe8\x31\x6f\x84\x94\xd0\x68\x62\x03\x08\x79\xa0\xfa\x53\xe3\x59\x53\xcf\x13\x1b\xce\x3a\x52\x68\x7b\x89\x4f\x7d\xb8\x92\xa7\xeb\xd5\x82\xf8\x01\xd1\x42\xd3\x8e\x88\x2d\xf9\xa2\x88\x14\x1f\x0a\x3f\x9a\x0b\x50\x09\x84\x6e\x38\x02\xea\xbe\x12\xf5\xce\xfa\x9b\x7e\xca\xe0\xf5\x7c\x68\x15\xfd\xe1\xba\xe5\x8b\xfa\x4a\x24\x50\x25\xf8\x02\x41\x78\xde\x23\x0e\x84\x97\x07\x65\xf9\x7b\x56\x2c\xcd\x15\x56\x41\x15\xbe\xb8\xc1\xea\xa9\x52\x1f\x42\xb6\xd8\x66\xec\x94\x17\xdf\xcb\x8a\xf8\x39\x4e\xdd\x95\xe7\xe7\x85\x64\x3b\xc6\x69\xf7\x99\xe1\xba\x9c\x18\x30\x08\xab\xd8\x00\xad\x4e\x73\xe9\x28\x13\x38\xf6\xd4\xac\xe6\x82\x6b\xda\x68\x53\x75\xda\x1e\x18\x47\xbe\xa7\x5a\xc8\x07\xe7\x70\x9e\xf8\x54\x10\x35\x34\x7b\xe3\xd0\x34\x6f\xb0\x5c\xc5\xe9\x35\xe1\x60\xd0\xd6\x91\x8e\x71\x6a\x21\x5c\x91\xce\xc3\x39\xe8\x22\x4a\x82\x2a\x5a\xce\x66\x73\x8d\x66\x7b\x8a\xd0\xe7\x13\xe8\x06\xcf\x40\x48\x96\x41\x3e\x22\x58\xe7\xcb\x60\x44\xd0\xb5\xb4\xbf\x0c\x0c\x2d\xb3\x71\x5f\xa3\x22\x7e\x7a\xab\xc3\x6c\x39\x5b\x52\xaf\x20\xd9\x96\x35\x54\x33\xc1\x49\x23\x5a\x20\x20\xa5\x90\xbe\x17\xad\x82\x38\xa9\x97\x71\xe9\x46\x74\x45\x59\x77\x5a\x81\xca\xb4\x4e\xcb\xd4\x9d\x89\x3d\x79\x9b\x97\x37\x3a\xa0\xc3\x03\xd5\xcd\x9e\x6c\x4d\x6b\x59\x6e\x40\x4a\x1e\xfb\xa7\xc4\x6f\x23\x56\x4c\xcd\xff\xe1\xe3\x53\x8f\x5c\x3a\x31\xa4\xb0\x20\xfe\x87\x14\x7c\x37\x31\x36\x11\x72\x66\x62\x01\x1a\xba\x1e\xc1\x5d\xd2\xb5\xf7\x88\xe2\x40\xf0\x13\xbf\x16\xd1\x73\x9c\xa5\xf7\xee\x4e\x62\x8d\x7f\xc6\xb0\xb8\xf2\x30\x14\xfe\x3d\x05\xc2\xb5\x79\x77\x18\xb3\x33\x7f\x46\xe3\x1d\xe5\xe7\x12\xc2\x52\x66\x68\x13\xbb\x03\x3d\x5f\x28\x37\xd8\xb2\x11\x7c\xcb\x76\x83\x34\x7d\x63\x0a\x17\xaf\x82\xe7\xe8\x73\x57\xec\x40\x77\x70\x9f\xa3\xbc\x2e\x5f\xb2\xc2\x52\xa7\x1a\xb6\x5b\xd6\x30\x14\x4b\x71\x8f\x69\x11\x3d\x70\xa5\x69\xf3\xee\x3d\x47\xd5\xa9\x02\xa7\x0a\xa7\xe2\x94\x64\x43\x90\x78\xde\xcd\xcd\x0a\x0e\x1b\x90\xe3\xe8\x05\xcb\xe5\x7c\xd4\x36\x00\x9c\xd0\xd6\xa9\x23\x67\x32\xea\x0c\x37\x9b\x9f\x8b\x0c\x67\x70\x4b\x61\x9c\x6c\x5f\x82\xb2\x76\xe9\xc6\x35\xe9\x0c\x66\xa5\x19\x53\x1d\xde\x60\x0c\xef\x91\x8b\x16\xbc\x14\x27\xf7\xa4\x2c\x9c\x4a\xac\xab\xa0\xfc\x8e\x34\xdf\xb6\x04\x0f\x61\x57\x3b\xc1\x69\xbe\x9e\xba\xc0\xe9\xc6\xaf\xbd\x2d\xc0\x07\x65\x9a\x30\x4d\x5a\xc1\xe1\x37\x0c\xb0\xa1\xcd\xfb\xd0\x07\x4d\x23\x06\xae\xbd\x3c\x28\x82\x55\x1d\xad\xf2\xea\xed\xb2\x0c\x3d\x95\xf4\x00\x1a\xa4\xc2\x45\x5e\xd5\xe5\x3a\xcf\x6d\xb5\xd6\x5c\x0d\x3d\xee\x38\xec\xc9\x63\x8f\xc2\xf6\x5c\x5a\x9d\x71\x8d\x9d\xf9\x51\xab\x7c\x0b\xc2\xef\xeb\xbc\x0e\xc2\x30\x5b\xa7\xbf\xa2\x5a\xce\x80\xdf\x2d\x5f\xbc\x47\x1c\x81\x0b\x99\x7a\x47\x34\xb4\xfa\x85\x20\xae\xaa\xdf\x0c\x46\xcf\xdd\xf1\x29\x4e\x22\xcb\xfe\x6e\x54\xdc\x50\xb8\xb2\xe9\xf1\x52\x46\x8c\x90\x0d\x6c\x85\x04\xa2\x3e\x98\x6e\xf6\xf8\xfe\x98\x1d\xa0\xf6\xda\x67\xa3\x6c\xa3\x5c\xbf\x1e\x36\x80\xc6\x68\x08\x2d\x19\x7a\x33\x6b\x33\xb3\x22\x2a\xab\xac\x88\xae\xed\x24\x28\x2d\x24\xe3\x3b\x63\x31\x8e\x47\x01\x4a\x0c\xb2\x81\xeb\x1c\xce\xae\xf9\xd3\xcb\x4d\xa2\xf0\xb6\x66\x9d\x66\x66\x54\xa8\xa7\xd4\x6f\xa0\x13\xb8\x8a\xb4\x38\xe7\xaa\x0a\x1f\x0a\xa2\x07\xe9\x76\xda\x38\x4f\x3d\x48\x14\x5f\x6e\xa2\x70\x55\xda\x4d\x3a\xee\x63\x5b\x8d\xf2\xc8\x9b\xbd\x14\x9c\xfd\x81\x79\x52\x20\xed\xb6\xfb\xab\xdb\xbb\x49\xf6\x1c\xa7\x97\x36\xeb\xb9\xdc\xc0\x6d\xf1\xe0\x4e\x4f\xfb\xb3\x9a\x1e\x92\xbd\x14\x7b\xb6\x61\x5a\x11\x3c\xe3\x62\x6c\xa5\x38\x90\x4e\xec\x76\x58\x25\xc6\x7f\xbb\x47\xad\x78\x8f\x0d\x53\x5e\x18\x97\x86\x05\x2e\xa9\x01\x65\x33\x53\x44\x53\xf5\x7e\x49\x03\x68\xfa\xe3\x10\x1a\xee\xf5\x5e\x57\x75\x98\xa5\x4f\xf1\xf3\xf4\x5a\x09\xe7\xac\x7c\xb5\x07\x27\x83\xcb\x27\x6f\x75\xc9\xe8\x9f\x55\xab\x85\xbe\x13\xc7\x83\x21\x94\x8e\xf2\xbb\xab\xc6\x7a\xdc\x0f\x23\x4e\x8c\x07\x5c\x83\x84\x16\x9f\x18\x0a\x76\xc6\x25\x42\xe8\x58\xa3\xd5\x34\x94\x06\x3b\xa6\x76\x3a\xf6\x95\xf4\xe7\xcf\x15\xba\xa3\x8c\x8f\x3f\x12\xcc\xdf\x27\x71\x8e\xe2\x19\x11\x36\xcd\xd0\x33\x68\x09\xe5\xed\x0c\xa4\x04\xe3\xa9\xb5\x10\xff\xd2\x0b\xd1\xa1\x9b\x3c\xcb\x92\x9b\x39\x8a\x73\x82\x67\x66\xcb\xe7\x06\x8f\x8c\xcf\x21\xbb\xd2\xcf\x23\x8e\x1b\xc6\x8a\x12\xa5\xe5\xd1\xc3\x6d\x58\x56\xc5\xdb\xf5\xeb\xb3\x9a\xff\xb0\x21\xb6\xf6\x31\x4d\x65\xb3\x67\x1a\x1a\x3d\x48\x30\x84\x7d\x2d\x78\xfe\x17\x00\x00\xff\xff\xdf\x96\x1c\x2d\x5b\x11\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4443, mode: os.FileMode(420), modTime: time.Unix(1615174672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\xcd\x52\xe3\xd8\x15\xde\xeb\x29\x5c\x76\xcd\x2e\x49\x65\xdd\x3b\xb5\x2c\x40\x69\x59\x52\x49\x32\x13\xb2\x51\x31\x6e\x67\x42\x06\x6c\x17\x86\x54\x25\xab\x71\xf3\x63\x9b\x91\x30\xe9\x06\xd2\x80\xa7\xb1\x69\xe8\x26\x30\xb6\xf9\x99\xc6\xc6\xb2\xe1\x65\x74\xaf\xa4\x15\xaf\x90\xba\xf7\x4a\xb2\x6c\xb7\x33\x2c\x31\xe7\x3b\xe7\xdc\xf3\xf3\x7d\x47\xb1\x54\x76\x69\x29\x9b\xa1\x04\x3a\xc1\x6a\xec\x9f\x39\x45\x55\x5e\x44\xa2\x60\xc7\xb0\x3f\x5f\x81\xf6\x0d\x68\xbc\x07\xd5\xf3\x28\xc5\x49\x9a\x20\xaa\x03\x03\xa7\xd5\x06\xd5\x73\xfb\xd6\xb4\xcd\x63\xa7\xf9\x60\xf7\x9b\x6e\xfd\x8b\xfb\xf3\x09\xa8\x5f\x82\xcd\x03\xcb\x7c\x07\xba\xef\x38\x29\x4a\x51\xb1\xd4\xe2\x6a\x7e\x25\xbd\x4c\x31\x7c\x52\x51\x59\x59\x8b\xb3\x3c\xab\xb2\xda\x14\xcd\xf1\x6c\xfc\x45\x24\x0a\xff\x53\x83\xb7\x7b\xa0\x54\x73\x0f\x4e\x41\xff\x1d\x28\x1b\xf6\xd6\x1d\xfc\xb1\x60\x1f\xae\xbb\x47\x9b\xf6\xc3\x69\x34\x80\x72\x0a\x4e\x42\x4e\x0a\x02\x27\x4c\xbf\x88\x44\x89\x81\xd5\x31\x40\xf5\xdc\x79\xdc\x71\xea\xba\xd5\x69\x3c\xf5\x0a\x63\x10\x5e\x64\x68\x1e\xbd\xab\xd5\x03\x1b\x67\x04\xe6\x05\x36\x8a\x76\xf7\x33\x4e\x74\x39\xfd\x3a\x9d\x59\x59\x98\x5f\xa4\x86\x72\xd4\x64\x56\x11\x93\x32\xc3\x22\x3c\x49\xf3\xf4\xda\xf9\xf5\xec\xa9\x57\x70\x5a\x67\xf6\xe7\xf7\xee\xdb\x33\xab\xf3\x13\xac\x96\xc1\xc6\xad\x53\xd8\xb5\x3a\x26\xac\x76\xa3\x13\x9c\x68\x7f\x11\x85\xe7\x7a\x02\x95\x96\xbd\x7b\x0e\x74\xec\x6c\x8a\x4e\xf2\xaa\xc6\xc8\x6c\x9c\x15\x54\x8e\xe6\x35\x86\x16\xf0\xdb\x48\x1c\x54\x0d\xf3\xbd\xd3\x3c\x05\xc5\x06\x34\x9a\x56\xc7\x70\xd6\xfa\x24\x08\x2e\x08\xee\x2f\x33\xc3\x32\xaf\x06\xa5\x27\x11\x49\xaf\x09\xc0\xea\x6c\xdb\xbb\xe7\xb0\xd4\x46\x3f\x1e\x75\xc0\x8e\x8e\x2a\xf3\xb7\x6c\x7e\x85\x9a\x11\x15\x55\xa3\x79\x99\xa5\xe3\x73\x83\x39\x20\x8f\x0d\x0d\x8a\xf7\x6a\x6c\x1d\x04\x1a\x7f\x6c\x80\xb3\xcd\x0a\x79\xac\xdf\xec\x71\x07\xda\xcb\x39\x4d\x92\xc5\x3f\xb1\x8c\xfa\x5c\x5f\xf5\x7b\xfb\xa8\x89\xdf\xad\xcc\x29\x2a\x9b\xd0\xbc\xf9\x9d\x12\x93\x42\xdc\x1b\xdf\x8d\x12\x19\x56\x58\xfd\x05\x56\xbb\x9c\x44\xca\x24\x22\x53\x7a\x96\xe6\x78\xfa\x25\x8f\xaa\xca\x49\x11\xe7\xcb\x3a\xec\xee\xa0\x0a\xdd\xdd\x46\x29\x4e\x21\xe3\x84\x53\xc4\xbe\xbc\x0c\xac\xce\x36\x19\xfc\x08\x27\x45\xc0\xe6\x8d\x7d\x51\x78\xea\xe9\xb0\x7a\xe1\xac\xf5\x61\x69\x07\x6c\x1d\xc3\xb6\x09\xb6\x6a\x51\x52\x4b\x2e\x21\x89\xb2\xaa\xb1\xb2\x2c\xca\x9a\x90\xe4\xd1\x7c\xc2\xea\x05\x2c\x3f\x80\xd2\x15\xa8\xb4\xc8\xac\xda\x87\xeb\x70\xef\x0a\x1a\x4d\xfc\xd6\x36\xfc\xf8\x23\x3c\x3e\x23\xff\x82\xfb\x45\xcb\xbc\xc3\x69\x87\x1d\x22\x57\xda\x2c\xcd\x27\x51\xf6\xdf\xe4\x23\x4e\x5d\x87\xd5\xb2\xfd\xdf\x2e\xf1\x33\x6c\xfc\xad\x2c\x0a\xd3\xda\x94\x28\x27\x68\x35\x30\xb7\x2f\x5b\xa0\xf2\x11\xd6\x7a\xa0\x57\xb1\x3a\x06\x6c\x7c\xb4\xeb\x23\xb8\xd0\x1c\x86\xeb\xea\x85\x2b\x3f\xa0\x9d\x2c\x5d\x81\xd6\xa6\xfb\xf6\x6c\x18\xe9\xf5\x54\x48\x26\x50\x33\x37\xae\x23\x1e\x06\x27\x47\xa2\x81\x4e\xe7\xa9\xa7\x3b\xed\x5b\xe7\xb1\xf8\x55\xb0\x42\xcf\xb2\xc1\xf0\x21\x07\xd6\xe3\xcf\x68\x00\xbd\xa1\xd0\xc1\xf6\x31\x38\xaa\x3d\xf5\x0e\xbf\xc9\x47\x29\x8a\x8a\xad\xe6\xd3\xcb\x94\x44\x2b\xca\xb7\xa2\x1c\xc7\x09\x27\x68\x95\x99\xc1\x84\xb0\x69\xd7\x0a\xee\xee\x81\xd3\x6a\x45\x29\x51\xe6\xa6\x39\xc1\x7b\x53\x60\xb2\x7d\x3c\x6c\x95\x54\x06\xc4\x42\x33\x2a\x87\x73\x21\x6b\x03\xab\x17\x60\x07\x2d\x2d\xe9\x96\x53\xd8\x45\x14\xd9\xac\xdb\x3b\x9b\xe0\xdf\xef\x71\xab\x30\x3a\x5c\x33\xc4\x43\x8d\x53\x82\xc7\x16\x74\x3c\xc1\x09\x93\xd6\x3b\x32\xff\x7a\x69\x21\x13\x21\xe6\x64\x69\x9d\x93\xcb\xd0\xa2\x87\xb3\x93\x59\x9e\x56\xd9\x78\x68\x7b\xbc\x34\x6f\xea\x01\xc9\x90\x5d\x89\x52\x7c\x9c\x96\x82\xa0\x49\x29\x4e\xe3\xa0\xe8\xd7\xa1\x60\xd6\x63\x13\xee\xde\xe3\x48\xb3\xac\xcc\x4d\xcd\x69\x8c\x18\x0f\xd1\xb9\x7b\xa1\x3b\xad\x42\xa8\x5a\x6c\x82\xe6\x78\x2d\xce\x29\xde\x3e\xb9\x6f\x9a\x96\x79\x47\x34\xc3\x39\xb9\xb4\x3f\x15\x26\x95\xcb\xc7\x86\x9b\x41\xd0\x40\xbf\x77\x37\x8c\x80\x03\x3c\x76\x0b\x1a\xac\xa0\xbf\x06\x2c\xe7\x13\x5a\x40\x71\xa4\x9d\x3e\xbf\x0d\x63\xf1\x3a\x86\x51\xb0\xb4\x3f\xdc\x7e\x92\x14\x66\x40\x92\x90\xdd\xbc\x0e\x11\x20\x45\xc5\x96\xd3\xdf\x2f\x64\x33\x3e\x93\xc9\xec\x34\x27\x0a\xcf\x12\x13\xa0\x77\xc1\xf1\x71\x98\xc9\x42\x12\x40\xc5\xfe\x95\xcd\xa4\x7d\xaf\x48\x46\x9e\xe7\xd3\xf7\x30\x44\x90\x6b\xe7\x76\xff\xc6\x69\xd6\x41\xe9\xed\xb0\x58\x12\x1e\x72\xb6\xdb\xa0\xb2\x4f\x96\x98\x10\x73\x98\x7e\xdc\x0d\xc3\xee\x13\x7a\xe5\x12\xf4\x34\x3b\x09\xb8\x57\x05\x6b\x95\x49\x40\x49\x53\x66\x44\x19\x95\x90\xcb\x45\x7c\x6e\xa5\xa8\x58\x36\x97\xce\xe4\x57\xe6\x53\x3f\x50\xd3\xac\xea\x17\xcf\xef\xca\x80\x59\x70\xa5\x50\x51\x72\xcb\xd9\xbf\xa7\x53\x2b\x89\xf4\xd2\x77\xe9\xe5\x60\xfa\xe9\x78\xa8\xf5\xf8\xe1\x3e\xf7\x06\x88\x40\x53\xbd\xed\x98\xb4\x71\x64\x41\xc6\x04\xd5\x47\xcd\xd0\x8a\xe6\x15\x10\x41\xb0\x71\x58\xd1\x9e\x7a\x85\x31\x2c\x15\xcb\x64\x5f\xa7\x29\x01\x6d\x8e\x2f\xa9\xde\x55\xa3\xa9\xb4\xf2\x0a\x33\xe3\x9d\x65\xee\x3b\x5b\x6f\xec\x37\xf7\x70\xef\xca\x2d\x56\xe0\x3b\xc3\xea\x57\x11\x3d\x56\xcf\x61\xf9\xb3\x53\xd7\x7f\x17\x71\x5a\x6d\xbb\x51\x06\x0f\x1b\xa0\xb9\x66\x99\xbf\x90\x9f\x41\x53\x87\xad\xbd\x3f\xa0\x30\xdf\xcd\xa7\x7e\x58\xcd\xd1\xa9\x54\x76\x35\xb3\x42\x49\xb4\x4c\x27\x34\x36\x21\xa9\x73\x28\x42\xe5\x0d\xdc\xbb\xf2\x2b\x8f\x1e\xae\x24\x25\x89\xb4\x04\xf1\xf0\x6e\x0b\xea\xe8\x0a\xb3\xaf\x4d\xf0\xe1\xa7\x28\x35\x72\x3c\xc0\x5a\xdd\xbd\xd0\x43\x3b\xe8\x0d\xe6\x4b\x9a\x79\x95\x94\x34\x9a\x61\xc4\xa4\xf0\x5c\x09\x07\xa7\x45\xcb\xec\x3b\xbf\x7e\x02\x95\xf6\x04\x21\xa7\x62\xb9\xc5\xf9\xcc\xc8\x55\xf5\x1b\x6e\xc3\x63\x3e\xee\x36\x74\x9d\xbe\xc4\x75\xa2\xbc\xdc\xa7\x38\x9e\x25\x04\xea\x4f\x35\x39\x17\x3c\xff\x28\x55\xa2\xbd\x60\xd3\x00\xa5\x22\x34\x4e\xc2\xf9\x0f\xed\x13\xf1\x18\x9c\xaa\xa4\x7b\xc4\xfa\x2b\xa7\xaa\xcc\x2a\xaa\x28\xb3\x23\xe6\xb0\x70\x02\x4e\x0d\xdf\x3c\x98\x5f\x39\x9d\xcf\xae\x2e\xa7\xd2\xe3\x25\x09\x3d\xe3\xff\x24\x1f\x6e\xda\xc8\xb5\x35\x98\xe7\xa1\xdb\xea\xfa\x83\xd5\xdd\x1e\x99\x6a\xe7\xf1\x08\xa9\x77\xe3\x94\x8c\xa7\x97\xe2\xe2\xeb\xf9\x1c\x51\x94\x40\x8e\x48\x25\xc1\x8e\x0e\x1b\x67\xa0\x74\x85\x06\xcb\x93\x95\xee\x1f\x3d\xf5\xe1\xc5\x69\x4e\x18\x45\x04\xe2\x43\x08\x16\x07\xc0\xd6\x03\x49\x21\x9f\x21\xf6\xa7\x02\x6c\x9c\xa0\x7f\x11\x88\x7d\x60\xba\x07\x9b\x91\x09\x32\x4c\xc5\x52\x0b\x79\x8a\xe1\x14\xbc\x70\xa3\x5b\x88\x32\xf5\x29\x1d\x96\x2f\x61\xa5\x62\x75\x1a\xf6\xe1\xba\x65\x9a\x60\xab\x8e\xd0\xff\x58\x62\xb2\x99\xbf\x2e\x7c\x4f\xcd\x26\x34\x46\x14\xa6\xb8\xe9\xc1\x51\x4c\x68\x2e\xa4\x09\x03\x9b\xd1\xaf\x9f\xc0\x74\x50\xdf\xd0\xcc\xfe\x46\x95\x17\x72\x88\x46\x07\x1f\x6d\xf8\x9c\xb5\x0f\xd7\x39\x09\x36\xbf\x20\x9d\x6b\xdf\xc0\x6a\x19\xff\x15\x9c\xa3\x4e\xab\xed\x16\x0d\xb8\x7f\x45\xac\x83\x2f\xbb\x91\x93\x17\x1d\x65\x27\x97\xc0\xa8\x61\x71\xd6\x83\x43\xc3\x2d\x6e\xc1\xdd\x07\x12\xfc\xf7\xb9\x6c\x76\x11\xe1\x25\x51\xe4\xc7\x5e\xc6\xe5\x22\xf0\xba\xf6\x55\x2d\x43\x57\x71\xe8\xab\x2f\xea\x49\x66\x7e\x65\xf9\x9f\x14\x22\x7c\x45\x95\xe7\xc6\x3f\x35\x9c\xd6\x19\xfc\x70\x07\x3f\x78\x84\x84\xbb\x81\xae\x6d\x2f\x84\x2f\xbf\xff\x0b\x00\x00\xff\xff\x43\x4b\xa4\x44\xd1\x0e\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3793, mode: os.FileMode(420), modTime: time.Unix(1615174669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
