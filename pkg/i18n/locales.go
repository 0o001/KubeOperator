// Code generated for package i18n by go-bindata DO NOT EDIT. (@generated)
// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcb\x72\xe3\xba\x11\xdd\xf3\x2b\x60\xba\x66\x37\x99\xca\x5a\x3b\x9a\xa2\x6d\x66\x28\x52\xc5\x87\x6f\x9c\x0d\x0b\x22\x5b\x12\x62\x12\x60\x00\x70\x1c\xcd\x2e\xff\x95\x7f\xca\x2f\xa4\x1a\x80\x28\xea\xe1\x1a\x4f\xdd\x95\x25\x17\xba\xfb\xa0\x5f\xe7\x40\xf7\x8d\xe8\x7b\xc1\xbd\x34\x58\x45\x75\xf4\xf7\xb8\x28\x8b\x05\xf1\x53\xda\x03\xa1\x9d\x04\xda\x1e\x08\xfc\x9b\x29\xad\x7c\x2f\x5e\xd7\x69\x56\x9e\x0e\xad\x3b\xa0\x0a\xc8\x96\x75\x1d\x61\x9c\xe8\x3d\x10\x09\x3b\xa6\xb4\x3c\x90\x78\x4d\x84\xfd\x97\x3a\x28\x0d\x3d\x51\xa0\x35\xe3\x3b\x32\xd0\x1d\xf8\x9e\x77\xdf\x74\xa3\xd2\x20\xbd\x30\xa9\x8a\x32\xca\xeb\x65\x94\x44\x65\x54\x3f\x06\x71\x12\x2d\x17\xc4\x6f\x28\x27\x5c\x68\xd2\x42\x07\x1a\x88\x3b\x8e\x71\x9a\x51\x4a\xe0\x9a\x28\x4d\x35\xf8\x93\x83\xb8\x30\xe8\xf2\x2a\x4d\xe3\xf4\x69\x41\xfc\x72\x3f\x33\x53\xc6\x99\x1c\x39\x67\x7c\x77\x65\x94\x64\x61\x90\x2c\x88\x1f\xf7\x83\x90\x7a\xb2\x6a\x28\x47\xab\x0d\x90\x71\xd8\x49\xda\x42\x6b\x90\x4b\x68\x81\x6b\x46\x3b\xef\x0c\x74\x9d\x47\x45\x56\xe5\x61\xb4\x20\xfe\x23\x65\x1d\xb4\x44\x0b\x87\xff\x8e\x94\x7b\x90\x80\x38\x28\x27\x54\x29\xd1\x30\xaa\xa1\x25\x7b\xa1\x34\x19\x79\x0b\x92\xe8\x3d\x53\xe4\x0d\x0e\xfe\x07\x6e\xeb\x7f\x64\xe9\x6f\xf9\xfe\x29\x38\xdc\xf0\xfd\x18\x54\x49\x59\x87\x79\xb4\x8c\xd2\x32\x0e\x92\x3a\x0c\x52\x93\x05\x1b\x76\x41\xfc\x25\x6c\xe9\xd8\x69\x72\xba\xe9\x2c\x15\x36\x68\xeb\xdb\x8e\x09\x9f\xa3\xf0\xfb\xa9\x6a\x26\xe7\x27\x2b\x8e\x6d\x74\x32\x35\xed\x60\x3a\x4b\x99\xcf\xa3\x02\x69\xce\xf8\x9e\xe7\xdd\x63\x2a\xbc\xe7\xac\x28\xeb\x20\xc9\xa3\x60\xf9\x7a\xea\xb4\x67\xcc\xd2\x65\x3b\xba\x2c\x19\x8b\x09\xc0\xcd\xe4\xd8\x2c\x63\x7e\x9c\x8b\x59\x92\xde\x99\xde\x1b\x30\xae\xe8\xb7\xfc\xd6\x0f\xaf\xf5\x3a\xcf\xfe\x16\x85\xe5\x9f\x0a\x31\x48\xf1\x4f\x68\xb4\xef\x15\xaf\x45\x19\xad\x6a\x37\x50\x8f\x59\x95\x2e\x6f\xcf\x53\x27\x1a\xda\xe1\x30\x6d\x99\x54\xfa\x7f\xff\xfd\x8f\xef\xa5\x19\xda\x05\x2f\x41\x9c\x04\x0f\x09\x96\x2b\x15\x24\x1e\x08\xfd\x41\x59\x47\x37\x1d\xf8\x5e\x5c\xd8\x8e\x36\x77\x98\xcd\x12\xb3\xed\x6d\x9d\x22\x60\xdf\xe6\x3b\x5e\xad\xb3\xbc\xac\xa3\x3c\xcf\xf2\x3a\xad\x92\xc4\x3a\x6d\xa9\xa6\x78\x4d\x67\xf6\x4e\x15\xd9\x8a\x91\xb7\x77\xc4\x21\x6d\xf6\xd0\xbc\x19\x9c\xee\xc8\x96\x75\x70\x77\xee\x14\xdd\xd5\x2f\x41\x52\x21\xd2\xa8\x1f\xf4\xc1\xfa\x15\x9c\x74\x8c\x03\xf9\xa2\xce\xcf\xff\x91\x67\xe9\x53\xfd\x98\xe5\xab\x00\xa1\xc7\xbc\x11\x52\x42\xa3\x89\x0d\x20\x64\x4f\xf5\x87\xc6\xb3\xa6\x9e\x27\x36\x9c\x75\xa4\xd0\xf6\x12\x1f\xfa\x70\x25\x4f\xab\xd5\x82\xf8\x01\xd1\x42\xd3\x8e\x88\x2d\xf9\xa2\x88\x14\xef\x0a\x3f\x9a\x0b\x50\x09\x84\x6e\x38\x02\xea\xbe\x12\xf5\xc6\x86\x9b\x7e\x8a\xe0\xe5\x7c\x68\x15\xfd\xe1\xba\xe5\x8b\xfa\x4a\x24\x50\x25\xf8\x02\x41\x78\xde\x3d\x0e\x84\xb7\x0e\x8a\xe2\x8f\x2c\x5f\x9a\x2b\xac\x82\x32\x7c\x76\x83\x35\x50\xa5\xde\x85\x6c\xb1\xcd\xd8\x31\x2f\xbe\x97\xe5\xf1\x53\x9c\xba\x2b\xcf\xcf\x0b\xc9\x76\x8c\xd3\xee\x23\xc3\x32\xcb\xea\x55\x90\xbe\x1a\xa8\x55\x1e\xe1\xa4\x95\x42\x90\x9e\xf2\x03\xd9\x5a\xc0\x54\x6b\xe8\x07\xad\xbe\x1d\x6b\x8e\xcb\x9d\xee\xa8\xe9\x4f\x09\x40\x7a\xc6\x47\x0d\x8a\x74\x54\x83\x34\x0d\x5a\x15\xa7\xc5\x1a\x84\x65\x6c\xee\x5f\x1e\xc7\xdd\x6d\x62\xe0\xd8\xaa\xb3\x56\x12\x5c\xd3\x46\x9b\x66\xa2\x6d\xcf\x38\xd2\x08\xd5\x42\xde\x39\x87\xf3\x7a\xa6\x82\xa8\xb1\xd9\x1b\x87\x26\x64\xb0\x5c\xc5\xe9\xf5\x1e\xc3\xa0\xad\xdb\x65\xc6\xa9\x85\x70\xb5\xcb\xee\xce\x41\xe7\x51\x12\x94\xd1\x72\x36\xf2\x15\x9a\xed\x29\x42\x9f\x0f\xb6\x9b\x67\x03\x21\x59\x06\xeb\x09\x41\xb5\x5e\x06\x13\x82\xae\xa5\xc3\x65\x60\x68\x99\x8d\xfb\x12\xe5\xf1\xe3\x6b\x1d\x66\xcb\x19\xf7\xbd\x80\x64\x5b\xd6\x50\xcd\x04\x27\x8d\x68\x81\x80\x94\x42\xfa\x5e\xb4\x0a\xe2\xa4\x5e\xc6\x85\x9b\xfc\x15\x65\xdd\x91\x59\x95\xe9\xc8\x96\xa9\x4f\x26\xf6\xe8\x6d\xde\x35\x51\x8f\x0e\x7b\xaa\x9b\xbd\x6b\x00\xbb\x72\x70\xd3\x4f\x6d\x59\xe0\xb7\xb3\x8d\x3f\xf5\x97\xd2\x12\xf8\x4e\xef\x49\x2b\xc0\xd6\xb9\x07\xd0\x47\x09\x20\xe1\x5f\x23\x93\xd0\x03\xc7\xf5\x7d\xee\xd4\xec\x9e\x05\xf1\xdf\xa5\xe0\xbb\x13\x31\x10\x21\x27\xef\x47\xc0\x86\x15\x26\xb0\x97\xac\xe0\xdd\xa3\x06\x11\xfc\xb8\xc6\xf3\xe8\x29\xce\xd2\xcf\x52\x34\xb1\xc6\xbf\x5a\xe4\xc8\xac\x18\x0a\xff\x1e\x03\x21\x3b\x7f\x3a\x8c\xa1\xe6\x5f\xb1\x45\x47\xf9\xb9\x52\xb1\x9b\x39\xb4\x5d\xb4\x03\x3d\xe7\xad\x1b\x4b\xb9\x11\x7c\xcb\x76\xa3\x34\x7d\x64\x0a\x19\xaf\x82\xa7\xe8\x63\x57\xac\xa7\x3b\xf8\x9c\xa3\x75\x5d\x3c\x67\xb9\xdd\xd0\x6a\xdc\x6e\x59\xc3\x50\x93\xc5\x03\xa6\x45\x0c\xc0\x95\xa6\xcd\x9b\xf7\x14\x95\xc7\x0a\x1c\x2b\x9c\x8a\x63\x92\xcd\x1e\xc6\xf3\x6e\x8e\x56\xd0\x6f\x40\x4e\xa3\x18\x2c\x97\xf3\xd1\xdb\x00\x70\x42\x5b\x27\xc2\x9c\xc9\x24\x67\xdc\xac\x7e\xac\x65\x9c\xc1\x2d\x21\x73\xb4\x7d\x0e\x8a\xda\xa5\x1b\xd9\xd8\x19\xcc\x4a\x33\xa5\x3a\xbc\xb1\x41\xbc\x7b\x2e\x5a\xf0\x52\x9c\xe4\xa3\x80\x71\x62\xb4\x2e\x83\xe2\x3b\xb2\x49\xdb\x12\x3c\x84\x5d\xed\x74\xad\xf9\x7a\xec\x02\x27\x4f\xbf\x0e\xb6\x00\xef\x94\x69\xc2\x34\x69\x05\x87\x6f\x18\x60\x43\x9b\xb7\x71\x08\x9a\x46\x8c\x5c\x7b\xeb\x20\x0f\x56\x75\xb4\x5a\x97\xaf\x97\x65\x18\xa8\xa4\x3d\x68\x90\x38\x67\x59\x59\x17\xd5\x7a\x6d\xab\x55\x71\x35\x0e\x48\xa5\xd8\x93\x87\x01\xf5\xf3\xb9\x82\x3b\xdb\x3d\x76\x07\x4c\x92\xe8\x21\x08\xbf\x57\xeb\x3a\x08\xc3\xac\x4a\x7f\x47\x1c\x9d\x01\xff\xb4\x4a\xf2\xee\x71\x04\x2e\xd4\xf0\x27\xa2\xa1\xd5\x6f\x04\x71\x55\x7d\x30\x18\x3d\x77\xc7\xc7\x38\x89\x2c\x1b\xb8\x51\x71\x43\xe1\xca\xa6\xa7\x4b\x19\xcd\x43\x36\xb0\x15\x12\x88\x7a\x67\xba\xd9\xe3\x33\x67\x76\x80\xda\x6b\x9f\x8d\xb2\x8d\x72\xfd\x48\xd9\x00\x1a\xa3\x21\xb4\x64\x1c\xcc\xac\xcd\xcc\xf2\xa8\x28\xb3\x3c\xba\xb6\x93\xa0\xb4\x90\x8c\xef\x8c\xc5\x34\x1e\x39\x28\x31\xca\x06\xae\x73\x38\xbb\xe6\x2f\x2f\x77\xd2\x9e\xb7\xa5\xf1\x69\x66\x26\x21\x7c\x4c\xfd\x06\x3a\x81\xd4\xa4\xc5\xf9\xae\x2a\xf1\x3d\x22\x06\x90\x8e\xe3\xa6\x79\x1a\x40\xa2\xc6\x73\x13\x85\xd4\x69\x99\x75\xe2\x67\x5b\x8d\xe2\xc0\x9b\xbd\x14\x9c\xfd\xc4\x3c\x29\x90\x96\xfd\xfe\xea\x78\x38\xc9\x9e\xe2\xf4\xd2\xa6\x9a\xcb\x0f\x64\x8b\x3b\x77\xfa\xc4\xa7\xe5\xe9\xbd\x3a\x48\xb1\x67\x1b\xa6\x15\xc1\x33\x2e\xc6\x56\x8a\x9e\x74\x62\xb7\xc3\x2a\x31\xfe\xed\x33\xea\xc5\xbb\x6f\x98\xf2\xc2\xb8\x30\x5b\xe0\x72\x35\xa0\x3a\x67\x8a\x68\xaa\xde\x2e\xd7\x00\x9a\xfe\xe8\x43\xb3\x7b\xbd\x97\x55\x1d\x66\xe9\x63\xfc\x74\x7a\x14\x85\xf3\xad\x7c\xc5\x83\x27\x83\xcb\x97\x75\x79\xb9\xd1\x3f\xaa\x56\x0b\x43\x27\x0e\xbd\x59\x28\x1d\xe5\x9f\xae\x1a\x1b\x90\x1f\x26\x9c\x18\x0f\xb8\x06\x09\x2d\xbe\x64\x14\xec\x8c\x4b\x84\xd0\xb1\x46\xab\xd3\x50\x1a\xec\x98\xda\xd3\xb1\xaf\x64\x38\x7f\x15\x19\xed\x39\xfd\x16\x31\x7f\x06\xc5\x6b\xd4\xe8\x88\xb0\x69\xc6\x81\xa1\x78\xe5\xed\x0c\xa4\x04\xe3\xa9\xb5\x10\xff\x32\x08\xd1\xa1\x9b\x75\x96\x25\x37\x73\x14\xaf\x09\x9e\x99\x91\xcf\x8d\x3d\x32\xbd\xba\x2c\xa5\x9f\x47\x9c\x18\xc6\x8a\x12\xa5\xe5\xc1\x43\x36\x2c\xca\xfc\xf5\xfa\x91\x5b\xce\x7f\x3f\x11\x5b\xfb\x66\xa7\xb2\xd9\x33\x0d\x8d\x1e\x25\x98\x85\x7d\x2d\x78\xfe\x1f\x00\x00\xff\xff\x44\x2c\xd6\xcb\xc2\x11\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4546, mode: os.FileMode(420), modTime: time.Unix(1643181687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x5f\x57\xe2\xda\x15\x7f\xcf\xa7\x60\xc1\xba\x6f\x6d\x57\x9f\xe7\x2d\x13\xa2\xa6\x13\x92\xac\x24\x78\x6b\x5f\xb2\xbc\x0c\xbd\xb5\x57\x81\x25\xda\xb5\xda\xa7\x8b\x7f\xf8\xe3\x25\x42\x67\xd4\x8e\xca\x1d\xc1\x41\xc7\xea\x40\x50\xef\x08\x03\xa8\x5f\x26\xe7\x24\x79\xf2\x2b\x74\x9d\x73\x42\x08\x30\x74\x7c\x24\xec\xdf\xfe\xbf\x7f\x7b\x9f\x50\x2c\xb9\xb2\x92\x4c\x50\x02\x1d\x61\x35\xf6\xcf\x9c\xa2\x2a\x2f\x02\x41\x50\xd6\xad\x8f\x2d\xd0\xbe\x01\x8d\x77\xa0\x72\x11\xa4\x38\x49\x13\x44\x75\x28\x60\x1b\x6d\x50\xb9\xb0\x6e\x7b\x56\xef\xc4\x6e\x3e\x58\xf7\x4d\xa7\xf6\xd9\xf9\xf5\x14\xd4\xae\x40\xf6\xd0\xec\xbd\x05\xdd\xb7\x9c\x14\xa4\xa8\x50\x6c\x79\x3d\xbd\x16\x5f\xa5\x18\x3e\xaa\xa8\xac\xac\x85\x59\x9e\x55\x59\x6d\x86\xe6\x78\x36\xfc\x22\x10\x84\xff\xa9\xc2\xdb\x7d\x90\xaf\x3a\x87\x75\x70\xff\x16\x14\x74\x6b\xe7\x0e\xfe\x9c\xb1\x8e\xb6\x9c\xe3\xac\xf5\x50\x0f\x7a\x50\x4e\xc1\x4e\xc8\x51\x41\xe0\x84\xd9\x17\x81\x20\x11\x30\x3b\x3a\xa8\x5c\xd8\x8f\x65\xbb\x56\x34\x3b\x8d\xa7\x7e\x66\x02\xc2\x8b\x0c\xcd\xa3\xb8\x8c\x3e\xd8\x3e\x23\x30\xd7\xb0\x9e\xb3\xba\x1f\xb1\xa3\xab\xf1\xd7\xf1\xc4\xda\xd2\xe2\x32\x35\xe2\xa3\x26\xb3\x8a\x18\x95\x19\x16\xe1\x89\x9b\xf5\x6b\xfb\xb7\xb3\xa7\x7e\xc6\x36\xce\xac\x8f\xef\x9c\x37\x67\x66\xe7\x17\x58\x29\x80\xed\x5b\x3b\xb3\x67\x76\x7a\xb0\xd2\x0d\x4e\x51\xa2\xfd\x45\x14\x9e\xab\x09\x94\x0c\x6b\xef\x02\x14\xb1\xb2\x19\x3a\xca\xab\x1a\x23\xb3\x61\x56\x50\x39\x9a\xd7\x18\x5a\xc0\xb1\x11\x3b\x28\x1b\xbd\x77\x76\xb3\x0e\x72\x0d\xa8\x37\xcd\x8e\x6e\x6f\xde\x13\x23\x38\x21\xb8\xbe\xcc\x1c\xcb\xbc\x1a\xa6\x9e\x58\x24\xb5\x26\x00\xb3\xb3\x6b\xed\x5d\xc0\x7c\x1b\x7d\x3c\xee\x80\x72\x11\x65\xe6\x6f\xc9\xf4\x1a\x35\x27\x2a\xaa\x46\xf3\x32\x4b\x87\x17\x86\x7d\x40\x82\xf5\x35\x8a\x1b\x35\x96\xf6\x0c\x4d\x06\xeb\xe1\xac\x5e\x89\x04\x3b\x28\xf6\xa4\x02\xed\xe5\x82\x26\xc9\xe2\x9f\x58\x46\x7d\xae\xae\xda\x17\xeb\xb8\x89\xe3\x56\x16\x14\x95\x8d\x68\x6e\xff\xce\x88\x51\x21\xec\xb6\xef\x76\x9e\x34\x2b\xac\x7c\x82\x95\x2e\x27\x91\x34\x89\x48\x94\x9e\xa7\x39\x9e\x7e\xc9\xa3\xac\x72\x52\xc0\xfe\xbc\x05\xbb\x65\x94\xa1\xbb\xdb\x20\xc5\x29\xa4\x9d\xb0\x8b\x58\x97\xeb\x81\xd9\xd9\x25\x8d\x1f\xe0\xa4\x00\xc8\xde\x58\x97\x99\xa7\x7e\x11\x56\x2e\xed\xcd\x7b\x98\x2f\x83\x9d\x13\xd8\xee\x81\x9d\x6a\x90\xe4\x92\x8b\x48\xa2\xac\x6a\xac\x2c\x8b\xb2\x26\x44\x79\xd4\x9f\xb0\x72\x09\x0b\x0f\x20\xdf\x02\x25\x83\xf4\xaa\x75\xb4\x05\xf7\x5b\x50\x6f\xe2\x58\xdb\xf0\xc3\xcf\xf0\xe4\x8c\xfc\x05\x0f\x72\x66\xef\x0e\xbb\xed\x57\x88\x54\x69\xf3\x34\x1f\x45\xde\x7f\x97\x0e\xd8\xb5\x22\xac\x14\xac\xff\x76\x89\x9e\x51\xe1\xef\x65\x51\x98\xd5\x66\x44\x39\x42\xab\x9e\xb8\x75\x65\x80\xd2\x07\x58\xed\x83\x7e\xc9\xec\xe8\xb0\xf1\xc1\xaa\x8d\xe1\x7c\x7d\xe8\xcf\xab\x6b\xae\xf0\x80\x66\x32\xdf\x02\x46\xd6\x79\x73\x36\x8a\x74\x6b\x2a\x44\x23\xa8\x98\xdb\xd7\x01\x17\x83\x9d\x23\xd6\x40\xa7\xf3\xd4\x2f\xda\xed\x5b\xfb\x31\xf7\x55\xb0\x42\xcf\xb3\x5e\xf3\x21\x05\xe6\xe3\xaf\xa8\x01\xdd\xa6\x28\x82\xdd\x13\x70\x5c\x7d\xea\x1f\x7d\x97\x0e\x52\x14\x15\x5a\x4f\xc7\x57\x29\x89\x56\x94\xef\x45\x39\x8c\x1d\x8e\xd0\x2a\x33\x87\x09\x21\x6b\x55\x33\xce\xde\xa1\x6d\x18\x41\x4a\x94\xb9\x59\x4e\x70\x63\xf2\x44\x76\x4f\x46\xa5\x54\x51\xd4\x22\xb4\xb0\x80\xbd\x89\xca\x2c\x26\x4c\x6c\x1a\x7e\xaa\xc1\xfd\x96\xfd\x98\x03\xf5\x23\x14\x81\xd1\x36\x3b\x05\x90\xcf\x3a\x6f\x4e\x40\x79\xd7\xc9\xe9\xb6\xb1\x8f\xeb\x15\x55\x86\xdc\x44\x33\x2a\x87\xc3\x21\x93\x07\x2b\x97\xa0\x8c\xe6\x9e\x14\xdc\xce\xec\x21\x96\x6d\xd6\xac\x72\x16\xfc\xfb\xdd\x10\xed\x4f\x3b\xa2\xb2\x46\x9d\xe0\xb1\x04\x1d\x8e\x70\xc2\x34\x86\x08\x2c\xbe\x5e\x59\x4a\x04\x88\x38\x99\x7b\xfb\xf4\xca\xc7\x15\x7e\xef\x64\x96\xa7\x55\x36\xec\x1b\x40\xd7\xcd\x9b\x9a\xc7\x53\x64\xdc\x82\x14\x1f\xa6\x25\xcf\x68\x54\x0a\xd3\xd8\x28\xfa\x3a\x62\xcc\x7c\x6c\xc2\xbd\x2f\xd8\xd2\x3c\x2b\x73\x33\x0b\x1a\x23\x86\x7d\x1b\xc1\xb9\x2c\xda\x46\xc6\x97\x70\x36\x42\x73\xbc\x16\xe6\x14\x77\x24\x9d\x8d\xa6\xd9\xbb\x23\x6b\xc7\x3e\xbd\xb2\xce\x33\xd3\xd2\x35\xc0\xfa\xeb\x49\xd0\xa0\xf8\xc5\xd9\xd6\x3d\x1a\x71\x09\xd2\xeb\x11\x05\xfd\x1a\xf2\x17\xae\x3f\xe8\x77\x41\xf7\xdc\xec\xe8\xd6\xa7\x73\x50\xce\xbb\xcb\xef\x3c\x03\xaf\x37\xc6\xe1\x78\xa8\xbd\x5c\x81\xb2\x0e\xf3\x07\xa3\x4d\x44\xfc\xc2\x3c\x4a\x7c\xb2\x9a\xd7\x3e\x1a\xa5\xa8\xd0\x6a\xfc\xc7\xa5\x64\x62\xc0\x87\x32\x3b\xcb\x89\xc2\xb3\x56\x12\x28\x76\xc1\xc9\x89\x9f\x0f\x7d\x8b\x84\x0a\xfd\x2b\x99\x88\x0f\xb4\xa2\x65\xf4\x3c\x9d\x03\x0d\x23\x34\xbb\x79\x61\xdd\xdf\xd8\xcd\x1a\xc8\xbf\x19\x5d\xb9\x84\xcd\xec\xdd\x36\x28\x1d\x10\x2a\x20\xf4\xee\x27\x31\x67\x5b\xb7\xee\x09\x49\x73\x11\x7a\x96\x9d\x06\xdc\xaf\x80\xcd\xd2\x34\xa0\xa4\x29\x73\xa2\x8c\x52\xc8\xa5\x02\x03\x86\xa6\xa8\x50\x32\x15\x4f\xa4\xd7\x16\x63\x3f\x51\xb3\xac\x3a\x48\xde\xa0\x2a\x43\x7e\xc2\x99\x42\x49\x49\xad\x26\xff\x1e\x8f\xad\x45\xe2\x2b\x3f\xc4\x57\xbd\x01\xa0\xc3\xe1\x61\x11\x71\xe0\x03\x06\xf7\x10\xde\x66\x76\x07\x64\xda\xd0\x91\x19\x99\x58\xcb\x03\xd4\x1c\xad\x68\x6e\x02\x11\x04\x0b\xfb\xf7\xe2\x53\x3f\x33\x81\xa5\x42\x89\xe4\xeb\x38\x25\xa0\xe1\x19\x2c\x66\xf7\x36\xd2\x54\x5a\x79\x85\xf9\xf5\xce\xec\x1d\xd8\x3b\x1b\xd6\xc6\x17\xb8\xdf\x72\x72\x25\xf8\x56\x37\xef\x2b\x88\x64\x2b\x17\xb0\xf0\xd1\xae\x15\x7f\x17\xb0\x8d\xb6\xd5\x28\x80\x87\x6d\xd0\xdc\x34\x7b\x9f\xc8\x67\xd0\x2c\x42\x63\xff\x0f\xc8\xcc\x0f\x8b\xb1\x9f\xd6\x53\x74\x2c\x96\x5c\x4f\xac\x51\x12\x2d\xd3\x11\x8d\x8d\x48\xea\x02\xb2\x50\xda\x80\xfb\xad\x41\xe6\x51\xe0\x4a\x54\x92\x48\x49\x10\x9b\xef\x19\xb0\x88\x6e\x39\xeb\xba\x07\xde\xff\x12\xa4\xc6\x4e\x10\x58\xad\x39\x97\x45\xdf\x18\xba\x8d\xf9\x92\x66\x5e\x45\x25\x8d\x66\x18\x31\x2a\x3c\xf7\x10\x00\xf5\x9c\xd9\xbb\xb7\x7f\x3b\x07\xa5\xf6\x94\x73\x80\x0a\xa5\x96\x17\x13\x63\xb7\xd9\x37\xd4\xfa\xdb\x7c\x52\xad\xef\xc6\x7d\x89\xf3\x44\xb9\xbe\xcf\x70\x3c\x4b\x38\x74\xd0\xd5\xe4\xe8\x70\xf5\x23\x57\xc9\x06\x07\x59\x1d\xe4\x73\x50\x3f\xf5\xfb\x3f\x32\x4f\x44\xa3\x77\xf0\x92\xea\x11\xe9\xaf\x1c\xbc\x32\xab\xa8\xa2\xcc\x8e\x89\xc3\xcc\x29\xa8\xeb\x03\x71\xaf\x7f\xe5\x78\x3a\xb9\xbe\x1a\x8b\x4f\xa6\xc4\x17\xc6\xff\x71\xde\x5f\xb4\xb1\x9b\x6d\xd8\xcf\x23\x17\xda\xf5\x7b\xb3\xbb\x3b\xd6\xd5\xf6\xe3\x31\xba\x01\x1a\x75\xd2\x9e\xae\x8b\xcb\xaf\x17\x53\x64\xa9\x78\x1b\x89\x64\x12\x94\x8b\xb0\x71\x06\xf2\x2d\xd4\x58\xee\x66\xe9\xfe\xd1\x5d\x40\xbc\x38\xcb\x09\xe3\x08\x6f\xff\x10\x82\xc5\x06\xb0\xf4\x70\xab\x10\x3e\xb7\xce\x33\xb0\x71\x8a\xfe\x22\x10\xeb\xb0\xe7\x1c\x66\x03\x53\x36\x31\x15\x8a\x2d\xa5\x29\x86\x53\xf0\xc0\x8d\x4f\x21\xf2\x74\x40\xe9\xb0\x70\x05\x4b\x25\xb3\xd3\xb0\x8e\xb6\xcc\x5e\x0f\xec\xd4\x10\xfa\x1f\x2b\x4c\x32\xf1\xd7\xa5\x1f\xa9\xf9\x88\xc6\x88\xc2\x0c\x37\x3b\x3c\xad\x09\xcd\xf9\x76\xc2\x50\x66\xfc\x0d\xe5\x89\x0e\xf3\xeb\xeb\xd9\x6f\x64\x79\x29\x85\x68\x74\xf8\xf4\xc3\x47\xb1\x75\xb4\xc5\x49\xb0\xf9\xd9\xec\xec\x82\xf6\x0d\xac\x14\xf0\x2f\xef\xa8\xb5\x8d\xb6\x93\xd3\xe1\x41\x8b\x48\x7b\xef\xc3\xb1\xc3\x19\x9d\x76\xa7\x57\x40\xaf\xe2\xfd\x5c\xf4\x6e\x0d\x27\xb7\x03\xf7\x1e\x88\xf1\xdf\xa7\x92\xc9\x65\x84\x97\x44\x91\x9f\x88\x8c\x4b\x05\xe0\x75\xf5\xab\xbb\x0c\xdd\xd6\xbe\xb7\x63\xd0\x5d\x99\xe9\xb5\xd5\x7f\x52\x88\xf0\x15\x55\x5e\x98\x7c\xb0\xd8\xc6\x19\x7c\x7f\x07\xdf\xbb\x84\x84\xab\x81\x6e\x76\xd7\xc4\x60\xfd\xfe\x2f\x00\x00\xff\xff\x84\x8b\x08\xc1\x17\x0f\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3863, mode: os.FileMode(420), modTime: time.Unix(1643181123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
