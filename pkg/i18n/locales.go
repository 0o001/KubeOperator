// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcb\x72\xe3\xba\x11\xdd\xf3\x2b\x60\xba\x66\x37\xb9\x95\xb5\x77\x18\x8a\xb6\x99\xa1\x48\x16\x49\xf9\xc6\xd9\xb0\x20\xb2\x25\x21\xa6\x00\x16\x00\x8e\xa3\xbb\xcb\x7f\xe5\x9f\xf2\x0b\xa9\x06\xc1\x87\x1e\xce\x78\xea\xae\x2c\xb9\xd0\xdd\x07\xdd\x7d\x4e\x37\x74\x5f\xcb\xe3\x51\x0a\x2f\xa1\xeb\xb0\x0a\xff\x1e\x15\x65\xf1\x40\xfc\x84\x1d\x81\xb0\x56\x01\x6b\x4e\x04\xfe\xc5\xb5\xd1\xbe\x17\x65\x55\x92\x96\xf3\xa1\xac\x05\xa6\x81\xec\x78\xdb\x12\x2e\x88\x39\x00\x51\xb0\xe7\xda\xa8\x13\x89\x32\x22\x87\x7f\xe9\x93\x36\x70\x24\x1a\x8c\xe1\x62\x4f\x3a\xb6\x07\xdf\xf3\xbc\xfb\xba\xed\xb5\x01\xe5\x05\xf1\xa6\x28\xc3\xbc\x5a\x85\x71\x58\x86\xd5\x23\x8d\xe2\x70\xf5\x40\xfc\x9a\x09\x22\xa4\x21\x0d\xb4\x60\x80\xb8\xe3\x18\xa8\xee\x95\x02\x61\x88\x36\xcc\x80\x3f\x39\x88\x0a\x0b\x2f\xdf\x24\x49\x94\x3c\x3d\x10\xbf\x3c\x2c\xcc\xb4\x75\xa6\x7a\x21\xb8\xd8\x5f\x19\xc5\x69\x40\xe3\x07\xe2\x47\xc7\x4e\x2a\x33\x59\xd5\x4c\xa0\xd5\x16\x48\xdf\xed\x15\x6b\xa0\xf1\x11\xb9\x82\x06\x84\xe1\xac\xf5\xce\x40\x57\x79\x58\xa4\x9b\x3c\x08\x1f\x88\xff\xc8\x78\x0b\x0d\x31\xd2\xe1\xbf\x23\xe5\x01\x14\x20\x0e\x26\x08\xd3\x5a\xd6\x9c\x19\x68\xc8\x41\x6a\x43\x7a\xd1\x80\x22\xe6\xc0\x35\x79\x83\x93\xff\x81\xdb\xea\x1f\x69\xf2\x4b\xbe\xff\x90\x02\x6e\xf8\x7e\xa4\x9b\xb8\xac\x82\x3c\x5c\x85\x49\x19\xd1\xb8\x0a\x68\x62\xb3\x30\x84\x7d\x20\xfe\x0a\x76\xac\x6f\x0d\x99\x6f\xba\x48\xc5\x10\xb4\xf1\x87\x96\x09\x9e\xc3\xe0\xfb\x5c\x35\x9b\xf3\xd9\x4a\x60\x1f\xcd\xa6\xb6\x1f\x6c\x6b\x69\xfb\xb9\xd7\xa0\xec\x19\xdf\xcb\x68\x51\xfc\x9e\xe6\xab\x09\x4c\xb2\x89\xb1\x22\x1d\xd3\xfa\x5d\xaa\x86\x8c\xfd\xb0\x05\xb2\x6d\x99\x78\xfb\xef\x7f\xfe\xed\x7b\x59\x1e\xbd\xd0\x32\xac\xbe\x87\xaf\x97\x86\x88\xa4\x53\xfc\x07\x33\x80\x17\x5f\xa0\x98\xcd\xbd\x7b\x4c\xbf\xf7\x9c\x16\x65\x45\xe3\x3c\xa4\xab\xd7\xb9\xbd\x9f\xb1\x32\x97\x1c\x70\x95\xb1\x16\xd3\xa5\x6f\x16\x64\xa8\x2c\xd6\xc4\xb9\x58\x14\xe6\x9d\x9b\x83\x4d\x80\x6b\xb4\x5b\x7e\xab\x6f\xaf\x55\x96\xa7\x7f\x0b\x83\xf2\x4f\x85\xe8\x94\xfc\x27\xd4\xc6\xf7\x8a\xd7\xa2\x0c\xd7\x95\x63\xf1\x63\xba\x49\x56\xb7\x49\xdc\xca\x9a\xb5\xc8\xe0\x1d\x57\xda\xd8\x44\x25\x29\xda\xd1\x17\x1a\xc5\xf4\x5b\x8c\x2d\x92\x48\x12\x75\x84\xfd\x60\xbc\x65\xdb\x16\x7c\x2f\x2a\x06\x16\xd9\x3b\x2c\xf8\xcb\x07\x4a\x0d\x4e\x11\xb0\x3f\xe4\x3b\x5a\x67\x69\x5e\x56\x61\x9e\xa7\xf9\x58\xb3\x44\x92\x86\x19\x86\xd7\x74\x66\xef\x4c\x93\x9d\xec\x45\x73\x47\x1c\xd2\xfa\x00\xf5\x9b\xc5\xe9\x8e\xec\x78\x0b\x77\xe7\x4e\xd1\x5d\xf5\x42\xe3\x0d\x22\x0d\x8f\x9d\x39\x0d\x7e\xa5\x20\x2d\x17\x40\xbe\xe8\xf3\xf3\xbf\xe7\x69\xf2\x54\x3d\xa6\xf9\x9a\x22\xf4\x48\xd4\x52\x29\xa8\x0d\x19\x02\x48\x75\x64\xe6\x43\xe3\x05\x91\x96\x89\x0d\x16\x2c\x90\x66\xb8\xc4\x87\x3e\x5c\xc9\x93\xcd\xfa\x81\xf8\x94\x18\x69\x58\x4b\xe4\x8e\x7c\xd1\x44\xc9\x77\x8d\x1f\xed\x05\x98\x02\xc2\xb6\x02\x01\xb5\x5f\x89\x7e\xe3\xdd\x4d\x3f\x05\x7d\x39\x17\x0a\xcd\x7e\xb8\x6e\xf9\xa2\xbf\x12\x05\x4c\x4b\xf1\x80\x20\x3c\xef\x1e\x49\x38\xd3\x0f\xaf\xb0\xa6\x65\xf0\x3c\x52\x68\xe4\x1f\xd7\x84\x8f\x79\xf1\xbd\x34\x8f\x9e\xa2\xc4\x5d\x79\x79\x5e\x2a\xbe\xe7\x82\xb5\x1f\x19\x6e\x8a\x59\x75\x69\x50\x46\x16\x68\x39\x6a\x81\x93\x69\x10\xd8\x53\x8b\x9a\x4b\x61\x58\x6d\x6c\xd5\x59\x73\xe4\x02\x87\x0c\x33\x52\xdd\x39\x87\xcb\xc4\x27\x92\xe8\xbe\x3e\x58\x87\xb6\x79\xe9\x6a\x1d\x25\xd7\x22\x87\x41\x1b\x27\x74\xd6\xe9\x00\xe1\x4a\xe8\xee\xce\x41\xe7\x61\x4c\xcb\x70\xb5\xe0\xe6\x06\xcd\x0e\x0c\xa1\x2f\x19\xe8\x88\x67\x21\xc4\x2b\x9a\x4d\x08\x36\xd9\x8a\x4e\x08\xda\x86\x75\x97\x81\xa1\xe1\x43\xdc\x97\x30\x8f\x1e\x5f\xab\x20\x5d\x2d\x06\xe3\x0b\x28\xbe\xe3\x35\x33\x5c\x0a\x52\xcb\x06\x08\x28\x25\x95\xef\x85\x6b\x1a\xc5\xd5\x2a\x2a\x1c\x45\xd7\x8c\xb7\xe3\xdc\xd5\xb6\x75\x1a\xae\x3f\x99\xd8\xd1\xdb\xb2\xbc\xe1\x11\x1d\x1e\x99\xa9\x0f\x64\x67\x5b\x6b\xd0\x06\x1c\x03\x53\xff\x14\xf8\x6d\xc2\x8a\xa9\xf9\x3f\x33\x60\xec\x91\x4b\x27\x56\x14\x1e\x88\xff\xae\xa4\xd8\xcf\x53\x82\x48\xb5\x30\x19\x00\x5a\xb9\x9e\xc0\x5d\xca\xb5\x77\x8f\x1b\x89\x14\xa3\xbe\xe6\xe1\x53\x94\x26\x9f\x9d\xd7\x64\x30\xfe\x99\xc2\xe2\x98\xc5\x50\xf8\x77\x0c\x84\xa3\xfa\xd3\x61\xec\x9c\xfe\x99\x8c\xb7\x4c\x9c\xaf\x2d\x83\x64\x06\x43\x62\xf7\x60\x96\x03\xe5\x86\x5a\xd6\x52\xec\xf8\xbe\x57\xb6\x6f\x6c\xe1\xa2\x35\x7d\x0a\x3f\x76\xc5\x8f\x6c\x0f\x9f\x73\x94\x55\xc5\x73\x9a\x0f\xd2\xa9\xfb\xdd\x8e\xd7\x1c\x17\xb4\xa8\xc3\xb4\xc8\x0e\x84\x36\xac\x7e\xf3\x9e\xc2\x72\xac\xc0\x58\xe1\x44\x8e\x49\xb6\x02\x89\xe7\x1d\x6f\xd6\x70\xdc\x82\x9a\xa8\x47\x57\xab\x25\xd5\xb6\x00\x82\xb0\xc6\x6d\x64\xce\x64\xda\x6d\x1c\x37\x3f\x5e\x6c\x9c\xc1\xad\xad\x66\xb4\x7d\xa6\x45\xe5\xd2\x8d\x63\xd2\x19\x2c\x4a\x33\xa5\x3a\xb8\xa1\x18\xde\xbd\x90\x0d\x78\x09\x32\x77\xdc\x2c\xdc\x66\x5a\x95\xb4\xf8\x8e\x32\xdf\x34\x04\x0f\x61\x57\xbb\x25\xd7\x7e\x1d\xbb\xc0\xed\xaa\x5f\xbb\xa1\x00\xef\x8c\x1b\xc2\x0d\x69\xa4\x80\xdf\x30\xc0\x96\xd5\x6f\x7d\x47\xeb\x5a\xf6\xc2\x78\x19\xcd\xe9\xba\x0a\xd7\x59\xf9\x7a\x59\x86\x8e\x29\x76\x04\x03\x4a\xe3\x20\x2f\xab\x62\x93\x65\x43\xb5\x36\x42\xf7\x1d\xce\x38\xec\xc9\x53\x87\xcb\xf4\xf9\x3a\x77\xa6\x35\x03\xe7\xa7\x5d\xe5\x1b\x0d\xbe\x6f\xb2\x8a\x06\x41\xba\x49\x7e\x65\x6b\x39\x03\xfe\xe9\xf5\xc5\xbb\x47\x0a\x5c\xac\xc6\x9f\x88\x86\x56\xbf\x10\xc4\x55\xf5\x9b\xc5\xe8\xb9\x3b\x3e\x46\x71\x58\x2c\x97\x4b\x47\x0a\x57\x36\x33\x5d\xca\x2e\x23\x64\x0b\x3b\xa9\x80\xe8\x77\x6e\xea\x03\x3e\x7a\x16\x07\xd8\x70\xed\x33\x2a\x0f\x51\xae\x5f\x2c\x5b\x40\x63\x34\x84\x86\xf4\x9d\xe5\xda\xc2\x2c\x0f\x8b\x32\xcd\xc3\x6b\x3b\x05\xda\x48\xc5\xc5\xde\x2d\xb9\xee\x7a\x39\x68\xd9\xab\x1a\xae\x73\xb8\xb8\xe6\x4f\x2f\x37\x2f\x85\xb7\x77\xd6\x99\x33\xd3\x86\x3a\xa6\x7e\x0b\xad\xc4\x51\x64\xe4\xb9\x56\x95\xf8\x38\x91\x1d\x28\x37\xd3\x26\x3e\x75\xa0\x70\xf9\x72\x8c\xc2\x51\x39\x4c\xd2\x69\x1e\x0f\xd5\x28\x4e\xa2\x3e\x28\x29\xf8\x1f\x98\x27\x0d\x6a\x98\x76\x7f\x75\x73\x37\x4e\x9f\xa2\xe4\xd2\x66\xb3\x5c\x37\x70\x5a\xdc\xb9\xd3\xf3\xfc\x2c\xe7\xd7\x6b\xa7\xe4\x81\x6f\xb9\xd1\x04\xcf\xb8\x18\x3b\x25\x8f\xa4\x95\xfb\x3d\x56\x89\x8b\xdf\x3e\xb3\xad\x78\xf7\x35\xd7\x5e\x10\x15\x56\x05\x2e\xa5\x01\xd7\x66\xae\x89\x61\xfa\xed\x52\x06\xd0\xf4\xc7\x31\xb0\xda\xeb\xbd\xac\xab\x20\x4d\x1e\xa3\xa7\xf9\xb5\x12\x2c\x55\xf9\x6a\x0e\xce\x06\x97\xcf\xec\xf2\x52\xd1\x3f\xaa\x56\x03\x5d\x2b\x4f\x47\x2b\x28\x2d\x13\x9f\xae\x1a\xef\x70\x3e\x4c\x38\x31\x1e\x08\x03\x0a\x1a\x7c\x62\x68\xd8\x5b\x97\x08\xa1\xe5\xb5\xd1\x33\x29\x2d\x76\x4c\xed\x7c\xec\x2b\xe9\xce\x9f\x2b\x6c\xcf\xb8\x98\x7e\x99\x58\xbe\x4f\xa2\x0c\x97\x67\x44\x58\xd7\x7d\xc7\xa1\x21\x4c\x34\x0b\x90\x0a\xac\xa7\x66\x80\xf8\x97\x4e\xca\x16\xdd\x64\x69\x1a\xdf\xcc\x51\x94\x11\x3c\xb3\x18\x3e\x37\x74\x64\x7a\x0e\x0d\x23\xfd\x3c\xe2\x34\x61\x86\xa5\x44\x1b\x75\xf2\x70\x1a\x16\x65\xfe\x7a\xfd\xfa\x2c\x97\xbf\xa6\xc8\xdd\xf0\x80\x67\xaa\x3e\x70\x03\xb5\xe9\x15\x58\xc1\xbe\x5e\x78\xfe\x17\x00\x00\xff\xff\x97\xad\xeb\xdb\xd0\x11\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4560, mode: os.FileMode(420), modTime: time.Unix(1615878047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x5f\x53\xe2\x58\x16\x7f\xcf\xa7\xa0\xa0\xe6\x6d\x77\x6b\x9f\xfb\xed\x76\x88\x9a\xed\x90\xa4\x92\xe0\xac\xfb\x92\x72\x68\x76\xd6\x1d\x05\x4a\x74\xab\x76\x9f\x86\xf6\x0f\xe0\x80\xb8\xdd\xea\xb6\xca\xb4\x60\x6b\xb7\xa3\x03\xf8\x67\x5a\x68\x40\xfd\x32\xb9\xf7\x26\x4f\x7e\x85\xad\x7b\x6f\x12\x02\xb4\xd3\x3e\x8a\xe7\x77\xce\xb9\xe7\xcf\xef\x77\x12\x49\xa4\x17\x16\xd2\x29\x4e\x06\x31\xc1\x14\xfe\x2a\xea\x86\xfe\x2c\x14\x86\x5b\x65\xfc\xf1\x02\xb6\xaf\x60\xe3\x2d\xac\x9e\x86\x39\x51\x35\x65\xc5\x18\x18\xd8\xad\x36\xac\x9e\xe2\xeb\x1e\xee\x1d\xda\xcd\x3b\x7c\xdb\x74\xea\x9f\x9c\x9f\x8f\x60\xfd\x1c\xae\xef\x59\xbd\x37\xb0\xfb\x46\x54\xc3\x1c\x17\x49\xcc\x2f\x67\x97\x92\x8b\x1c\x2f\xc5\x75\x43\xd0\xcc\xa8\x20\x09\x86\x60\x4e\x00\x51\x12\xa2\xcf\x42\x61\xf4\xbf\x1a\xba\xde\x81\x85\x9a\xb3\x77\x0c\x6f\xdf\xc0\x62\x19\x6f\xdc\xa0\x1f\x73\x78\x7f\xd5\x39\x58\xc7\x77\xc7\x61\x1f\x2a\xea\x34\x09\x2d\x2e\xcb\xa2\x3c\xf9\x2c\x14\x66\x06\x56\xa7\x0c\xab\xa7\xf6\xfd\x96\x5d\x2f\x59\x9d\xc6\x43\x3f\x37\x06\x91\x14\x1e\x48\xe4\x5d\xad\x3e\x5c\x3b\x61\x30\x37\x70\x39\x8f\xbb\x1f\x69\xa2\x8b\xc9\x97\xc9\xd4\xd2\xdc\xec\x3c\x37\x94\xa3\xa9\x09\xba\x12\xd7\x78\x81\xe0\x59\x9a\xc7\x97\xf6\x6f\x27\x0f\xfd\x9c\xdd\x3a\xc1\x1f\xdf\x3a\xaf\x4f\xac\xce\x4f\xa8\x5a\x84\x6b\xd7\x76\x6e\xdb\xea\xf4\x50\xb5\x1b\x7e\xc4\x89\xf9\x37\x45\x7e\xaa\x27\x58\x69\xe1\xed\x53\x58\xa2\xce\x26\x40\x5c\x32\x4c\x5e\x13\xa2\x82\x6c\x88\x40\x32\x79\x20\xd3\xb7\xb1\x38\xa4\x1a\xbd\xb7\x76\xf3\x18\xe6\x1b\xa8\xdc\xb4\x3a\x65\x7b\xe5\x96\x05\xa1\x05\xa1\xfd\xe5\xa7\x04\xfe\xc5\xa0\xf4\x2c\x22\xeb\x35\x03\x58\x9d\x4d\xbc\x7d\x8a\x0a\x6d\xf2\xe3\x41\x07\x6e\x95\xc2\x9c\x0a\x74\xfd\x5b\x45\x8b\xfa\x01\xe5\xb8\xc4\x6a\xb9\x8e\x6b\x39\x0f\xd7\xc5\xbf\x74\x69\x20\x55\x13\xa7\x81\x21\x98\x2f\x84\x99\x51\x84\xf7\xc2\x11\x04\xc7\x45\xfe\x91\xce\x2e\x71\x53\x8a\x6e\x98\x40\xd2\x04\x10\x9d\x19\x4c\x1a\x2b\x67\x60\x14\xdd\xba\x52\x6b\xff\x29\xe3\xe5\xf4\x71\xb8\x57\x61\xe5\xf4\xc6\x69\xdc\x81\xf9\x7c\xc6\x54\x35\xe5\x2f\x02\x6f\x3c\xd5\x57\xfd\x33\x3e\x68\xd2\xf4\xf5\x19\xdd\x10\x62\xa6\xbb\x21\x13\x4a\x5c\x8e\xba\x0b\xb2\x56\x60\xeb\x80\xaa\xbf\xa2\x6a\x57\x54\x59\x23\x14\x62\x0a\xa6\x81\x28\x81\xe7\x12\xe9\x9b\xa8\x86\xec\x4f\xab\xa8\xbb\x45\x2a\x73\x73\x1d\xe6\x44\x9d\x0d\x2c\x4d\x91\xfa\x72\x33\xb0\x3a\x9b\x6c\xb5\x42\xa2\x1a\x82\xeb\x57\xf8\x2c\xf7\xd0\x2f\xa1\xea\x99\xbd\x72\x8b\x0a\x5b\x70\xe3\x10\xb5\x7b\x70\xa3\x16\x66\xb5\x14\x63\xaa\xa2\x19\xa6\xa0\x69\x8a\xe6\xf5\x00\x55\xcf\x50\xf1\x0e\x16\x2e\x60\xa5\xc5\xb6\x01\xef\xaf\xa2\x9d\x0b\x54\x6e\xd2\xb7\xb6\xd1\xfb\x1f\xd1\xe1\x09\xfb\x17\xda\xcd\x5b\xbd\x1b\x9a\x76\xd0\x21\x71\x65\x4e\x03\x29\x4e\xb2\xff\x26\x1b\xb2\xeb\x25\x54\x2d\xe2\x5f\xba\xcc\xcf\xb0\xf1\xb7\x9a\x22\x4f\x9a\x13\x8a\x16\x03\x86\x6f\x8e\xcf\x5b\xb0\xf2\x1e\xd5\xfa\xb0\x5f\xb1\x3a\x65\xd4\x78\x8f\xeb\x23\xb8\xc0\xa4\x07\xeb\xea\x86\x2b\xde\x91\xad\x2f\x5c\xc0\xd6\xba\xf3\xfa\x64\x18\xe9\xf6\x54\x8e\xc7\x48\x33\xd7\x2e\x43\x2e\x86\x26\xc7\xa2\xc1\x4e\xe7\xa1\x5f\xb2\xdb\xd7\xf6\x7d\xfe\x8b\x60\x1d\x4c\x0b\xfe\xf0\x11\x07\xd6\xfd\xcf\x64\x00\xdd\xa1\x28\xc1\xcd\x43\x78\x50\x7b\xe8\xef\x7f\x93\xa5\x03\xbc\x9c\x4d\x2e\x0e\x36\x85\x24\x1c\x03\x06\x3f\xe5\xaf\x89\xb3\xbd\x67\xb7\x5a\x61\x4e\xd1\xc4\x49\x51\x76\xdf\xe4\x9b\x6c\x1e\x0e\x5b\xc5\xf5\x01\x75\x01\xde\x10\x69\x2e\x6c\x31\x51\xf5\x0c\x6e\x11\x5a\x60\xdd\xb2\x73\xdb\x84\x84\x9b\x75\xbc\xb5\x0e\xff\xfb\x96\xb6\x8a\xa2\x83\x35\x23\x4c\xd7\x38\x66\x78\x6a\x01\xa2\x31\x51\x7e\x8c\x40\x42\xb3\x2f\x17\xe6\x52\x21\x66\xce\x96\xd5\x3e\x3a\x0f\x50\x49\x30\x3b\x4d\x90\x80\x21\x44\x03\xdb\xe3\xa6\x79\x55\xf7\x69\x8c\xed\x4a\x98\x93\xa2\x40\xf5\x83\xc6\xd5\x28\xa0\x41\xc9\xaf\x43\xc1\xac\xfb\x26\xda\xfe\x4c\x23\x4d\x0b\x9a\x38\x31\x63\xf2\x4a\x34\x20\x18\xce\x59\xc9\x6e\xe5\x02\xd5\x12\x62\x40\x94\xcc\xa8\xa8\xbb\xfb\xe4\xbc\x6a\x5a\xbd\x1b\xa6\x4a\xf6\xd1\x39\xfe\x90\x7b\xac\x5c\x1e\x36\xd8\x0c\x86\x86\xa5\xcf\xce\x5a\xd9\xe7\x00\x97\x3f\xfd\x06\xeb\xe4\xaf\x01\x8f\x7a\x94\xe9\x93\x28\x6b\xa7\xc7\xa0\xc3\x58\xba\x8e\x41\x14\x2a\xec\x0e\xb7\x9f\x25\x45\x19\x90\x25\x84\x9b\x97\x01\x02\xe4\xb8\xc8\x62\xf2\xfb\xb9\x74\xca\x63\x32\x4d\x98\x14\x15\xf9\x49\x72\x05\x4b\x5d\x78\x78\x18\x64\xb2\x80\xc8\x70\x91\xff\xa4\x53\x49\xcf\x2b\x11\xaa\xa7\xf9\xf4\x3c\x0c\x11\xe4\xca\x29\xbe\xbd\xb2\x9b\x75\x58\x78\x3d\x2c\xc7\x8c\x87\xec\xcd\x36\xac\xec\xb2\x25\x66\xc4\x1c\xa4\x1f\x67\xad\x8c\x6f\x19\xbd\x8a\x31\x30\x29\x3c\x06\xdc\xa9\xc2\x95\xca\x63\x40\xd5\xd4\xa7\x14\x8d\x94\x50\xcc\x84\x3c\x6e\xe5\xb8\x48\x3a\x93\x4c\x65\x97\x66\x13\x3f\x70\x93\x82\xe1\x15\xcf\xeb\xca\x80\x59\x68\xa5\x48\x51\x32\x8b\xe9\x7f\x26\x13\x4b\xb1\xe4\xc2\x77\xc9\x45\x7f\xfa\x41\x34\xd0\x7a\xfa\x70\x8f\x7b\x7d\x84\xaf\xda\xee\x76\x3c\xb6\x71\x6c\x41\xc6\x24\xdb\x43\x4d\x01\xdd\x74\x0b\x48\x20\xd4\x38\xa8\x68\x0f\xfd\xdc\x18\x96\x8b\xa4\xd2\x2f\x93\x9c\x4c\x36\xc7\x93\x54\xf7\x6e\x32\x0d\xa0\xbf\xa0\xcc\x78\x63\xf5\x76\xed\x8d\x57\xf8\xd5\x67\xb4\x73\xe1\xe4\x2b\xe8\x4d\xd9\xba\xad\x12\x7a\xac\x9e\xa2\xe2\x47\xbb\x5e\xfa\x43\xc8\x6e\xb5\x71\xa3\x08\xef\xd6\x60\x73\xc5\xea\xfd\xca\x7e\x86\xcd\x12\x6a\xed\xfc\x89\x84\xf9\x6e\x36\xf1\xc3\x72\x06\x24\x12\xe9\xe5\xd4\x12\xa7\x02\x0d\xc4\x4c\x21\xa6\x1a\x33\x24\x42\xe5\x15\xda\xb9\xf0\x2a\x4f\x1e\xae\xc7\x55\x95\xb5\x84\xf0\xf0\x76\x0b\x95\xc8\x9d\x87\x2f\x7b\xf0\xdd\x4f\x61\x6e\xe4\x3c\x41\xb5\xba\x73\x56\x0a\xec\xa0\x3b\x98\xcf\x01\xff\x22\xae\x9a\x80\xe7\x95\xb8\xfc\x54\x09\x87\xc7\x79\xab\x77\x6b\xff\xf6\x01\x56\xda\x8f\x08\x39\x17\xc9\xcc\xcf\xa6\x46\xee\xb6\xaf\xb8\x0d\x8e\xf9\xb8\xdb\xc0\xfd\xfb\x9c\xd6\x89\x73\x73\x9f\x10\x25\x41\x0f\x9e\x46\xee\xb9\xe0\xfa\x27\xa9\x32\xed\x85\xeb\x65\x58\xc8\xa3\xf2\x51\x30\xff\xa1\x7d\x62\x1e\xfd\x63\x98\x75\x8f\x59\x7f\xe1\x18\xd6\x04\xdd\x50\x34\x61\xc4\x1c\xe5\x8e\xe0\x71\xd9\x33\xf7\xe7\x57\x4b\x66\xd3\xcb\x8b\x89\xe4\x78\x49\x02\xcf\xf8\x9d\xe4\x83\x4d\x1b\xb9\xb6\x06\xf3\x3c\x74\x5b\x5d\xbe\xb3\xba\x9b\x23\x53\x6d\xdf\x1f\x10\xf5\x6e\x1c\xb3\xf1\x74\x53\x9c\x7f\x39\x9b\x61\x8a\xe2\xcb\x91\x7b\x96\x6e\x95\x50\xe3\x04\x16\x2e\xc8\x60\xb9\xb2\xd2\xfd\xb3\xab\x3e\x92\x32\x29\xca\xa3\x08\x5f\x7c\x18\xc1\xd2\x00\xd4\x7a\x20\x29\xec\x43\x07\x7f\xc8\xa1\xc6\x11\xf9\x17\x83\xe0\xbd\x9e\xb3\xb7\x1e\x7a\x44\x86\xb9\x48\x62\x2e\xcb\xf1\xa2\x4e\x17\x6e\x74\x0b\x49\xa6\x1e\xa5\xa3\xe2\x39\xaa\x54\xac\x4e\x03\xef\xaf\x5a\xbd\x1e\xdc\xa8\x13\xf4\xbf\x16\xf8\x74\xea\xef\x73\xdf\x73\xd3\x31\x93\x57\xe4\x09\x71\x72\x70\x14\x33\x9a\x0b\x68\xc2\xc0\x66\xf4\xfb\xca\x37\x1d\xd4\x37\x30\xb3\x5f\xa9\xf2\x5c\x86\xd0\xe8\xe0\xb3\x90\x9e\xb3\x78\x7f\x55\x54\x51\xf3\x13\xd1\xb9\xf6\x15\xaa\x16\xe9\x5f\xfe\x39\x6a\xb7\xda\x4e\xbe\x8c\x76\x2f\x98\xb5\xff\xed\x38\x72\xf2\x92\xa3\xec\xe8\x1c\x96\x6b\x54\x9c\x4b\xfe\xa1\xe1\xe4\x37\xd0\xf6\x1d\x0b\xfe\xc7\x4c\x3a\x3d\x4f\xf0\xaa\xa2\x48\x63\x2f\x13\x33\x21\x74\x59\xfb\xa2\x96\x91\xab\x38\xf0\x5d\x19\x76\x25\x33\xbb\xb4\xf8\x6f\x8e\x10\xbe\x6e\x68\x33\xe3\x9f\x1a\x76\xeb\x04\xbd\xbb\x41\xef\x5c\x42\xa2\xdd\x20\xd7\xb6\x1b\xc2\x93\xdf\xff\x07\x00\x00\xff\xff\xa5\xcf\x00\x30\x33\x0f\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3891, mode: os.FileMode(420), modTime: time.Unix(1615878001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
