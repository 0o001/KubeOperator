// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcd\x72\xa3\x3a\x16\xde\xf3\x14\x0a\xae\xde\xf5\x74\xdd\x75\x76\x34\x26\x09\xd3\x36\x50\x80\x73\x27\xb3\xa1\x64\x38\xb6\x35\xc1\x12\x25\x89\x64\x7c\x77\xf3\x5e\xf3\x4e\xf3\x0a\x53\x47\x12\x18\x6c\xe7\x76\xba\xee\xaa\x93\xb4\xce\x8f\xce\xcf\xf7\x7d\x62\x51\x8b\xe3\x51\x70\x2f\x09\xd6\x51\x15\xfd\x23\x2e\xca\xe2\x9e\xf8\x09\x3d\x02\xa1\xad\x04\xda\x9c\x08\xfc\x9b\x29\xad\x7c\x2f\xce\xaa\x24\x2d\xcf\x87\xb2\x16\xa8\x02\xb2\x63\x6d\x4b\x18\x27\xfa\x00\x44\xc2\x9e\x29\x2d\x4f\x24\xce\x88\xb0\x7f\x52\x27\xa5\xe1\x48\x14\x68\xcd\xf8\x9e\x74\x74\x0f\xbe\xe7\x79\x8b\xba\xed\x95\x06\xe9\x85\xab\x4d\x51\x46\x79\xb5\x8c\x56\x51\x19\x55\x0f\x41\xbc\x8a\x96\xf7\xc4\xaf\x29\x27\x5c\x68\xd2\x40\x0b\x1a\x88\x3b\x8e\x81\xea\x5e\x4a\xe0\x9a\x28\x4d\x35\xf8\xa3\x83\xb8\x30\xe9\xe5\x9b\x24\x89\x93\xc7\x7b\xe2\x97\x87\x89\x99\x32\xce\x64\xcf\x39\xe3\xfb\x2b\xa3\x55\x1a\x06\xab\x7b\xe2\xc7\xc7\x4e\x48\x3d\x5a\xd5\x94\xa3\xd5\x16\x48\xdf\xed\x25\x6d\xa0\xf1\x31\x73\x09\x0d\x70\xcd\x68\xeb\xcd\x92\xae\xf2\xa8\x48\x37\x79\x18\xdd\x13\xff\x81\xb2\x16\x1a\xa2\x85\xcb\xff\x8e\x94\x07\x90\x80\x79\x50\x4e\xa8\x52\xa2\x66\x54\x43\x43\x0e\x42\x69\xd2\xf3\x06\x24\xd1\x07\xa6\xc8\x2b\x9c\xfc\x0f\xdc\x56\xff\x4c\x93\x5f\xf2\xfd\x87\xe0\x70\xc3\xf7\x43\xb0\x59\x95\x55\x98\x47\xcb\x28\x29\xe3\x60\x55\x85\x41\x62\xaa\x60\xc3\xde\x13\x7f\x09\x3b\xda\xb7\x9a\x9c\x6f\x3a\x29\x85\x0d\xda\xf8\x76\x64\xc2\xa7\x28\xfc\x71\xee\x9a\xa9\xf9\xd9\x8a\xe3\x1c\x9d\x4d\xcd\x3c\x98\xd1\x52\xe6\xe7\x5e\x81\x34\x67\x7c\x2f\x0b\x8a\xe2\xf7\x34\x5f\x8e\xc9\x24\x9b\x15\x76\xa4\xa3\x4a\xbd\x0b\xd9\x90\x61\x1e\xb6\x40\xb6\x2d\xe5\xaf\xff\xfb\xef\x7f\x7c\x2f\xcb\xe3\xe7\xa0\x8c\xaa\x1f\xd1\xcb\xa5\x21\x66\xd2\x49\xf6\x46\x35\xe0\xc5\x27\x59\x9c\xcd\xbd\x05\x96\xdf\x7b\x4a\x8b\xb2\x0a\x56\x79\x14\x2c\x5f\xce\xe3\xfd\x84\x9d\xb9\xdc\x01\xd7\x19\x63\x31\x5e\xfa\x66\x43\x6c\x67\xb1\x27\xce\xc5\xa4\x31\xef\x4c\x1f\x4c\x01\xdc\xa0\xdd\xf2\x5b\x7d\x7f\xa9\xb2\x3c\xfd\x7b\x14\x96\x7f\x29\x44\x27\xc5\xbf\xa0\xd6\xbe\x57\xbc\x14\x65\xb4\xae\xdc\x16\x3f\xa4\x9b\x64\x79\x7b\x89\x5b\x51\xd3\x16\x37\x78\xc7\xa4\xd2\xa6\x50\x49\x8a\x76\xc1\x73\x10\xaf\x82\xef\x2b\x1c\x91\x44\x90\xb8\x23\xf4\x8d\xb2\x96\x6e\x5b\xf0\xbd\xb8\xb0\x5b\x64\xee\x30\xd9\x5f\x66\x57\xca\x3a\xc5\x84\x7d\x5b\xef\x78\x9d\xa5\x79\x59\x45\x79\x9e\xe6\x43\xcf\x12\x41\x1a\xaa\x29\x5e\xd3\x99\xbd\x53\x45\x76\xa2\xe7\xcd\x1d\x71\x99\xd6\x07\xa8\x5f\x4d\x9e\xee\xc8\x8e\xb5\x70\x37\x77\x8a\xee\xaa\xe7\x60\xb5\xc1\x4c\xa3\x63\xa7\x4f\xd6\xaf\xe0\xa4\x65\x1c\xc8\x17\x35\x3f\xff\x7b\x9e\x26\x8f\xd5\x43\x9a\xaf\x03\x4c\x3d\xe6\xb5\x90\x12\x6a\x4d\x6c\x00\x21\x8f\x54\x7f\x68\x3c\x59\xa4\x69\x61\xc3\xc9\x16\x08\x6d\x2f\xf1\xa1\x0f\xd7\xe8\x79\x67\x6c\xe3\x3e\x61\xed\x06\x26\xd9\xac\xef\x89\x1f\x10\x2d\x34\x6d\x89\xd8\x91\x2f\x8a\x48\xf1\xae\xf0\x47\x73\x7d\x2a\x81\xd0\x2d\xc7\xeb\xb4\x5f\x89\x7a\x65\x9d\xf3\x33\x22\xcc\x30\x7a\x71\x32\x9f\xeb\x2d\xe3\x0e\xaa\x24\x28\xd1\xcb\x1a\x93\xf8\x4a\x24\x50\x25\xf8\xfd\x07\xf9\x14\xc1\xf3\x1c\xae\x14\x7d\x73\x33\x7b\x61\xec\x79\x0b\x84\x82\x33\x08\x60\x1d\xd6\x41\x19\x3e\x0d\x8b\x3c\xa0\x00\x53\x84\x0d\xdd\xf1\xbd\x34\x8f\x1f\xe3\xc4\x15\x7e\x7a\x5e\x48\xb6\x67\x9c\xb6\x1f\x19\x6e\x8a\x33\xf6\x07\x61\x19\x9b\x44\xcb\x01\x91\x1c\x59\x00\xc7\xc9\x9e\x4c\x9e\xe0\x9a\xd6\xda\xcc\x1e\x6d\x8e\x8c\x23\xd5\x51\x2d\xe4\x9d\x73\x38\xed\x5e\x22\x88\xea\xeb\x83\x71\x68\x56\x28\x58\xae\xe3\xe4\x1a\x6a\x31\x68\xe3\xe0\xd6\x38\xb5\x29\x5c\xc1\xed\xdd\x3c\xe9\x3c\x5a\x05\x65\xb4\x9c\x20\xc4\x06\xcd\x0e\x14\x53\x9f\xe2\x80\x5b\x7f\x93\xc2\x6a\x19\x64\x63\x06\x9b\x6c\x19\x8c\x19\xb4\x0d\xed\x2e\x03\x43\xc3\x6c\xdc\xe7\x28\x8f\x1f\x5e\xaa\x30\x5d\x4e\xe8\xf9\x19\x24\xdb\xb1\x9a\x6a\x26\x38\xa9\x45\x03\x04\xa4\x14\xd2\xf7\xa2\x75\x10\xaf\xaa\x65\x5c\x38\xa0\x58\x53\xd6\x0e\xec\xaf\xcc\x08\x36\x4c\x7d\xb2\xb0\x83\xb7\x69\x7b\xa3\x23\x3a\x3c\x52\x5d\x1f\xc8\xce\x8c\x96\x45\x28\x24\xa3\x71\x7e\x0a\xfc\x6d\xcc\x15\x4b\xf3\x27\x4c\x34\xcc\xc8\xa5\x13\x03\x4d\xf7\xc4\x7f\x97\x82\xef\xcf\x5c\x45\x84\x9c\x98\xd8\x04\x0d\x69\x8c\xc9\x5d\x92\x86\xb7\x40\x5d\x24\xf8\x80\xf2\x79\xf4\x18\xa7\xc9\x67\x55\x03\xb1\xc6\x3f\xc3\x79\x24\x7b\x0c\x85\xff\x0e\x81\x50\x30\x7c\x3a\x8c\x51\x0b\x3f\x23\x93\x96\xf2\xb9\x78\xb2\xc0\x1d\xda\xc2\xee\x41\x4f\x69\xed\x06\x66\xd7\x82\xef\xd8\xbe\x97\x66\x6e\x4c\xe3\xe2\x75\xf0\x18\x7d\xec\x8a\x1d\xe9\x1e\x3e\xe7\x28\xab\x8a\xa7\x34\xb7\x00\xae\xfa\xdd\x8e\xd5\x0c\x65\x62\xdc\x61\x59\x44\x07\x5c\x69\x5a\xbf\x7a\x8f\x51\x39\x74\x60\xe8\x70\x22\x86\x22\x1b\xa0\xc5\xf3\x6e\x6f\xd6\x70\xdc\x82\x1c\x57\x2f\x58\xe2\x3c\x7d\x51\x64\xdc\xb6\x2d\x00\x27\xb4\x31\xd2\x70\xba\xa0\x03\x0e\x7c\x51\x33\x4c\x31\xfe\x9d\xf6\x70\x21\x46\x45\x36\x90\xc0\x87\x72\xcc\x19\xdc\xd2\x62\x83\xed\x53\x50\x54\xae\x3d\x13\x0a\x99\xb4\x72\x6c\x4d\x78\x03\x61\xbc\x05\x17\x0d\x78\x09\x6e\xfa\xa0\x87\x9c\x9e\xae\xca\xa0\xf8\x81\xf4\xd2\x34\x04\x0f\xe1\x16\x38\x69\x6e\x7e\x1d\xa6\xc6\x29\xec\xaf\x9d\x6d\xd8\x3b\x65\x9a\x30\x4d\x1a\xc1\xe1\x1b\x06\xd8\xd2\xfa\xb5\xef\x82\xba\x16\x3d\xd7\x5e\x16\xe4\xc1\xba\x8a\xd6\x59\xf9\x72\xd9\xb6\x8e\x4a\x7a\x04\x0d\x52\xa1\xfc\x28\xab\x62\x93\x65\xb6\xbb\x1b\xae\xfa\x0e\x99\x19\x67\xf8\xd4\xe1\x13\x60\x2e\x42\x67\xd8\x64\x31\x62\x54\x58\xdf\x83\xf0\xc7\x26\xab\x82\x30\x4c\x37\xc9\xaf\x68\xad\x59\xe2\x9f\x16\x5d\xde\x02\x57\xe6\x42\xd0\x7f\x22\x1a\x5a\xfd\x42\x10\xd7\xd5\xef\x26\x47\xcf\xdd\xf1\x21\x5e\x45\xc5\x54\x12\xbb\x25\x72\x6d\xd3\xe3\xa5\x8c\x84\x22\x5b\xd8\x09\x09\x44\xbd\x33\x5d\x1f\xf0\xa9\x36\x39\x40\xed\xb5\x67\xab\x6f\xa3\x5c\xbf\xb3\xb6\x80\xc6\x68\x08\x0d\xe9\x3b\x33\xec\x13\xb3\x3c\x2a\xca\x34\x8f\xae\xed\x24\x28\x2d\x24\xe3\xfb\xf9\x7a\xe4\x4e\x70\x5c\xd7\x70\x72\xcd\x9f\x5e\xee\x2c\x65\x6f\x2b\xed\xf3\xce\x8c\xba\x7a\x28\xfd\x16\x5a\x81\xd4\xa5\xc5\x1c\xdb\x4a\x7c\x52\x89\x0e\xa4\xe3\xc0\x71\x9f\x3a\x90\x28\x19\xcd\x46\x59\x59\x74\x05\x09\x4f\x4e\xb8\x8f\x90\xe0\x7b\xa3\x06\xb3\x30\x13\xb9\x93\xc3\xf5\xcd\x30\x58\x98\xc9\x56\x41\x72\xc3\x67\xe6\x46\x66\xe2\xf3\x62\xd8\xaf\x6d\xbe\x5f\x0e\xf5\xc4\xd8\x5b\xa0\x2a\xb0\xa2\x61\x44\x36\x3b\x48\xc5\x89\xd7\x07\x29\x38\xfb\x03\x5b\xac\x40\x5a\x62\xff\xcd\x49\x8c\x55\xfa\x18\x27\x97\x36\x9b\xa9\xb2\x42\x62\xbc\x73\xa7\xcf\x52\xa1\x3c\x7f\x2e\xe8\xa4\x38\xb0\x2d\xd3\x8a\xe0\x19\x17\x63\x27\xc5\x91\xb4\x62\xbf\xc7\x01\x63\xfc\xdb\x67\x84\x99\xb7\xa8\x99\xf2\xc2\xb8\x30\x00\x76\x89\x6a\xf8\x4e\x61\x8a\x68\xaa\x5e\x2f\x11\x0c\x4d\xdf\x8e\xa1\xa1\x19\xef\x79\x5d\x85\x69\xf2\x10\x3f\x9e\x9f\x87\xe1\x94\x80\xae\x28\xff\x6c\x70\xf9\x5d\xa3\xbc\x24\xaf\x8f\x06\xad\x81\xae\x15\xa7\xa3\xc1\xc2\x96\xf2\x4f\x0e\x9c\xb7\x60\x1d\x52\xe1\x98\x27\xc6\x03\xae\x41\x42\x83\x6f\x3a\x05\x7b\xe3\x12\x53\x68\x59\xad\xd5\x19\x4f\x4c\xee\x58\xda\xf3\xb1\xaf\xa4\x9b\xbf\x0f\xe9\x9e\x32\x3e\x7e\x0a\x9a\x3e\x08\xe3\x0c\xdf\x1b\x98\x61\x5d\xf7\x1d\x83\x86\x50\xde\x4c\x92\x94\x60\x3c\x35\xc6\x38\x4e\x9e\x83\x55\x8c\xe5\x88\x3b\x2b\xcd\xdf\x68\xcb\x9a\x81\xc7\x27\x4f\x78\xde\x23\x01\xe3\x13\x66\x0f\x1c\xaf\x6e\xaf\x41\x9b\x46\x82\x52\x60\x22\xfe\xf6\xed\x5a\x1f\x28\x4d\xa5\xb9\x8c\x3b\x69\xb2\x51\xfd\x96\x03\x0e\x9e\x29\xd3\xdf\x3a\x21\x5a\x0c\x97\xa5\xe9\xea\x66\x9f\xe2\x8c\xe0\x99\x09\xd1\xdf\x80\xe1\xf1\x0d\x6c\x15\xd4\xfc\xd6\x23\x41\x5b\x0d\xa8\xb4\x3c\x79\x28\x3e\x8a\x32\x7f\xb9\xfe\xe4\x50\x4e\x3f\xa1\x89\x9d\xfd\x6a\x43\x65\x7d\x60\x1a\x6a\xdd\x4b\x30\x7c\x77\x43\x5f\x3a\x50\x1a\xb1\x72\xc0\xdb\x2c\x4f\x9f\xe3\x65\x94\x8f\x4a\x67\x8a\xb9\xb5\x04\x73\x13\x6c\x6b\xaf\xc5\x91\x6a\x56\x93\x23\x92\xb9\xcb\xff\x48\x79\x4f\xdb\xf6\x84\x7f\x64\xbb\xd3\xfc\x01\xa8\x26\x90\x55\xbe\x64\xd1\x2c\x84\x41\x2a\x9b\xac\x5b\xf9\x91\xb2\xef\x48\xca\xdb\xd3\xf0\xbb\x22\x88\x90\x5f\xc9\x1c\xa9\x7e\xce\xd6\x67\xbc\xde\xfd\x09\x5b\x13\x83\x03\xb0\xbf\xc5\x9f\xc8\x54\x33\x72\x3b\x73\x17\xad\xb5\xf9\x6e\x64\xf7\x49\x81\x52\x28\xde\x8b\xa8\x28\x50\x34\xfe\x88\x5e\x66\x30\xea\xfe\xdf\x7c\x64\x72\x73\xec\xa4\x60\x96\xa7\x48\x4e\x93\x69\x1f\xce\xda\xa7\x96\xe0\x6f\x20\xd5\x54\xa4\x18\x33\xd4\x70\x49\x3a\x15\xec\xfd\xe4\x6d\x37\xd4\x1f\x87\xf8\xff\x01\x00\x00\xff\xff\x66\x17\x1c\x29\xbd\x15\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 5565, mode: os.FileMode(420), modTime: time.Unix(1620292802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x5b\x53\xdb\x48\x16\x7e\xd7\xaf\x70\xd9\x35\x6f\xb3\x5b\xfb\x9c\x37\xc5\x16\xa0\x45\x96\x54\x92\xcc\x2c\xfb\xa2\x62\x88\x77\x96\x0d\xd8\x14\x86\xad\x9a\x7d\x8a\xc3\xc5\x36\xb1\xb1\x27\x01\x36\x80\x13\x30\x81\xe0\x81\xf8\x02\x4c\xb0\xe3\x0b\xfc\x19\x75\x4b\x7e\xe2\x2f\x6c\x75\xb7\xd4\x6e\xdb\x21\x61\x1f\xb1\xce\x77\xfa\xf4\xb9\x7c\xe7\x6b\x02\xb3\xf1\x85\x85\x78\x8c\x93\xf9\xb0\x60\x0a\x7f\x13\x75\x43\x7f\xe2\xf3\x83\x42\xce\x3e\xab\x83\xc6\x15\xa8\xbc\x05\xc5\xb2\x9f\x13\x55\x53\x56\x8c\xbe\x81\x53\x6b\x80\x62\xd9\xbe\x6e\xdb\xed\x43\xa7\x7a\x6b\x77\xab\xbd\xd2\xe7\xde\xbb\x63\x50\xba\x00\x1b\x7b\x56\xfb\x0d\x68\xbd\x11\x55\x3f\xc7\x05\x66\xe7\x57\x12\xcb\xd1\x25\x2e\x28\x45\x74\x43\xd0\xcc\x90\x20\x09\x86\x60\x8e\xf1\xa2\x24\x84\x9e\xf8\xfc\xf0\xbf\x47\xf0\x7a\x07\xa4\x8f\x7a\x7b\x27\xa0\xfb\x06\x64\x72\xf6\xe6\x0d\x7c\x91\xb4\xf7\xd7\x7a\x07\x1b\xf6\xed\x89\x9f\x42\x45\x1d\x07\xa1\x45\x64\x59\x94\xc7\x9f\xf8\xfc\xc4\xc0\x6a\xe6\x40\xb1\xec\xdc\x15\x9c\x52\xd6\x6a\x56\xee\x3b\xc9\x11\x88\xa4\x04\x79\x09\xdd\xab\xd6\x01\xeb\xa7\x04\xe6\x1e\x9c\x4b\xd9\xad\x33\x1c\xe8\x52\xf4\x59\x34\xb6\x3c\x37\x33\xcf\x0d\xc4\x68\x6a\x82\xae\x44\xb4\xa0\x80\xf0\x24\xcc\x93\x4b\xe7\x8f\xd3\xfb\x4e\xd2\xa9\x9d\xda\x67\x6f\x7b\xaf\x4f\xad\xe6\x2b\x58\xcc\x80\xf5\x6b\x27\xb9\x6d\x35\xdb\xb0\xd8\xf2\x3f\xe0\xc4\xfc\xbb\x22\x3f\xd6\x13\xc8\xd7\xec\xed\x32\xc8\x62\x67\x63\x7c\x44\x32\xcc\xa0\x26\x84\x04\xd9\x10\x79\xc9\x0c\xf2\x32\xbe\x1b\x39\x07\x65\xa3\xfd\xd6\xa9\x9e\x80\x54\x05\xe6\xaa\x56\x33\xe7\xac\x76\xc9\x21\x38\x21\xb8\xbe\xc1\x09\x21\x38\xd9\x4f\x3d\x39\x91\xd4\x9a\x00\xac\xe6\x96\xbd\x5d\x86\xe9\x06\xfa\xf1\xa0\x09\x0a\x59\x3f\xa7\xf2\xba\xfe\x93\xa2\x85\xe8\x81\x72\x44\x22\xb9\xdc\xb0\x8f\x92\x1e\xae\x65\xff\xde\xc2\x07\xa9\x9a\x38\xc5\x1b\x82\x39\x29\x4c\x0f\x23\xbc\x1b\x0e\x21\x38\x2e\xf0\xcf\x78\x62\x99\x9b\x50\x74\xc3\xe4\x25\x4d\xe0\x43\xd3\xfd\x4e\x23\xe9\x64\x5a\xd1\xcd\x2b\xb6\xa6\x57\x19\x4d\x27\xc5\xd9\xed\x3c\x49\xa7\xd7\x4e\xa3\x0e\xcc\xa7\xd3\xa6\xaa\x29\x7f\x15\x82\xc6\x63\x7d\x95\xbe\xd8\x07\x55\x1c\xbe\x3e\xad\x1b\x42\xd8\x74\x27\x64\x4c\x89\xc8\x21\x77\x40\xd6\xd3\x64\x1c\x60\xf1\x13\x2c\xb6\x44\x95\x14\x42\x41\xa6\xfc\x14\x2f\x4a\xfc\x53\x09\xd5\x4d\x54\x7d\xce\xe7\x35\xd8\x2a\xa0\xcc\xdc\x5c\xfb\x39\x51\x27\x0d\x8b\x43\xc4\xbe\xdc\x08\xac\xe6\x16\x19\x2d\x9f\xa8\xfa\xc0\xc6\x95\x7d\x9e\xbc\xef\x64\x61\xf1\xdc\x59\xed\xc2\x74\x01\x6c\x1e\xc2\x46\x1b\x6c\x1e\xf9\x49\x2e\xc5\xb0\xaa\x68\x86\x29\x68\x9a\xa2\x79\x35\x80\xc5\x73\x98\xb9\x05\xe9\x3a\xc8\xd7\xc8\x34\xd8\xfb\x6b\x70\xa7\x0e\x73\x55\x7c\xd7\x06\xfc\xf0\x02\x1e\x9e\x92\x4f\x70\x37\x65\xb5\x6f\x70\xd8\xac\x43\xe4\xca\x9c\xe2\xa5\x08\x8a\xfe\x87\x84\xcf\x29\x65\x61\x31\x63\xff\xde\x22\x7e\x06\x8d\x7f\xd2\x14\x79\xdc\x1c\x53\xb4\x30\x6f\x50\x73\xfb\xa2\x06\xf2\x1f\xe0\x51\x07\x74\xf2\x56\x33\x07\x2b\x1f\xec\xd2\x10\x8e\xe9\x74\x36\xaf\xee\x71\x99\x5b\x34\xf5\xe9\x3a\xa8\x6d\xf4\x5e\x9f\x0e\x22\xdd\x4a\x7e\x0b\x46\xca\x37\x08\x73\x5b\x41\x8e\x84\x51\x0f\xac\x5f\xfa\x5c\x0c\xbe\x13\x09\x12\x34\x9b\xf7\x9d\xac\xd3\xb8\x76\xee\x52\x2e\x98\xce\xb5\xd7\x49\x22\x3e\x8f\xd4\x8b\x94\x15\x39\xb2\xee\xde\xa1\xfe\x75\x7b\x2a\x0b\xb6\x0e\xc1\xc1\xd1\x7d\x67\xff\x87\xc4\x57\x83\xd0\xf9\x29\x81\x7a\xf9\x1e\x9e\xe3\x02\x2b\x89\xe8\x52\x7f\x50\xd1\xc5\xc3\xbc\x11\x9c\xa0\x53\xda\xdb\xde\x73\x6a\x35\x3f\xa7\x68\xe2\xb8\x28\xbb\x29\xa5\x26\x5b\x87\x83\x56\x11\xbd\xcf\x9c\x7c\xd0\x10\x71\x2c\x84\x17\x60\xf1\x1c\x14\x10\x2b\x91\x66\x71\x92\xdb\x68\x07\x54\x4b\x76\x61\x03\xfc\xf6\x16\x77\x0a\x46\xb3\xb9\x47\x44\x5b\x39\x21\x78\x6c\xc1\x87\xc2\xa2\xfc\x10\x7f\xf9\x66\x9e\x2d\xcc\xc5\x7c\xc4\x9c\x70\x85\x73\x7c\xc1\x30\x19\x1b\x9d\x26\x48\xbc\x21\x84\x98\xe1\x75\xc3\xbc\x2a\x51\x16\xf5\x6a\x2d\x85\x78\x95\x1e\x1a\x51\x43\x3c\x3e\x14\xfd\x3a\x70\x98\x75\x57\x85\xdb\x5f\xf0\x49\x53\x82\x26\x8e\x4d\x9b\x41\x25\xc4\xec\xab\xde\x79\xd6\xa9\x25\x99\x6c\x09\x61\x5e\x94\xcc\x90\xa8\xbb\xe3\xdc\x7b\x59\xb5\xda\x37\x64\x29\x3a\xc7\x17\xf6\xc7\xe4\x43\xe9\xf2\xb0\x6c\x31\x08\x1a\x64\xbf\xf4\xd6\x73\x94\x82\x5c\xfa\xa6\x05\xd6\xd1\x5f\x7d\x1a\xf7\x18\x9b\x72\x38\x29\xa7\x47\xe0\x83\x58\xcc\x06\x2c\x0a\xa6\x77\x07\xcb\x4f\x82\xc2\x04\x4c\x02\xb2\xab\x97\x0c\xff\x72\x5c\x60\x29\xfa\xcb\x5c\x3c\xe6\x11\xa9\x26\x8c\x8b\x8a\xfc\xa8\x6d\x09\xb2\x2d\x70\x78\xc8\x12\x29\xb3\xe3\xb8\xc0\x7f\xe2\xb1\xa8\xe7\x15\xed\xc9\xc7\xf9\xf4\x3c\x0c\xf0\xf3\x6a\xd9\xee\x5e\x39\xd5\x12\x48\xbf\x1e\x54\x03\x84\x06\x9d\xad\x06\xc8\xef\xba\x64\x80\xf7\x02\xcb\x7e\xbd\xf5\x9c\xdd\x25\xec\x2e\x86\xf9\x71\xe1\x21\xe0\x4e\x11\xac\xe6\x1f\x02\xaa\xa6\x3e\xa1\x68\x28\x85\xe2\xa2\xcf\xa3\x76\x8e\x0b\xc4\x17\xa3\xb1\xc4\xf2\xcc\xec\x73\x6e\x5c\x30\xbc\xe4\x79\x55\xe9\x13\x1b\xce\x14\x4a\xca\xe2\x52\xfc\x5f\xd1\xd9\xe5\x70\x74\xe1\xe7\xe8\x12\xed\x7e\x3e\xe4\xd2\x9a\x5b\x47\x7c\x77\x8f\xfd\xd9\x11\x61\x18\x90\x8e\x30\xd9\x00\x64\xf9\x7a\xfe\xa9\xc4\xf0\xe8\xf3\x81\xf9\x24\xe3\x34\xa2\x2f\x3c\xd4\x04\xaf\x9b\x6e\xba\x11\x04\x1b\xb3\xeb\xf7\xbe\x93\x1c\xc1\x72\x81\x58\xfc\x59\x94\x93\xd1\x9c\x79\xfb\xdf\x15\x79\xa6\xc1\xeb\x93\x98\x8f\x6f\xac\xf6\xae\xb3\xf9\xd2\x7e\xf9\x05\xee\xd4\x7b\xa9\x3c\x7c\x93\xb3\xba\x45\x44\xca\xc5\x32\xcc\x9c\x39\xa5\xec\x8f\x3e\xa7\xd6\xb0\x2b\x19\x70\xbb\x0e\xaa\xab\x56\xfb\x13\xf9\x19\x54\xb3\xb0\xb6\xf3\x67\x74\xcc\xcf\x33\xb3\xcf\x57\x16\xf9\xd9\xd9\xf8\x4a\x6c\x99\x53\x79\x8d\x0f\x9b\x42\x58\x35\xa6\xd1\x09\xf9\x97\x70\xa7\xee\xd5\x09\x5d\x5c\x8f\xa8\x2a\x29\x20\x62\xff\xed\x1a\xcc\x22\x51\x6a\x5f\xb6\xc1\xfb\x57\x7e\x6e\x48\x4b\xc1\xa3\x52\xef\x3c\xcb\x4c\xac\xdb\xc6\x4f\xf9\xe0\x64\x44\x35\xf9\x60\x50\x89\xc8\x8f\xd5\x1b\xe0\x24\x65\xb5\xbb\xce\x1f\x1f\x41\xbe\xf1\x80\xea\xe0\x02\x8b\xf3\x33\xb1\x21\x91\xf9\x1d\xb7\xec\x50\x8c\xba\x65\xc4\xfa\x53\x9c\x27\xce\x8d\x7d\x4c\x94\x04\x9d\xd5\x71\xae\xb6\x71\xfd\xa3\x50\x89\x50\x00\x1b\x39\x90\x4e\xc1\xdc\x31\x1b\xff\xc0\xf4\x11\x8f\x54\xb9\x93\xea\x11\xeb\xaf\x28\xf7\xff\xcf\x5a\x13\x74\x43\xd1\x84\x21\x73\x98\x3c\x06\x27\x39\xcf\x9c\x76\xbb\x16\x4d\xc4\x57\x96\x66\xa3\xa3\x09\x64\x2e\xfd\x8d\xab\xb2\x25\x1e\x12\x92\xfd\xee\x1f\x90\x8d\x97\xef\xad\xd6\xd6\xd0\x0c\x38\x77\x07\x48\x61\x54\x4e\x48\x33\x33\x42\x6b\x64\x76\x3d\x01\x98\xf3\x68\x98\x0a\x0f\x42\x06\x82\xa7\x72\xb0\xe4\x00\x8d\x2b\x8f\x0b\x54\x89\x97\xbf\xe2\x8f\xed\x05\xc6\xeb\x50\xbb\x8e\xe2\xd8\xd2\x32\x38\x2e\x30\xff\x6c\x66\x91\xec\x58\xca\x3e\xee\x3b\xa1\x90\x85\x95\x53\x90\xae\xa3\xe1\x71\x17\x6d\xeb\x2f\xee\x3e\x96\x94\x71\x51\x1e\x46\xd0\x75\x4c\xbc\xe3\xb4\x60\xeb\xfe\x92\x25\x2f\x4f\xfb\x63\x12\x56\x8e\xd1\x27\x02\xb1\xf7\xda\xbd\xbd\x0d\xdf\x03\xc2\x84\x0b\xcc\xce\x25\xb8\xa0\xa8\x63\x52\x19\x66\x1a\x14\xa9\xb7\xe4\x60\xe6\x02\xe6\xf3\x56\xb3\x62\xef\xaf\x59\xed\x36\xd8\x2c\x21\xf4\xbf\x17\x82\xf1\xd8\x3f\xe6\x7e\xe1\xa6\xc2\x66\x50\x91\xc7\xc4\xf1\xfe\x2b\x85\x10\x3f\xb3\x25\xfb\x36\xc3\x0f\x5e\x6a\xda\xef\x0a\xa6\x16\xdf\xec\x0d\x2e\x30\xb7\x88\x16\x4b\xff\x9d\x8e\xdf\x17\xf6\xfe\x9a\xa8\xc2\xea\x67\xb4\xf9\x1b\x57\xb0\x98\xc1\x7f\xd1\xf7\x81\x53\x6b\xf4\x52\x39\xb8\x5b\x27\xd6\xf4\x31\x3f\xf4\x06\x41\xcd\x73\x7c\x01\x72\x47\x58\xae\x64\xa9\xf4\xea\xa5\x36\xe1\xf6\x2d\x46\x89\xf2\x14\x2f\x89\x21\x6c\x0f\x8a\x75\xf0\xee\x05\x15\xef\xde\xce\xa3\x25\x3c\x84\xe9\x02\x0e\x8c\x18\x12\xd2\x46\x95\xf7\xd1\x6d\xe9\x7c\x6e\x80\xb3\x57\xe4\x3b\x78\x9d\x05\x95\x82\xdd\xfd\x8d\x5e\xf4\x4f\x8b\xf1\xf8\x3c\x72\xa9\x2a\x8a\x34\x92\x45\x71\xd1\x07\x2f\x8f\xbe\xaa\x24\xd0\x93\x88\xf9\xa7\x82\xdf\x15\x2c\x89\xe5\xa5\x5f\x39\xb4\x6e\x75\x43\x9b\x1e\x7d\x67\x3a\xb5\x53\xf8\xfe\x06\xbe\x77\x09\x1e\x57\x1e\x3d\xb5\xdc\x23\x68\x9f\xbb\x14\x49\x09\xc4\x63\x20\x55\x53\xa6\xc4\x90\xa0\xd1\x55\xee\xa4\xce\xc1\x66\x19\x96\x4b\xa0\x93\x07\xe9\x03\xd0\x6e\xd1\x7f\x69\x90\xdc\xc2\xcc\x2b\xb0\x59\x26\x7a\x93\x7d\x2f\x30\xb3\x6d\x4c\xab\x02\x75\x48\xb7\x10\x19\x6d\xba\x8b\x50\xcb\xb4\xd7\xc9\x27\x1f\xa2\x8f\x1f\x07\xa7\xf8\xfb\xbb\xa8\x4f\x59\xdf\xd9\x45\x38\xd1\xf6\xfe\x1a\xf9\xd1\xae\xec\xda\x3b\xa7\x88\x93\xf1\x93\xa0\x4f\xb2\x89\x68\x22\x81\x04\xa2\x2e\xe8\x3a\x52\x37\x93\xc2\xf4\x00\x8f\xb8\xdf\x7d\xcf\xa3\xbf\xfa\x50\xa9\x76\xd2\xae\x66\x51\x35\x05\x11\x2f\xd3\x68\x9e\x29\x19\x70\xa7\xfb\x09\x64\x77\x49\x78\x2e\x04\x09\x0e\x59\x61\x25\x22\xfb\x04\xf0\x32\xca\x71\xff\x0b\x00\x00\xff\xff\xa2\xca\xcb\x55\xe9\x12\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 4841, mode: os.FileMode(420), modTime: time.Unix(1620292802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
