// Code generated for package i18n by go-bindata DO NOT EDIT. (@generated)
// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcd\x72\xa3\x3a\x16\xde\xf3\x14\x0a\xa9\xde\xf5\xa4\xee\x6c\xb3\x23\x98\x24\x4c\x63\xa0\x00\xe7\x4e\xee\x86\x92\xe1\xd8\xd6\x04\x24\x46\x12\x9d\xf6\xdd\xcd\x7b\xcd\x3b\xcd\x2b\x4c\x1d\x49\xc6\xf8\x27\xd5\xe9\xba\x9b\x6e\x3b\xa5\x73\xce\xa7\xf3\xf7\x7d\xf2\x6d\x23\xfa\x5e\x70\x2f\x0d\x96\x51\x1d\xfd\x33\x2e\xab\xf2\x9e\xf8\x29\xed\x81\xd0\x4e\x02\x6d\xf7\x04\x7e\x30\xa5\x95\xef\xc5\x79\x9d\x66\xd5\xf1\x50\xde\x01\x55\x40\x36\xac\xeb\x08\xe3\x44\xef\x80\x48\xd8\x32\xa5\xe5\x9e\xc4\x39\x11\xf6\x4f\x6a\xaf\x34\xf4\x44\x81\xd6\x8c\x6f\xc9\x40\xb7\xe0\x7b\xde\x6d\xd3\x8d\x4a\x83\xf4\xc2\x64\x55\x56\x51\x51\x2f\xa2\x24\xaa\xa2\xfa\x31\x88\x93\x68\x71\x4f\xfc\x86\x72\xc2\x85\x26\x2d\x74\xa0\x81\xb8\xe3\x18\xa7\x19\xa5\x04\xae\x89\xd2\x54\x83\x3f\x39\x88\x4b\x83\xae\x58\xa5\x69\x9c\x3e\xdd\x13\xbf\xda\xcd\xcc\x94\x71\x26\x47\xce\x19\xdf\x5e\x18\x25\x59\x18\x24\xf7\xc4\x8f\xfb\x41\x48\x3d\x59\x35\x94\xa3\xd5\x1a\xc8\x38\x6c\x25\x6d\xa1\x35\xc8\x25\xb4\xc0\x35\xa3\x9d\x77\x02\xba\x2e\xa2\x32\x5b\x15\x61\x74\x4f\xfc\x47\xca\x3a\x68\x89\x16\x0e\xff\x0d\xa9\x76\x20\x01\x71\x50\x4e\xa8\x52\xa2\x61\x54\x43\x4b\x76\x42\x69\x32\xf2\x16\x24\xd1\x3b\xa6\xc8\x1b\xec\xfd\x0f\xdc\xd6\x7f\x64\xe9\x2f\xf9\xfe\x53\x70\xb8\xe2\xfb\x31\x58\x25\x55\x1d\x16\xd1\x22\x4a\xab\x38\x48\xea\x30\x48\x4d\x16\x6c\xd8\x7b\xe2\x2f\x60\x43\xc7\x4e\x93\xe3\x4d\x67\xa9\xb0\x41\x5b\xdf\x76\x4c\xf8\x1c\x85\xdf\x8e\x55\x33\x39\x3f\x5a\x71\x6c\xa3\xa3\xa9\x69\x07\xd3\x59\xca\x7c\x1e\x15\x48\x73\xc6\xf7\x3c\xef\x16\x53\xe1\x3d\x67\x65\x55\x07\x49\x11\x05\x8b\xd7\x63\xa7\x3d\x63\x96\xce\xdb\xd1\x65\xc9\x58\x4c\x00\xae\x26\xc7\x66\x19\xf3\xe3\x5c\xcc\x92\xf4\xce\xf4\xce\x80\x71\x45\xbf\xe6\xb7\x7e\x78\xad\xf3\x22\xfb\x47\x14\x56\x7f\x29\xc4\x20\xc5\xbf\xa0\xd1\xbe\x17\xe4\xb9\xf5\x1f\x2f\xf3\xac\xa8\xea\xc7\x38\x89\xea\x32\xfe\x23\xaa\xa3\xa2\xc8\x8a\x7b\xe2\x67\xbc\xdb\xe3\x64\x81\x32\xe6\x8c\x93\xbf\xff\xb6\x7c\xc0\x5c\xda\x76\xec\x84\x6d\xc7\xab\x9e\x1e\xb3\x62\x19\x54\xa7\xbe\x30\xfe\xdd\x8f\x4e\xdd\x99\x7f\x7f\x18\xdf\x64\x23\x64\x4f\xf5\xa5\xd7\xf2\xb5\xac\xa2\x65\xed\x06\xfe\x31\x5b\xa5\x8b\xeb\xf3\xde\x89\x86\x76\x38\xec\x1b\x26\x95\xfe\xdf\x7f\xff\xe3\x7b\x69\x86\x76\xc1\x4b\x10\x27\xc1\x43\x82\xed\x94\x0a\x12\x0f\x84\x7e\xa7\xac\xa3\xeb\x0e\x7c\x2f\x2e\xed\xc4\x19\xe4\xb3\x59\x67\x76\xfc\xac\x53\x4c\xa8\xef\xcd\xef\x66\xee\x53\xa7\xab\x24\xb1\x4e\x5b\xaa\x29\x96\xc1\x99\xbd\x53\x45\x36\x62\xe4\xed\x0d\x71\x48\x9b\x1d\x34\x6f\x06\xa7\x3b\x82\x97\xbe\x39\x75\x8a\xee\xea\x97\x20\x59\x21\xd2\xa8\x1f\xf4\xde\xfa\x15\x9c\x74\x8c\x03\xf9\xa2\x4e\xcf\xff\x5e\x64\xe9\x93\xcb\x30\x6e\x0c\xde\x08\x29\xa1\xd1\xc4\x06\xb0\x09\xfd\xc8\x78\x36\x74\xf3\xc4\x86\xb3\x89\x11\xda\x5e\xe2\x43\x1f\xae\x25\xd3\xd5\xf2\x9e\xf8\x01\xd1\x42\xd3\x8e\x88\x0d\xf9\xa2\x88\x14\xef\x0a\x3f\x9a\x0b\x50\x09\x84\xae\x39\x02\xea\xbe\x12\xf5\xc6\x86\xab\x7e\xca\xe0\xe5\x74\xa9\x28\xfa\xdd\x75\xf3\x17\xf5\x95\x48\xa0\x4a\xf0\x7b\x04\xe1\x79\xb7\x38\xb0\x5e\x1e\x94\xe5\xef\x59\xb1\x30\x57\x58\x06\x55\xf8\xec\x06\x7f\xa0\x4a\xbd\x0b\xd9\xe2\x18\xb0\x43\x5e\x7c\x2f\x2b\xe2\xa7\x38\x75\x57\x9e\x9f\x17\x92\x6d\x19\xa7\xdd\x47\x86\x55\x96\xd5\xcb\x20\x7d\x35\x50\x57\x45\x84\x9b\xa0\x12\x82\xf4\x94\xef\xc9\xc6\x02\xa6\x5a\x43\x3f\x68\x75\x77\xa8\x39\x92\x0f\xdd\x52\xd3\x9f\x12\x80\xf4\x8c\x8f\x1a\x14\xe9\xa8\x06\x69\x1a\x74\x55\x1e\x17\x7f\x10\x56\xb1\xb9\x7f\x75\x58\x47\x8e\x29\x80\x63\xab\xce\x5a\x49\x70\x4d\x1b\x6d\x9a\x89\xb6\x3d\xe3\x48\x73\x54\x0b\x79\xe3\x1c\xce\xeb\x99\x0a\xa2\xc6\x66\x67\x1c\x9a\x90\xc1\x62\x19\xa7\x97\x7b\x16\x83\xb6\x6e\xd7\x1a\xa7\x16\xc2\xc5\xae\xbd\x39\x05\x5d\x44\x49\x50\x45\x8b\xd9\x4a\x5a\xa1\xd9\x8e\x22\xf4\xf9\xe2\x71\xfb\xc6\x40\x48\x16\x41\x3e\x21\x58\xe5\x8b\x60\x42\xd0\xb5\x74\x38\x0f\x0c\x2d\xb3\x71\x5f\xa2\x22\x7e\x7c\xad\xc3\x6c\x31\xe3\xe6\x17\x90\x6c\xc3\x1a\xaa\x99\xe0\xa4\x11\x2d\x10\x90\x52\x48\xdf\x8b\x96\x41\x9c\xd4\x8b\xb8\x74\x93\xbf\xa4\xac\x3b\x30\xbf\x32\x1d\xd9\x32\xf5\xc9\xc4\x1e\xbc\xcd\xbb\x26\xea\xd1\x61\x4f\x75\xb3\x73\x0d\x60\x57\x0e\x32\xd1\xd4\x96\x25\x7e\x3b\x61\xa4\xa9\xbf\x94\x96\xc0\xb7\x7a\x47\x5a\x01\xb6\xce\x3d\x80\x3e\x48\x14\x09\xff\x1e\x99\x84\x1e\x38\xd2\xcb\xa9\xd3\xc3\x2e\x7d\x97\x82\x6f\x8f\xc4\x45\x84\x9c\xbc\x1f\x00\x1b\xd6\x9a\xc0\x9e\xb3\x96\x77\x8b\x1a\x49\xf0\x03\xcd\x14\xd1\x53\x9c\xa5\x9f\x95\x10\xc4\x1a\xff\x8c\x68\x90\xf9\x31\x14\xfe\x7f\x08\x84\xea\xe1\xd3\x61\x8c\x74\xf8\x19\x9b\x75\x94\x9f\x2a\x29\xbb\x99\x43\xdb\x45\x5b\xd0\x73\x5e\xbd\xb2\x94\x1b\xc1\x37\x6c\x3b\x4a\xd3\x47\xa6\x90\xf1\x32\x78\x8a\x3e\x76\xc5\x7a\xba\x85\xcf\x39\xca\xeb\xf2\x39\x2b\xec\x86\x56\xe3\x66\xc3\x1a\x86\x9a\x31\x1e\x30\x2d\x62\x00\xae\x34\x6d\xde\xbc\xa7\xa8\x3a\x54\xe0\x50\xe1\x54\x1c\x92\x6c\xf6\x30\x9e\x77\x73\xb4\x84\x7e\x0d\x72\x1a\xc5\x60\xb1\x98\x8f\xde\x1a\x80\x13\xda\x3a\x91\xe8\x4c\x26\xb9\xe5\x66\xf5\x63\xad\xe5\x0c\xae\x09\xad\x83\xed\x73\x50\xd6\x2e\xdd\xc8\xc6\xce\x60\x56\x9a\x29\xd5\xe1\x95\x0d\xe2\xdd\x72\xd1\x82\x97\xe2\x24\x1f\x04\x96\x13\xcb\x75\x15\x94\xdf\x90\x4d\xda\x96\xe0\x21\xec\x6a\xa7\xbb\xcd\xd7\x43\x17\x38\xf9\xfc\x75\xb0\x05\x78\xa7\x4c\x13\xa6\x49\x2b\x38\xdc\x61\x80\x35\x6d\xde\xc6\x21\x68\x1a\x31\x72\xed\xe5\x41\x11\x2c\xeb\x68\x99\x57\xaf\xe7\x65\x18\xa8\xa4\x3d\x68\x90\x38\x67\x59\x55\x97\xab\x3c\xb7\xd5\x5a\x71\x35\x0e\x48\xa5\xd8\x93\xfb\x01\xf5\xfd\xa9\xc2\x3c\xd9\x3d\x76\x07\x4c\x92\xed\x21\x08\xbf\xad\xf2\x3a\x08\xc3\x6c\x95\xfe\x8a\x78\x3b\x01\xfe\x69\x15\xe7\xdd\xe2\x08\x9c\xa9\xf5\x4f\x44\x43\xab\x5f\x08\xe2\xaa\xfa\x60\x30\x7a\xee\x8e\xa8\xf3\x2c\x1b\xb8\x51\x71\x43\xe1\xca\xa6\xa7\x4b\x59\xa1\xb7\x86\x8d\x90\x40\xd4\x3b\xd3\xcd\x0e\x9f\x61\xb3\x03\xd4\x5e\xfb\x64\x94\x6d\x94\xcb\x47\xd4\x1a\xd0\x18\x0d\xa1\x25\xe3\x60\x66\x6d\x66\x56\x44\x65\x95\x15\xd1\xa5\x9d\x04\xa5\x85\x64\x7c\x6b\x2c\xa6\xf1\x28\x40\x89\x51\x36\x70\x99\xc3\xd9\x35\x7f\x7a\xb9\xa3\xf6\xbc\x2e\xdd\x8f\x33\x33\x09\xf5\x43\xea\xd7\xd0\x09\xa4\x26\x2d\x4e\x77\x55\x85\xef\x25\x31\x80\x74\x1c\x37\xcd\xd3\x00\x12\x35\x9e\x9b\x28\xa4\x4e\xcb\xac\x13\x3f\xdb\x6a\x94\x7b\xde\xec\xa4\xe0\xec\x4f\xcc\x93\x02\x69\xd9\xef\x37\xc7\xc3\x49\xf6\x14\xa7\xe7\x36\xab\xb9\xfc\x40\xb6\xb8\x71\xa7\x8f\x7c\x5a\x1d\xdf\xd3\x83\x14\x3b\xb6\x66\x5a\x11\x3c\xe3\x62\x6c\xa4\xe8\x49\x27\xb6\x5b\xac\x12\xe3\x77\x9f\x51\x2f\xde\x6d\xc3\x94\x17\xc6\xa5\xd9\x02\xe7\xab\x01\xd5\x39\x53\x44\x53\xf5\x76\xbe\x06\xd0\xf4\x7b\x1f\x9a\xdd\xeb\xbd\x2c\xeb\x30\x4b\x1f\xe3\xa7\xe3\xa3\x2d\x9c\x6f\xe5\x0b\x1e\x3c\x1a\x9c\xbf\xfc\xab\xf3\x8d\xfe\x51\xb5\x5a\x18\x3a\xb1\xef\xcd\x42\xe9\x28\xff\x74\xd5\xd8\x80\xfc\x30\xe1\xc4\x78\xc0\x35\x48\x68\xf1\x25\xa3\x60\x6b\x5c\x22\x84\x8e\x35\x5a\x1d\x87\xd2\x60\xc7\xd4\x1e\x8f\x7d\x25\xc3\xe9\xab\xc8\x68\xcf\xe9\xb7\x92\xf9\x33\x28\xce\x51\xa3\x23\xc2\xa6\x19\x07\x86\xe2\x95\xb7\x33\x90\x12\x8c\xa7\xd6\x42\xfc\xdb\x20\x44\x87\x6e\xf2\x2c\x4b\xae\xe6\x28\xce\x09\x9e\x99\x91\xcf\x95\x3d\x32\xbd\xba\x2c\xa5\x9f\x46\x9c\x18\xc6\x8a\x12\xa5\xe5\xde\x43\x36\x2c\xab\xe2\xf5\xf2\x11\x5e\xcd\x7f\xdf\x11\x1b\xfb\x9b\x02\x95\xcd\x8e\x69\x68\xf4\x28\xc1\x2c\xec\x4b\xc1\xf3\xff\x00\x00\x00\xff\xff\xc4\x20\x99\xf9\x62\x12\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4706, mode: os.FileMode(420), modTime: time.Unix(1643193204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x4f\x57\xe2\x58\x16\xdf\xe7\x53\xe4\xe0\xe9\xdd\x4c\x9d\x9e\x6d\xed\x52\x10\x35\x53\x21\xc9\x49\x82\x3d\xf6\x26\xc7\xb6\x98\x1e\xa7\x15\x3c\xa2\x73\x6a\x66\xd5\xa8\xfc\xb3\x89\x30\x55\xea\x94\x4a\x97\x60\x81\xe5\x68\xf1\x47\xed\x12\x8a\xa0\x7e\x99\xbc\x97\x64\xe5\x57\x98\xf3\xde\x0b\x21\x40\x31\xed\x92\x70\x7f\xf7\xff\xfd\xdd\xfb\xa6\x16\xe3\x2b\x2b\xf1\x18\x25\x30\x61\x56\x63\xff\xc2\x29\xaa\xf2\x9c\x0e\x80\xa2\x6e\x7d\x6c\x81\xf6\x35\xa8\xbf\x03\xa5\xf3\x00\xc5\x49\x9a\x20\xaa\x03\x01\xbb\xd9\x06\xa5\x73\xeb\xc6\xb0\x8c\x13\xbb\x71\x6f\xdd\x35\x9c\xca\x67\xe7\xd7\x53\x50\xb9\x04\xe9\x43\xd3\x78\x0b\xba\x6f\x39\x29\x40\x51\x53\x8b\xcb\x1b\x89\xf5\xe8\x1a\x15\xe4\x23\x8a\xca\xca\x5a\x88\xe5\x59\x95\xd5\xa6\x19\x8e\x67\x43\xcf\xe9\x00\xfc\x4f\x19\xde\xec\x83\x6c\xd9\x39\xac\x82\xbb\xb7\x20\xa7\x5b\x3b\xb7\xf0\xe7\xa4\x75\xb4\xed\x1c\xa7\xad\xfb\x6a\xc0\x83\x72\x0a\x76\x42\x8e\x08\x02\x27\xcc\x3c\xa7\x03\x44\xc0\xec\xe8\xa0\x74\x6e\x3f\x14\xed\x4a\xde\xec\xd4\x1f\x7b\xc9\x31\x08\x2f\x06\x19\x1e\xc5\xd5\xec\x81\x54\x8d\xc0\x5c\xc3\x7a\xc6\xea\x7e\xc4\x8e\xae\x45\x5f\x45\x63\xeb\x4b\x0b\xcb\xd4\x90\x8f\x9a\xcc\x2a\x62\x44\x0e\xb2\x08\x4f\xdc\xac\x5e\xd9\xbf\xd5\x1e\x7b\x49\xbb\x59\xb3\x3e\xbe\x73\xde\xd4\xcc\xce\x2f\xb0\x94\x03\xa9\x1b\x3b\xb9\x67\x76\x0c\x58\xea\x06\x26\x28\xd1\xbe\x17\x85\xa7\x6a\x02\x85\xa6\xb5\x77\x0e\xf2\x58\xd9\x34\x13\xe1\x55\x2d\x28\xb3\x21\x56\x50\x39\x86\xd7\x82\x8c\x80\x63\x23\x76\x50\x36\x8c\x77\x76\xa3\x0a\x32\x75\xa8\x37\xcc\x8e\x6e\x6f\xdd\x11\x23\x38\x21\xb8\xbe\xc1\x59\x36\xf8\x72\x90\x7a\x62\x91\xd4\x9a\x00\xcc\xce\xae\xb5\x77\x0e\xb3\x6d\xf4\xf1\xb8\x03\x8a\x79\x94\x99\xbf\xc5\x13\xeb\xd4\xac\xa8\xa8\x1a\xc3\xcb\x2c\x13\x9a\x1f\xf4\x01\x09\xd6\xd7\x28\x6e\xd4\x58\xda\x33\x34\x1e\xac\x87\xb3\x8c\x02\x09\xb6\x5f\xec\x71\x05\xda\x8b\x79\x4d\x92\xc5\x3f\xb3\x41\xf5\xa9\xba\x2a\x5f\xac\xe3\x06\x8e\x9b\x91\x24\xa2\x8b\x0b\x4b\xa2\xac\x6a\xd3\x1c\xcf\x6a\x0a\xf7\x3d\xab\xb1\xb2\x2c\xca\x28\x04\x23\x05\xf7\x9a\x30\x9f\x34\x3b\x3b\x66\xaf\x4c\xff\xe9\xdb\xf0\x0b\xda\x34\x6a\x20\x9d\xb2\x8e\xb6\xe1\x41\xc6\x34\x6e\x27\xe8\x99\xa4\xe2\xd9\xeb\xe5\x04\xfd\xec\x75\x62\xf9\x35\x4d\xf0\xb0\xdc\x03\xbd\x42\x80\x52\xe6\x15\x95\x0d\x6b\xee\x34\x4d\x8b\x11\x21\xe4\x0e\x53\x2a\x4b\x46\x07\x96\x3e\xc1\x52\x97\x93\x48\xd1\x44\x24\xca\xcc\x31\x1c\xcf\xbc\xe0\x51\x8d\x39\x89\xb6\x3f\x6f\xc3\x6e\x11\xd5\xeb\xf6\x26\x40\x71\x0a\x69\x6e\xec\x1c\xd6\xe5\xe6\xc3\xec\xec\x92\x31\xa4\x39\x89\x06\xe9\x6b\xeb\x22\xf9\xd8\xcb\xc3\xd2\x85\xbd\x75\x07\xb3\x45\xb0\x73\x02\xdb\x06\xd8\x29\x07\x28\x7f\x58\x38\x22\x4d\x88\xf0\x68\x5a\x60\xe9\x02\xe6\xee\x41\xb6\x05\x0a\x4d\x32\x39\x28\x21\xfb\x2d\xa8\x37\x70\xe6\xdb\xf0\xc3\xcf\xf0\xa4\x46\xfe\x22\x81\x62\xb7\xfd\x0a\x91\x2a\x6d\x8e\xe1\x23\xc8\xfb\x6f\x12\xb4\x5d\xc9\xc3\x52\xce\xfa\x6f\x97\xe8\x19\x16\xfe\x4e\x16\x85\x19\x6d\x5a\x94\xc3\x8c\xea\x89\x5b\x97\x4d\x50\xf8\x40\x32\x68\x76\x74\x58\xff\x60\x55\x46\x70\xbe\xa9\xf0\xe7\xd5\x35\x97\xbb\x47\x0c\x91\x6d\x81\x66\xda\x79\x53\x1b\x46\xba\x1d\x26\x44\xc2\xa8\xb5\x52\x57\xb4\x8b\xc1\xce\x11\x6b\xa0\xd3\x79\xec\xe5\xed\xf6\x8d\xfd\x90\xf9\x2a\x58\x61\xe6\x58\x6f\x14\x90\x02\xf3\xe1\x57\x34\x0e\x6e\x8b\xe6\xc1\xee\x09\x38\x2e\x3f\xf6\x8e\xbe\x49\x04\x28\x8a\x9a\xda\x48\x44\xd7\x28\x89\x51\x94\xef\x44\x39\x84\x1d\x0e\x33\x6a\x70\x16\xd3\x53\xda\x2a\x27\x9d\xbd\x43\xbb\xd9\x0c\x50\xa2\xcc\xcd\x70\x82\x1b\x93\x27\xb2\x7b\x32\x2c\xa5\x8a\xa2\x16\x66\x84\x79\xec\x4d\x44\x66\x31\x7d\x63\xd3\xf0\x53\x05\xee\xb7\xec\x87\x0c\xa8\x1e\xa1\x08\x9a\x6d\xb3\x93\x03\xd9\xb4\xf3\xe6\x04\x14\x77\x9d\x8c\x6e\x37\xf7\x71\xbd\x22\xca\x80\x29\x99\xa0\xca\xe1\x70\x08\x0f\xc0\xd2\x05\x28\x22\x16\x22\x05\xb7\x93\x7b\x88\xf3\x1b\x15\xab\x98\x06\xff\x7e\x37\x40\xfb\xd3\x8e\x88\xb5\x5e\x25\x78\x32\x83\xa1\x30\x27\x4c\xe2\x2b\x7a\xe1\xd5\xca\x52\x8c\x26\xe2\x84\x85\xec\xd3\x4b\x1f\x73\xf9\xbd\x93\x59\x9e\x51\xd9\x90\x8f\x0e\x5c\x37\xaf\x2b\x1e\x6b\x92\xe1\x0f\x50\x7c\x88\x91\x3c\xa3\x11\x29\xc4\x60\xa3\xe8\xeb\x90\x31\xf3\xa1\x01\xf7\xbe\x60\x4b\x73\xac\xcc\x4d\xcf\x6b\x41\x31\xe4\xdb\x4f\xce\x45\xde\x6e\x26\x7d\x09\x67\xc3\x0c\xc7\x6b\x21\x4e\x71\x47\xd2\xd9\x6c\x98\xc6\x2d\x59\x82\xf6\xe9\xa5\x75\x96\x9c\x94\xae\x3e\xd6\x5f\x4f\x82\x06\xf9\x2f\x4e\x4a\xf7\x48\xcd\xa5\x6b\xaf\x47\x14\xf4\x6b\xc0\xa6\xb8\xfe\xa0\xd7\x05\xdd\x33\xb3\xa3\x5b\x9f\xce\x40\x31\xeb\xae\xe2\xb3\x24\xbc\xda\x1c\x85\xf7\x69\xca\xa3\x76\x98\x3d\x18\x6e\x22\xe2\x17\x66\x75\xe2\x93\xd5\xb8\xf2\x91\x3a\x45\x4d\xad\x45\x7f\x5c\x8a\xc7\xfa\xec\x2c\xb3\x33\x9c\x28\x3c\x69\x41\x82\x7c\x17\x9c\x9c\xf8\xd9\xd9\xb7\xd6\xa8\xa9\x7f\xc5\x63\xd1\xbe\x56\xb4\x1a\x9f\xa6\xb3\xaf\x61\x88\xf4\xb7\xce\xad\xbb\x6b\xbb\x51\x01\xd9\x37\xc3\x07\x00\x61\x33\x7b\xb7\x0d\x0a\x07\x84\x0a\xc8\xb2\xf1\x93\x98\x93\xd2\xad\x3b\xb2\x32\xb8\x30\x33\xc3\x4e\x02\xee\x97\xc0\x56\x61\x12\x50\xd2\x94\x59\x51\x46\x29\xe4\x56\xe9\x3e\x43\x53\xd4\x54\x7c\x35\x1a\x4b\xac\x2f\x2c\xfe\x44\xcd\xb0\x6a\x3f\x79\xfd\xaa\x0c\xf8\x09\x67\x0a\x25\x65\x75\x2d\xfe\xf7\xe8\xe2\x7a\x38\xba\xf2\x43\x74\xcd\x1b\x00\x26\x14\x1a\x14\x11\x07\xde\x67\x70\x0f\xe1\xdd\x09\xee\x80\x4c\x1a\x3a\x32\x23\x63\x47\x42\x1f\x35\xcb\x28\x9a\x9b\x40\x04\xc1\xc2\xfe\x2d\xfd\xd8\x4b\x8e\x61\xa9\xa9\x58\xfc\x55\x94\x12\xd0\xf0\xf4\xcf\x04\xf7\x52\xd3\x54\x46\x79\x89\xf9\xf5\xd6\x34\x0e\xec\x9d\x4d\x6b\xf3\x0b\xdc\x6f\x39\x99\x02\x7c\xab\x9b\x77\x25\x44\xb2\xa5\x73\x98\xfb\x68\x57\xf2\x7f\xa0\xed\x66\xdb\xaa\xe7\xc0\x7d\x0a\x34\xb6\x4c\xe3\x13\xf9\x0c\x1a\x79\xd8\xdc\x7f\x86\xcc\xfc\xb0\xb0\xf8\xd3\xc6\x2a\xb3\xb8\x18\xdf\x88\xad\x53\x12\x23\x33\x61\x8d\x0d\x4b\xea\x3c\xb2\x50\xd8\x84\xfb\xad\x7e\xe6\x51\xe0\x4a\x44\x92\x48\x49\x10\x9b\xe3\x25\x6d\x1d\x6d\x5b\x57\x06\x78\xff\x4b\x80\x1a\x39\x88\x60\xb9\xe2\x5c\xe4\x7d\x63\xe8\x36\xe6\x0b\x26\xf8\x32\x22\x69\x4c\x30\x28\x46\x84\xa7\x9e\x25\xa0\x9a\x31\x8d\x3b\xfb\xb7\x33\x50\x68\x4f\x38\x4e\xa8\xa9\xd5\xe5\x85\xd8\xc8\xa5\xf8\x3b\x6a\xfd\x6d\x3e\xae\xd6\x77\x71\xbf\xc0\x79\xa2\x5c\xdf\xd1\xbd\x42\x38\xb4\xdf\xd5\xe4\xe8\x70\xf5\x23\x57\xc9\x06\x07\x69\x1d\x64\x33\x50\x3f\xf5\xfb\x3f\x34\x4f\x44\xa3\x77\x7e\x93\xea\x11\xe9\xaf\x9c\xdf\x32\xab\xa8\xa2\xcc\x8e\x88\xc3\xe4\x29\xa8\xea\x7d\x71\xaf\x7f\xe5\x68\x22\xbe\xb1\xb6\x18\x1d\x4f\x89\x2f\x8c\xff\xe3\xbc\xbf\x68\x23\x17\xe4\xa0\x9f\x87\xee\xc5\xab\xf7\x66\x77\x77\xa4\xab\xed\x87\x63\x74\x03\xd4\xab\xa4\x3d\x5d\x17\x97\x5f\x2d\xac\x92\xa5\xe2\x6d\x24\x92\x49\x50\xcc\xc3\x7a\x0d\x64\x5b\xa8\xb1\xdc\xcd\xd2\xfd\xd6\x5d\x40\xbc\x38\xc3\x09\xa3\x08\x6f\xff\x10\x82\xc5\x06\xb0\xf4\x60\xab\x10\x3e\xb7\xce\x92\xb0\x7e\x8a\xfe\x22\x10\xeb\xd0\x70\x0e\xd3\xf4\x84\x4d\x4c\x4d\x2d\x2e\x25\xa8\x20\xa7\xe0\x81\x1b\x9d\x42\xe4\x69\x9f\xd2\x61\xee\x12\x16\x0a\x66\xa7\x6e\x1d\x6d\x9b\x86\x01\x76\x2a\x08\xfd\x8f\x95\x60\x3c\xf6\xd7\xa5\x1f\xa9\xb9\xb0\x16\x14\x85\x69\x6e\x66\x70\xe8\x13\x9a\xf3\xed\x84\x81\xcc\xe8\x8b\xce\x13\x1d\xe4\xd7\xd7\xb3\xbf\x93\xe5\xa5\x55\x44\xa3\x83\x87\x28\x3e\x8a\xad\xa3\x6d\x4e\x82\x8d\xcf\x66\x67\x17\xb4\xaf\x61\x29\x87\x7f\x79\x47\xad\xdd\x6c\x3b\x19\x1d\x1e\xb4\x88\xb4\xf7\x5a\x1d\x39\x9c\xd1\x69\x77\x7a\x09\xf4\x32\xde\xcf\x79\xef\xd6\x70\x32\x3b\x70\xef\x9e\x18\xff\xe3\x6a\x3c\xbe\x8c\xf0\x92\x28\xf2\x63\x91\x71\xab\x34\xbc\x2a\x7f\x75\x97\xa1\xdb\xda\xf7\x92\x0d\xb8\x2b\x33\xb1\xbe\xf6\x4f\x0a\x11\xbe\xa2\xca\xf3\xe3\xcf\x27\xbb\x59\x83\xef\x6f\xe1\x7b\x97\x90\x70\x35\xd0\xcd\xee\x9a\xe8\xaf\xdf\xff\x05\x00\x00\xff\xff\x7e\xe5\xd1\x03\xa5\x0f\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 4005, mode: os.FileMode(420), modTime: time.Unix(1643193230, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0750))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
