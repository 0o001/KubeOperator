// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xcd\x72\xab\x38\x16\xde\xeb\x29\x14\xbc\x9d\xba\x35\xeb\xec\x14\x50\x1c\xe6\x62\x70\x01\xce\x4c\x66\x43\xc9\x70\x6c\xab\x03\x12\x25\x89\x9b\xce\xdd\xf5\x7b\xf5\x3b\xf5\x2b\x74\x49\xc8\x06\xdb\x49\xc5\xb7\x7a\x95\xb8\xac\xf3\xf7\x9d\xef\x9c\xef\x78\x51\xcb\xae\x93\x02\xa5\x64\x45\x2b\xfa\xbf\xb8\x28\x8b\x7b\x1c\xa4\xac\x03\xcc\x5a\x05\xac\x79\xc7\xf0\x3b\xd7\x46\x07\x28\x5e\x57\x69\x56\x4e\x8f\xd6\x2d\x30\x0d\x78\xc7\xdb\x16\x73\x81\xcd\x01\x70\x2b\x6b\xd6\xe2\x78\x8d\xe5\xf8\x59\xbf\x6b\x03\x1d\xd6\x60\x0c\x17\x7b\xdc\xb3\x3d\x04\x08\x2d\xea\x76\xd0\x06\x14\x0a\x93\x4d\x51\xd2\xbc\x8a\x68\x42\x4b\x5a\x3d\x92\x38\xa1\xd1\x3d\x0e\x6a\x26\xb0\x90\x06\x37\xd0\x82\x01\xec\x9f\xdb\x20\xf5\xa0\x14\x08\x83\xb5\x61\x06\x82\x93\x83\xb8\x70\xa9\xe5\x9b\x34\x8d\xd3\xe5\x3d\x0e\xca\xc3\xcc\x4c\x3b\x67\x6a\x10\x82\x8b\xfd\x95\x51\x92\x85\x24\xb9\xc7\x41\xdc\xf5\x52\x99\x93\x55\xcd\x84\xb5\xda\x02\x1e\xfa\xbd\x62\x0d\x34\x2e\x73\x05\x0d\x08\xc3\x59\x8b\xce\x92\xae\x72\x5a\x64\x9b\x3c\xa4\xf7\x38\x78\x64\xbc\x85\x06\x1b\xe9\xf3\xbf\xc3\xe5\x01\x14\xd8\x3c\x98\xc0\x4c\x6b\x59\x73\x66\xa0\xc1\x07\xa9\x0d\x1e\x44\x03\x0a\x9b\x03\xd7\xf8\x15\xde\x83\x4f\xdc\x56\xff\xcf\xd2\x5f\xf2\xfd\x53\x0a\xf8\xc0\xf7\x23\xd9\x24\x65\x15\xe6\x34\xa2\x69\x19\x93\xa4\x0a\x49\xea\x50\x18\xc3\xde\xe3\x20\x82\x1d\x1b\x5a\x83\xa7\x4a\x67\x50\x8c\x41\x9b\x60\xa4\x4b\xf8\x44\xc3\xef\x53\xd7\x1c\xe6\x93\x95\xb0\x1c\x9a\x4c\x1d\x1d\x1c\xad\xb4\xfb\x7f\xd0\xa0\xdc\x9b\x00\x21\xb4\xb0\x50\xa0\xa7\xac\x28\x2b\x92\xe4\x94\x44\x2f\x13\xcd\x9e\x2c\x4a\x97\x5c\xf4\x28\x39\x8b\x53\x02\x1f\x82\x33\xa2\x6c\xf1\xf1\x2e\x66\x20\xbd\x71\x73\x70\xc9\xf8\xa6\x7f\xe4\xb7\x7a\x78\xa9\xd6\x79\xf6\x1f\x1a\x96\xff\x28\x44\xaf\xe4\x6f\x50\x9b\x00\x15\x2f\x45\x49\x57\x95\x9f\xa6\xc7\x6c\x93\x46\x5f\x0c\xd3\x8e\x2b\x6d\xfe\xfa\xf3\x8f\x00\xa5\x99\xb5\x23\xcf\x24\x4e\xc8\x43\x62\xdb\x95\x4a\x1c\xf7\x98\xfd\x60\xbc\x65\xdb\x16\x02\x14\x17\x23\xa3\x5d\x0d\xb3\x59\xe2\x23\xbd\x47\xa7\x36\x61\x4b\x67\xdb\x04\xb4\x26\x45\xf1\xdf\x2c\x8f\x5c\x3e\x2b\x52\x86\x4f\xbe\x99\x3d\xd3\xfa\x4d\xaa\xc6\x96\xc6\x45\x2d\x95\x72\x05\x64\x79\xbc\x8c\x53\x92\x5c\xbd\x97\x8a\xef\xb9\x60\xed\x67\x86\x9b\x62\x9a\x3a\x12\x96\xf1\x33\xf5\x86\x8e\x0b\x7e\x4c\x41\xd8\x3a\x9a\x3b\xec\x11\xa9\xa5\x30\xac\x36\x0e\x11\xd6\x74\x5c\x70\x6d\x14\x33\x52\xdd\x79\x87\x73\x14\x53\x89\xf5\x50\x1f\x9c\x43\x07\x18\x89\x56\x71\x7a\x4d\x72\x1b\xb4\xf1\x44\x77\x4e\xc7\x14\xae\x88\x7e\x77\x9e\x74\x4e\x13\x52\xd2\x68\xc6\x87\x8d\x35\x3b\x30\x9b\xfa\xbc\xeb\xbe\xd9\x2e\x85\x24\x22\xeb\x53\x06\x9b\x75\x44\x4e\x19\xb4\x0d\xeb\x2f\x03\x43\xc3\xc7\xb8\xcf\x34\x8f\x1f\x5f\xaa\x30\x8b\x66\x8b\xf1\x19\x14\xdf\xf1\x9a\x19\x2e\x05\xae\x65\x03\x18\x94\x92\x2a\x40\x74\x45\xe2\xa4\x8a\xe2\xc2\xd3\x62\xc5\x78\x7b\x5c\xbb\x1a\x33\x05\xb8\xe1\xfa\x46\x60\x8f\xde\xe6\xed\xa5\x9d\x75\xd8\x31\x53\x1f\xf0\xce\xcd\x80\xab\x0d\xa1\x85\x82\x3d\x97\xe2\x38\x38\x39\x5d\xc6\x59\x7a\xeb\x52\xc4\xa3\xf1\x57\xa3\x63\x77\x99\x65\xab\xfd\x7b\x0c\x64\xf7\xe1\xcd\x61\xdc\x32\xfc\x6a\x3e\x5b\x26\xce\xb5\x61\x93\x58\x59\x08\xc7\xd6\xec\xc1\xcc\x37\xc5\x84\xe2\x01\xea\xd7\xf1\x1b\x29\x76\x7c\x3f\x28\xd7\x1c\x87\x4e\xbc\x22\x4b\xfa\xb9\x2b\xde\xb1\x3d\xdc\xe4\x08\xa1\x85\xec\x41\x68\xc3\xea\x57\xb4\xa4\xe5\x11\x66\x9a\xe7\x59\x3e\xd2\xde\x23\xb9\x93\x83\x70\x42\xe5\x19\xb8\x82\x6e\x0b\xea\x44\x62\x12\x45\x73\xd2\x6e\x01\x04\x66\x8d\xd7\x36\x6f\x72\x52\x09\xcf\xf2\xcf\x25\xc2\x1b\x7c\xa4\x0f\x47\xdb\x27\x52\x54\x1e\x53\xbb\xe4\xbc\xc1\x0c\xff\x13\x9e\xe1\x07\xb3\x87\x16\x42\x36\x80\x52\x3b\x03\x47\x5d\xf0\x1a\x5f\x95\xa4\xf8\x7e\x8f\x03\xd2\x34\xd8\x3e\xc2\x52\x1d\xcf\x05\xf7\xf1\xd8\x6a\xaf\xfa\xff\xea\x47\x94\xdf\x18\x37\x98\x1b\xdc\x48\x01\xdf\x6c\x80\x2d\xab\x5f\x87\x9e\xd4\xb5\x1c\x84\x41\x6b\x92\x93\x55\x45\x57\xeb\xf2\xc5\x5e\x04\x42\x0f\xbb\x1d\xaf\xb9\xbd\x38\x7a\xa6\x58\x07\x06\x94\xb6\x6b\xb8\xac\x8a\xcd\x7a\x9d\xe5\x6e\x07\x08\x3d\xf4\x76\xb9\x5a\xe2\xbd\xf7\xf6\x2c\x39\x17\xc6\xb3\xa9\x1d\xa7\xe7\xa4\x34\x0f\x24\xfc\xbe\x59\x57\x24\x0c\xb3\x4d\xfa\x2b\x9a\x73\x96\xf8\xcd\xe2\x83\x16\x96\xe7\x17\x47\xc6\x0d\xd1\xac\xd5\x2f\x04\xf1\x5d\x7d\x70\x39\x22\x5f\xe3\x63\x9c\xd0\x71\x8f\xfa\x79\xf0\xcc\xf7\x6d\x33\xa7\xa2\xac\x0a\x02\xde\xc2\x4e\x2a\xc0\xfa\x8d\x9b\xfa\x60\xaf\xc7\xd9\x03\x36\x96\x7d\x36\xaf\x63\x94\xeb\xdb\x6f\x0b\xd6\xd8\x1a\x42\x83\x87\xde\x0d\xd4\xcc\x2c\xa7\x45\x99\xe5\xf4\xda\x4e\x81\x36\x52\x71\xb1\x1f\x47\xf0\x38\x1e\x39\x68\x39\xa8\x1a\xae\x31\x9c\x95\xf9\x65\x71\x93\xa4\x7f\x7c\x71\x4c\x33\x73\xba\x2f\x8e\xd0\x6f\xa1\x95\x76\xa9\x1b\x79\xbe\x90\x4a\x7b\xe6\xc9\x1e\x94\x57\x87\xd3\x3c\xf5\xa0\x76\x52\x75\x7e\xa2\xac\xe8\x8c\x9a\x74\x52\xb6\xb1\x1b\xc5\xbb\xa8\x0f\x4a\x0a\xfe\xd3\xe2\xa4\x41\x8d\xba\xf1\x6f\xaf\x60\x49\xb6\x8c\xd3\x4b\x9b\xcd\x5c\xb8\xed\x69\x76\xe7\x5f\x4f\x4a\x54\x4e\x3f\x03\x7a\x25\x0f\x7c\xcb\x8d\xc6\xf6\x8d\x8f\xb1\x53\xb2\xc3\xad\xdc\xef\x6d\x97\xb8\xf8\x76\x8b\xee\xa3\x45\xcd\x35\x0a\xe3\xc2\x6d\x81\xcb\xd5\x60\x8f\x1e\xae\xb1\x61\xfa\xf5\x72\x0d\x58\xd3\x1f\x5d\xe8\x16\x2c\x7a\x5e\x55\x61\x96\x3e\xc6\xcb\xe9\xd6\x0c\xe7\xab\xf7\xea\xe8\x9c\x0c\x2e\x7f\xb0\x94\x97\x6b\xfb\xb3\x6e\x35\xd0\xb7\xf2\xbd\x73\x0b\xa5\x65\xe2\xd6\xae\x21\xf4\x77\x00\x00\x00\xff\xff\x98\xde\xdb\xdb\xa8\x0d\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 3496, mode: os.FileMode(420), modTime: time.Unix(1605594371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x5f\x57\xda\x48\x1f\xbe\x9f\x4f\xc1\x81\xdb\xf7\xbc\xe7\xbd\xee\xdd\x98\x8c\x9a\xb7\x21\xe1\x24\xc1\x5d\xf7\x26\xc7\x22\xdb\x75\xab\xe0\xf1\xcf\x5e\xec\x55\xd1\xa2\x68\x41\xd8\x16\xbb\x5a\xd9\x2a\x16\x2b\xa7\x16\xb0\xb5\x15\x24\x62\xbf\x4c\x66\x12\xae\xfa\x15\xf6\x4c\x26\x84\x00\x4b\xd7\xdb\xe4\xf7\xfc\xfe\x3c\xbf\x67\x9e\x99\x50\x2c\xb9\xb4\x94\x4c\x00\x09\x86\x91\x8e\x7e\x14\x54\x4d\x7d\x10\x08\xe2\x42\xce\x3a\xbf\xc4\xcd\x4f\xb8\x76\x80\x4b\xd5\x20\x10\x22\xba\x24\x6b\xfd\x00\xbb\xd1\xc4\xa5\xaa\x75\x65\x58\xc6\xb1\x5d\xbf\xb3\x3a\xf5\x6e\xf9\x4b\xf7\xaf\x53\x5c\xbe\xc0\x5b\x87\xec\xbb\x10\x09\x02\x10\x8a\x2d\xae\xaf\xae\xc5\x57\x00\x27\x46\x55\x0d\x29\x3a\x8f\x44\xa4\x21\x7d\x12\x0a\x22\xe2\x1f\x04\x82\xe4\xcf\x13\x72\xb5\x8f\x33\x27\xdd\xc3\x0a\xee\xbc\xc4\x3b\x39\x6b\xf7\x9a\x3c\x4d\x59\xaf\x9f\x75\x8f\xb6\xac\xbb\x4a\xd0\x83\x0a\xaa\xd3\x84\x12\x95\x24\x41\x9a\x7a\x10\x08\xb2\x00\xb3\x95\xc3\xa5\xaa\xfd\xb5\x60\x97\xb3\x66\xab\xf6\xed\x36\x35\x02\x11\x65\x0e\x8a\x74\xae\xc6\x2d\x4e\x9f\x31\x98\x5b\x38\xb7\x6d\xb5\xcf\x9d\x46\x57\xe2\xf3\xf1\xc4\xda\xc2\xdc\x22\x18\xe8\x51\x57\x90\x2a\x47\x15\x0e\x51\x3c\x6b\xb3\xf2\xd1\xfe\x7c\xf6\xed\x36\x65\x37\xce\xac\xf3\x83\xee\x8b\x33\xb3\xf5\x9c\x94\x76\x70\xfa\xca\x4e\x15\xcd\x96\x41\x4a\xed\xe0\x98\x24\xfa\x4f\xb2\x74\xdf\x4c\x38\xdf\xb0\x8a\x55\x9c\x75\x92\x4d\xc2\xa8\xa8\xe9\x9c\x82\x78\x24\x69\x02\x14\x75\x0e\x4a\xce\x6c\xac\x0e\x65\xc3\x38\xb0\xeb\x15\xbc\x5d\x23\xb9\xba\xd9\xca\xd9\x9b\x1d\x56\xc4\x21\xc4\xd9\x2f\x37\x8d\xb8\x87\x7d\xea\x59\x45\xb6\x6b\x06\x30\x5b\x7b\x56\xb1\x4a\x32\x4d\xfa\xf1\xa8\x85\x0b\x59\xca\xcc\x2f\xc9\xd5\x35\x30\x2d\xab\x9a\x0e\x45\x05\x41\x7e\xb6\xaf\x03\x36\xac\x4f\x28\xee\xd4\x4e\xb4\x57\x68\x74\x58\x0f\x67\x19\x79\x36\x6c\x6f\xd9\xa3\x09\xf4\x89\x59\x3d\xa2\xc8\xff\x47\x9c\x76\xdf\x5c\xe5\x1b\xeb\xa8\xee\xcc\xad\xce\xaa\x1a\x0a\xeb\xae\x7e\x27\xe5\xa8\xc4\xbb\xf2\x4d\x67\x98\x58\x49\xe9\x03\x29\xb5\x85\x08\xa3\x49\xa6\xa1\x70\x06\x0a\x22\x9c\x10\x29\xab\x42\x24\x60\x7f\x79\x46\xda\x05\xca\xd0\xf5\x55\x10\x08\x2a\x93\x93\xd3\x62\x5f\xc0\x8e\xb2\x58\xae\x20\x00\x20\xb4\xbe\x1a\x5f\x01\x11\xa8\xaa\x3f\xc8\x0a\xef\x14\x0f\x43\x8d\x9b\x76\x44\xb8\x65\x9d\xa4\xba\xc5\x43\xbb\xd1\x08\x02\x59\x11\xa6\x04\x09\x8a\x83\x21\x7b\xc7\x83\x51\x51\xb5\x2f\x66\xc8\x69\xc2\x0c\x6d\x8d\xad\x8a\x94\xde\xe3\x02\x15\x8a\xc3\x46\xd3\x4e\x15\xe9\xf1\xab\x97\xad\xc2\x16\xfe\xe3\xc0\x99\xca\x41\xfb\xe7\xa7\x3d\xd7\x2a\x0c\xef\x44\x40\x3e\x2c\x48\xe3\x24\x15\x98\x9b\x5f\x5a\x48\x04\x58\x38\x13\x8a\x7d\x7a\xe1\x13\x97\xbf\x3b\x05\x89\x50\x43\xbc\x6f\x63\x6e\x9b\x9f\xca\x9e\xb0\xd9\x7e\x82\x40\xe4\x61\xc4\x2b\x1a\x8d\xf0\xd0\x29\x4a\xbf\x0e\x14\x33\xbf\xd6\x49\xf1\xc6\xa9\x34\x83\x14\x61\x72\x56\xe7\x64\xde\x67\x21\xdd\xf7\x59\xbb\x91\xf2\xb1\x85\xc2\x50\x10\x75\x5e\x50\xdd\x1d\x76\x37\xea\xa6\x71\xcd\x7c\xca\x3e\xbd\xb0\xde\xa5\xc6\xd1\xd5\xc3\xfa\x97\xc1\xd0\x38\x7b\xd3\x4d\xe7\x3c\xdd\xd1\x73\xb1\x12\x7f\xbc\x90\x4c\xf4\x14\xab\xa0\x29\x41\x96\xee\x65\x1a\x38\xdb\xc6\xc7\xc7\x7e\xc5\xfa\x8e\x3a\x08\xfd\x9e\x4c\xc4\x7b\x59\xa9\x5d\xdc\x2f\x67\x2f\xc3\xc0\x41\xd8\xac\x5a\x9d\x4f\x76\xbd\x8c\x33\x2f\x06\x4d\x31\x2a\x52\x3f\xb4\xf7\x9a\x38\xff\x8a\x1a\x68\xe6\x92\x1d\x40\xc6\x0a\x79\xfb\x94\x1c\x9f\x75\xd3\x39\xab\xc3\x8e\x91\x10\x86\x53\x68\x1c\x70\xbf\x84\x37\xf3\x63\x80\x20\x94\x5c\x8e\x27\x56\xd7\xe6\x62\x4f\xc0\x14\xd2\x7a\x2c\x21\x45\x91\x15\x2a\xc4\x9d\x3b\x96\x84\x51\x42\xe3\x97\x57\x92\xbf\xc6\x63\x6b\xe1\xf8\xd2\xa3\xf8\x8a\x27\x2d\xc8\xf3\x9e\x94\xd8\x84\xa4\x69\xe0\xdd\x13\x1f\xc2\x33\x49\x57\x7a\xe3\xe4\xcc\xd4\x37\xe2\x90\x3d\xd4\x34\x54\x75\x97\x29\x0a\x71\x82\xfd\x16\xf5\xed\x36\x35\x82\x05\xa1\x44\x72\x3e\x0e\x24\x2a\xcb\x9e\x47\xba\xd7\x94\xae\x41\xf5\x21\xdd\x58\xfa\xda\x34\x5e\xd9\xbb\x1b\xd6\xc6\x0d\xd9\xbf\xec\x6e\xe7\xc9\xcb\x9c\xd9\x29\x91\xda\x5b\x5c\xaa\x92\x9d\x73\xbb\x9c\xfd\x4f\xc0\x6e\x34\xad\xda\x0e\xbe\x4b\xe3\xfa\xa6\x69\x7c\x60\x9f\x71\x3d\x4b\x1a\xfb\xff\xa5\x65\x1e\xcd\xc5\x9e\xac\x2f\xc3\x58\x2c\xb9\x9e\x58\x03\x11\xa8\xc0\xb0\x8e\xc2\x11\x6d\x96\x56\xc8\x6f\x90\xfd\xcb\x9e\x4d\xd1\xc1\xd5\x68\x24\x22\x2b\x9a\xe3\xd3\x39\x52\x6c\x90\x2c\xbd\x56\xad\x8f\x06\x7e\xf3\x3c\x08\x86\x6e\x03\x72\x52\xee\xbe\xcf\xfa\x04\xee\x2a\x70\x02\x72\x0f\xa3\x11\x1d\x72\x9c\x1c\x95\xee\xeb\xc9\xb8\xb2\x6d\x1a\x1d\xfb\xf3\x3b\x9c\x6f\x8e\x71\x66\x10\x5a\x5e\x9c\x4b\x0c\x5d\x93\xff\x92\xd6\xaf\xe7\xd1\xb4\xbe\xe7\xc6\x84\xc3\x13\x70\x7b\x9f\x14\x44\xc4\xdc\xa9\x27\x5f\xe6\xff\x6e\x7e\xda\x2a\x79\xb5\x4d\x0f\xf9\x56\x0e\x67\xb6\x49\xee\xd4\xdf\xff\xc0\xc1\x61\x19\xbd\xb7\x07\xdb\x1e\x8b\xfe\x87\xb7\x87\x82\x54\x4d\x56\xd0\x50\x38\x49\x9d\xe2\x4a\xae\x17\xee\xe9\x57\x89\xaf\x26\xd7\x57\x62\xf1\x51\x4a\x7c\x63\x7c\xa7\x79\xff\xd2\x86\xae\xcf\xbe\x9e\x07\x2e\xcb\x8f\x6f\xcc\xf6\xde\x90\xaa\xed\xaf\x47\x76\x39\x4b\x6a\x15\x26\x4f\xb7\xc5\xc5\xf9\xb9\x65\x66\xd7\x9e\xd7\x33\x26\x71\x21\x4b\x6a\x67\x38\x73\x49\x85\xe5\x7a\x76\xfb\x7f\xae\xb5\x8b\xf2\x94\x20\x0d\x23\x3c\x67\x67\x4f\x06\xa7\x80\x13\xdd\xf7\x6b\xf6\x7e\xb4\xde\xa5\x48\xed\x94\xfe\x62\x10\xeb\xd0\xe8\x1e\x6e\x05\xc6\xdc\x71\x20\x14\x5b\x58\x05\x9c\xa0\x3a\x07\x6e\xf8\x14\xd2\x4e\x7b\x8f\x14\xb2\x73\x41\xf2\x79\xb3\x55\xb3\x5e\x3f\x33\x0d\x03\xef\x96\x29\xfa\xb7\x25\x2e\x99\xf8\x79\xe1\x31\x98\x09\xeb\x9c\x2c\x4d\x0a\x53\xfd\x57\x0e\xf3\x33\xdf\x2b\xa7\x1f\x33\xfc\x9c\xf5\x42\xfb\xfc\xfa\x34\xfb\x7d\x96\x01\x00\x7f\x07\x00\x00\xff\xff\x8f\xc2\xa6\x48\x8f\x0b\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2959, mode: os.FileMode(420), modTime: time.Unix(1605594352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
